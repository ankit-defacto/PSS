/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceImplementation (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:11 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using System.ServiceModel;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using BL = ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic;
using DC = ConcordMfg.PremierSeniorSolutions.WebService.DataContracts;
using FC = ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts;
using SC = ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;


namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceImplementation
{
	[ServiceBehavior(Name = "Client", Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01")]
	public class Client : SC.IClient
	{
		#region IClient Members
		public List<DC.Client> GetAllClient()
		{
			try
			{
				BL.ClientLogic clientLogic = new BL.ClientLogic();
				List<BE.Client> entities = clientLogic.GetAllClient();
				List<DC.Client> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve client data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.Client> GetAllClientWithUndefined()
		{
			try
			{
				BL.ClientLogic clientLogic = new BL.ClientLogic();
				List<BE.Client> entities = clientLogic.GetAllClientWithUndefined();
				List<DC.Client> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve client data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public DC.Client GetClientByClientGuid(Guid clientGuid)
		{
			try
			{
				BL.ClientLogic clientLogic = new BL.ClientLogic();
				BE.Client entity = clientLogic.GetClientByClientGuid(clientGuid);
				DC.Client response = entity.ToDataContract();
				return response;
			}
			catch (BE.ClientNotFoundException ex)
			{
				FC.ClientFault fault = new FC.ClientFault();
				fault.ClientGuid = ex.ClientGuid;
				fault.ErrorMessage = "Client does not exsist in the database.";
				throw new FaultException<FC.ClientFault>(fault,
					new FaultReason(ex.Message));
			}
			catch (Exception ex)
			{
				FC.ClientFault fault = new FC.ClientFault();
				fault.ErrorMessage = "Could not retrieve a specific Client for unknown reasons.";
				throw new FaultException<FC.ClientFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void InsertClient(DC.Client request)
		{
			try
			{
				BL.ClientLogic clientLogic = new BL.ClientLogic();
				BE.Client entity = request.ToBusinessEntity();
				clientLogic.InsertClient(entity);
			}
			catch (BE.ClientAlreadyExistsException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to insert Client data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void UpdateClient(DC.Client request)
		{
			try
			{
				BL.ClientLogic clientLogic = new BL.ClientLogic();
				BE.Client entity = request.ToBusinessEntity();
				clientLogic.UpdateClient(entity);
			}
			catch (BE.ClientNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to update Client data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteClient(DC.Client request)
		{
			try
			{
				BL.ClientLogic clientLogic = new BL.ClientLogic();
				BE.Client entity = request.ToBusinessEntity();
				clientLogic.DeleteClient(entity);
			}
			catch (BE.ClientNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to delete Client data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.Client> GetClientsForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			try
			{
				BL.ClientLogic clientLogic = new BL.ClientLogic();
				List<BE.Client> entities = clientLogic.GetClientsForCityStateZipByCityStateZipGuid(cityStateZipGuid);
				List<DC.Client> response = entities.ToDataContractList();
				return response;
			}
			catch (BE.ClientException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = string.Format("Unable to find a Client with the given CityStateZip");
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}


		public List<DC.Client> GetClientsForPaymentInfoByPaymentInfoGuid(Guid paymentInfoGuid)
		{
			try
			{
				BL.ClientLogic clientLogic = new BL.ClientLogic();
				List<BE.Client> entities = clientLogic.GetClientsForPaymentInfoByPaymentInfoGuid(paymentInfoGuid);
				List<DC.Client> response = entities.ToDataContractList();
				return response;
			}
			catch (BE.ClientException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = string.Format("Unable to find a Client with the given PaymentInfo");
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		#endregion
	}
}