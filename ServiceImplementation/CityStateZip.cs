/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceImplementation (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:10 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using System.ServiceModel;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using BL = ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic;
using DC = ConcordMfg.PremierSeniorSolutions.WebService.DataContracts;
using FC = ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts;
using SC = ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;


namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceImplementation
{
	[ServiceBehavior(Name = "CityStateZip", Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01")]
	public class CityStateZip : SC.ICityStateZip
	{
		#region ICityStateZip Members
		public List<DC.CityStateZip> GetAllCityStateZip()
		{
			try
			{
				BL.CityStateZipLogic cityStateZipLogic = new BL.CityStateZipLogic();
				List<BE.CityStateZip> entities = cityStateZipLogic.GetAllCityStateZip();
				List<DC.CityStateZip> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve cityStateZip data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.CityStateZip> GetAllCityStateZipWithUndefined()
		{
			try
			{
				BL.CityStateZipLogic cityStateZipLogic = new BL.CityStateZipLogic();
				List<BE.CityStateZip> entities = cityStateZipLogic.GetAllCityStateZipWithUndefined();
				List<DC.CityStateZip> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve cityStateZip data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public DC.CityStateZip GetCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			try
			{
				BL.CityStateZipLogic cityStateZipLogic = new BL.CityStateZipLogic();
				BE.CityStateZip entity = cityStateZipLogic.GetCityStateZipByCityStateZipGuid(cityStateZipGuid);
				DC.CityStateZip response = entity.ToDataContract();
				return response;
			}
			catch (BE.CityStateZipNotFoundException ex)
			{
				FC.CityStateZipFault fault = new FC.CityStateZipFault();
				fault.CityStateZipGuid = ex.CityStateZipGuid;
				fault.ErrorMessage = "CityStateZip does not exsist in the database.";
				throw new FaultException<FC.CityStateZipFault>(fault,
					new FaultReason(ex.Message));
			}
			catch (Exception ex)
			{
				FC.CityStateZipFault fault = new FC.CityStateZipFault();
				fault.ErrorMessage = "Could not retrieve a specific CityStateZip for unknown reasons.";
				throw new FaultException<FC.CityStateZipFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void InsertCityStateZip(DC.CityStateZip request)
		{
			try
			{
				BL.CityStateZipLogic cityStateZipLogic = new BL.CityStateZipLogic();
				BE.CityStateZip entity = request.ToBusinessEntity();
				cityStateZipLogic.InsertCityStateZip(entity);
			}
			catch (BE.CityStateZipAlreadyExistsException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to insert City State Zip data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void UpdateCityStateZip(DC.CityStateZip request)
		{
			try
			{
				BL.CityStateZipLogic cityStateZipLogic = new BL.CityStateZipLogic();
				BE.CityStateZip entity = request.ToBusinessEntity();
				cityStateZipLogic.UpdateCityStateZip(entity);
			}
			catch (BE.CityStateZipNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to update City State Zip data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteCityStateZip(DC.CityStateZip request)
		{
			try
			{
				BL.CityStateZipLogic cityStateZipLogic = new BL.CityStateZipLogic();
				BE.CityStateZip entity = request.ToBusinessEntity();
				cityStateZipLogic.DeleteCityStateZip(entity);
			}
			catch (BE.CityStateZipNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to delete City State Zip data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}
		public List<DC.CityStateZip> GetCityStateZipsForFacility(Guid facilityGuid)
		{
			try
			{
				BL.CityStateZipLogic cityStateZipLogic = new BL.CityStateZipLogic();
				List<BE.CityStateZip> cityStateZips = cityStateZipLogic.GetCityStateZipsForFacility(facilityGuid);
				List<DC.CityStateZip> response = cityStateZips.ToDataContractList();
				return response;
			}
			catch (BE.FacilityNotFoundException)
			{
				FC.FacilityFault fault = new FC.FacilityFault();
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to find cityStateZips for facility '{0}'.",
					facilityGuid);
				throw new FaultException<FC.FacilityFault>(fault,
					new FaultReason("Facility does not exist in database."));
			}
			catch (Exception ex)
			{
				FC.FacilityFault fault = new FC.FacilityFault();
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to find cityStateZips for facility '{0}'.",
					facilityGuid);
				throw new FaultException<FC.FacilityFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.CityStateZip> GetCityStateZipsNotForFacility(Guid facilityGuid)
		{
			try
			{
				BL.CityStateZipLogic cityStateZipLogic = new BL.CityStateZipLogic();
				List<BE.CityStateZip> cityStateZips = cityStateZipLogic.GetCityStateZipsNotForFacility(facilityGuid);
				List<DC.CityStateZip> response = cityStateZips.ToDataContractList();
				return response;
			}
			catch (BE.FacilityNotFoundException)
			{
				FC.FacilityFault fault = new FC.FacilityFault();
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to find cityStateZips not for facility '{0}'.",
					facilityGuid);
				throw new FaultException<FC.FacilityFault>(fault,
					new FaultReason("Facility does not exist in database."));
			}
			catch (Exception ex)
			{
				FC.FacilityFault fault = new FC.FacilityFault();
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to find cityStateZips not for facility '{0}'.",
					facilityGuid);
				throw new FaultException<FC.FacilityFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void AddFacilityToCityStateZip(Guid cityStateZipGuid, Guid facilityGuid)
		{
			try
			{
				BE.FacilityLocationCriteria joinRowToAdd = new BE.FacilityLocationCriteria(cityStateZipGuid, facilityGuid);
				BL.FacilityLocationCriteriaLogic joinLogic = new BL.FacilityLocationCriteriaLogic();
				joinLogic.InsertFacilityLocationCriteria(joinRowToAdd);
			}  
			catch (Exception ex)
			{
				FC.FacilityLocationCriteriaFault fault = new FC.FacilityLocationCriteriaFault();
				fault.CityStateZipGuid = cityStateZipGuid;
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to insert facility '{0}' into cityStateZip '{1}'.",
					facilityGuid, cityStateZipGuid);
				throw new FaultException<FC.FacilityLocationCriteriaFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteFacilityFromCityStateZip(Guid cityStateZipGuid, Guid facilityGuid)
		{
			try
			{
				BE.FacilityLocationCriteria joinRowToDelete = new BE.FacilityLocationCriteria(cityStateZipGuid, facilityGuid);
				BL.FacilityLocationCriteriaLogic joinLogic = new BL.FacilityLocationCriteriaLogic();
				joinLogic.DeleteFacilityLocationCriteria(joinRowToDelete);
			}
			catch (Exception ex)
			{
				FC.FacilityLocationCriteriaFault fault = new FC.FacilityLocationCriteriaFault();
				fault.CityStateZipGuid = cityStateZipGuid;
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to remove facility '{0}' from cityStateZip '{1}'.",
					facilityGuid, cityStateZipGuid);
				throw new FaultException<FC.FacilityLocationCriteriaFault>(fault,
					new FaultReason(ex.Message));
			}
		}
		#endregion
	}
}