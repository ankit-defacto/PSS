/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceImplementation (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:11 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using System.ServiceModel;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using BL = ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic;
using DC = ConcordMfg.PremierSeniorSolutions.WebService.DataContracts;
using FC = ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts;
using SC = ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;


namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceImplementation
{
	[ServiceBehavior(Name = "Offering", Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01")]
	public class Offering : SC.IOffering
	{
		#region IOffering Members
		public List<DC.Offering> GetAllOffering()
		{
			try
			{
				BL.OfferingLogic offeringLogic = new BL.OfferingLogic();
				List<BE.Offering> entities = offeringLogic.GetAllOffering();
				List<DC.Offering> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve offering data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.Offering> GetAllOfferingWithUndefined()
		{
			try
			{
				BL.OfferingLogic offeringLogic = new BL.OfferingLogic();
				List<BE.Offering> entities = offeringLogic.GetAllOfferingWithUndefined();
				List<DC.Offering> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve offering data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public DC.Offering GetOfferingByOfferingGuid(Guid offeringGuid)
		{
			try
			{
				BL.OfferingLogic offeringLogic = new BL.OfferingLogic();
				BE.Offering entity = offeringLogic.GetOfferingByOfferingGuid(offeringGuid);
				DC.Offering response = entity.ToDataContract();
				return response;
			}
			catch (BE.OfferingNotFoundException ex)
			{
				FC.OfferingFault fault = new FC.OfferingFault();
				fault.OfferingGuid = ex.OfferingGuid;
				fault.ErrorMessage = "Offering does not exsist in the database.";
				throw new FaultException<FC.OfferingFault>(fault,
					new FaultReason(ex.Message));
			}
			catch (Exception ex)
			{
				FC.OfferingFault fault = new FC.OfferingFault();
				fault.ErrorMessage = "Could not retrieve a specific Offering for unknown reasons.";
				throw new FaultException<FC.OfferingFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void InsertOffering(DC.Offering request)
		{
			try
			{
				BL.OfferingLogic offeringLogic = new BL.OfferingLogic();
				BE.Offering entity = request.ToBusinessEntity();
				offeringLogic.InsertOffering(entity);
			}
			catch (BE.OfferingAlreadyExistsException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to insert Offering data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void UpdateOffering(DC.Offering request)
		{
			try
			{
				BL.OfferingLogic offeringLogic = new BL.OfferingLogic();
				BE.Offering entity = request.ToBusinessEntity();
				offeringLogic.UpdateOffering(entity);
			}
			catch (BE.OfferingNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to update Offering data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteOffering(DC.Offering request)
		{
			try
			{
				BL.OfferingLogic offeringLogic = new BL.OfferingLogic();
				BE.Offering entity = request.ToBusinessEntity();
				offeringLogic.DeleteOffering(entity);
			}
			catch (BE.OfferingNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to delete Offering data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}
		public List<DC.Offering> GetOfferingsForFacility(Guid facilityGuid)
		{
			try
			{
				BL.OfferingLogic offeringLogic = new BL.OfferingLogic();
				List<BE.Offering> offerings = offeringLogic.GetOfferingsForFacility(facilityGuid);
				List<DC.Offering> response = offerings.ToDataContractList();
				return response;
			}
			catch (BE.FacilityNotFoundException)
			{
				FC.FacilityFault fault = new FC.FacilityFault();
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to find offerings for facility '{0}'.",
					facilityGuid);
				throw new FaultException<FC.FacilityFault>(fault,
					new FaultReason("Facility does not exist in database."));
			}
			catch (Exception ex)
			{
				FC.FacilityFault fault = new FC.FacilityFault();
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to find offerings for facility '{0}'.",
					facilityGuid);
				throw new FaultException<FC.FacilityFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.Offering> GetOfferingsNotForFacility(Guid facilityGuid)
		{
			try
			{
				BL.OfferingLogic offeringLogic = new BL.OfferingLogic();
				List<BE.Offering> offerings = offeringLogic.GetOfferingsNotForFacility(facilityGuid);
				List<DC.Offering> response = offerings.ToDataContractList();
				return response;
			}
			catch (BE.FacilityNotFoundException)
			{
				FC.FacilityFault fault = new FC.FacilityFault();
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to find offerings not for facility '{0}'.",
					facilityGuid);
				throw new FaultException<FC.FacilityFault>(fault,
					new FaultReason("Facility does not exist in database."));
			}
			catch (Exception ex)
			{
				FC.FacilityFault fault = new FC.FacilityFault();
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to find offerings not for facility '{0}'.",
					facilityGuid);
				throw new FaultException<FC.FacilityFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void AddFacilityToOffering(Guid offeringGuid, Guid facilityGuid, bool isChecked)
		{
			try
			{
				BE.FacilityOffering joinRowToAdd = new BE.FacilityOffering(offeringGuid, facilityGuid, isChecked);
				BL.FacilityOfferingLogic joinLogic = new BL.FacilityOfferingLogic();
				joinLogic.InsertFacilityOffering(joinRowToAdd);
			}  
			catch (Exception ex)
			{
				FC.FacilityOfferingFault fault = new FC.FacilityOfferingFault();
				fault.OfferingGuid = offeringGuid;
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to insert facility '{0}' into offering '{1}'.",
					facilityGuid, offeringGuid);
				throw new FaultException<FC.FacilityOfferingFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteFacilityFromOffering(Guid offeringGuid, Guid facilityGuid)
		{
			try
			{
				BE.FacilityOffering joinRowToDelete = new BE.FacilityOffering(offeringGuid, facilityGuid);
				BL.FacilityOfferingLogic joinLogic = new BL.FacilityOfferingLogic();
				joinLogic.DeleteFacilityOffering(joinRowToDelete);
			}
			catch (Exception ex)
			{
				FC.FacilityOfferingFault fault = new FC.FacilityOfferingFault();
				fault.OfferingGuid = offeringGuid;
				fault.FacilityGuid = facilityGuid;
				fault.ErrorMessage = String.Format("Unable to remove facility '{0}' from offering '{1}'.",
					facilityGuid, offeringGuid);
				throw new FaultException<FC.FacilityOfferingFault>(fault,
					new FaultReason(ex.Message));
			}
		}
		#endregion
	}
}