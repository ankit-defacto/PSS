/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceImplementation (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:11 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using System.ServiceModel;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using BL = ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic;
using DC = ConcordMfg.PremierSeniorSolutions.WebService.DataContracts;
using FC = ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts;
using SC = ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;


namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceImplementation
{
	[ServiceBehavior(Name = "ClientAudit", Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01")]
	public class ClientAudit : SC.IClientAudit
	{
		#region IClientAudit Members
		public List<DC.ClientAudit> GetAllClientAudit()
		{
			try
			{
				BL.ClientAuditLogic clientAuditLogic = new BL.ClientAuditLogic();
				List<BE.ClientAudit> entities = clientAuditLogic.GetAllClientAudit();
				List<DC.ClientAudit> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve clientAudit data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.ClientAudit> GetAllClientAuditWithUndefined()
		{
			try
			{
				BL.ClientAuditLogic clientAuditLogic = new BL.ClientAuditLogic();
				List<BE.ClientAudit> entities = clientAuditLogic.GetAllClientAuditWithUndefined();
				List<DC.ClientAudit> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve clientAudit data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public DC.ClientAudit GetClientAuditByClientAuditGuid(Guid clientAuditGuid)
		{
			try
			{
				BL.ClientAuditLogic clientAuditLogic = new BL.ClientAuditLogic();
				BE.ClientAudit entity = clientAuditLogic.GetClientAuditByClientAuditGuid(clientAuditGuid);
				DC.ClientAudit response = entity.ToDataContract();
				return response;
			}
			catch (BE.ClientAuditNotFoundException ex)
			{
				FC.ClientAuditFault fault = new FC.ClientAuditFault();
				fault.ClientAuditGuid = ex.ClientAuditGuid;
				fault.ErrorMessage = "ClientAudit does not exsist in the database.";
				throw new FaultException<FC.ClientAuditFault>(fault,
					new FaultReason(ex.Message));
			}
			catch (Exception ex)
			{
				FC.ClientAuditFault fault = new FC.ClientAuditFault();
				fault.ErrorMessage = "Could not retrieve a specific ClientAudit for unknown reasons.";
				throw new FaultException<FC.ClientAuditFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void InsertClientAudit(DC.ClientAudit request)
		{
			try
			{
				BL.ClientAuditLogic clientAuditLogic = new BL.ClientAuditLogic();
				BE.ClientAudit entity = request.ToBusinessEntity();
				clientAuditLogic.InsertClientAudit(entity);
			}
			catch (BE.ClientAuditAlreadyExistsException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to insert Client Audit data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void UpdateClientAudit(DC.ClientAudit request)
		{
			try
			{
				BL.ClientAuditLogic clientAuditLogic = new BL.ClientAuditLogic();
				BE.ClientAudit entity = request.ToBusinessEntity();
				clientAuditLogic.UpdateClientAudit(entity);
			}
			catch (BE.ClientAuditNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to update Client Audit data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteClientAudit(DC.ClientAudit request)
		{
			try
			{
				BL.ClientAuditLogic clientAuditLogic = new BL.ClientAuditLogic();
				BE.ClientAudit entity = request.ToBusinessEntity();
				clientAuditLogic.DeleteClientAudit(entity);
			}
			catch (BE.ClientAuditNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to delete Client Audit data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.ClientAudit> GetClientAuditsForClientByClientGuid(Guid clientGuid)
		{
			try
			{
				BL.ClientAuditLogic clientAuditLogic = new BL.ClientAuditLogic();
				List<BE.ClientAudit> entities = clientAuditLogic.GetClientAuditsForClientByClientGuid(clientGuid);
				List<DC.ClientAudit> response = entities.ToDataContractList();
				return response;
			}
			catch (BE.ClientAuditException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = string.Format("Unable to find a ClientAudit with the given Client");
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}


		public List<DC.ClientAudit> GetClientAuditsForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			try
			{
				BL.ClientAuditLogic clientAuditLogic = new BL.ClientAuditLogic();
				List<BE.ClientAudit> entities = clientAuditLogic.GetClientAuditsForCityStateZipByCityStateZipGuid(cityStateZipGuid);
				List<DC.ClientAudit> response = entities.ToDataContractList();
				return response;
			}
			catch (BE.ClientAuditException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = string.Format("Unable to find a ClientAudit with the given CityStateZip");
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}


		public List<DC.ClientAudit> GetClientAuditsForPaymentInfoByPaymentInfoGuid(Guid paymentInfoGuid)
		{
			try
			{
				BL.ClientAuditLogic clientAuditLogic = new BL.ClientAuditLogic();
				List<BE.ClientAudit> entities = clientAuditLogic.GetClientAuditsForPaymentInfoByPaymentInfoGuid(paymentInfoGuid);
				List<DC.ClientAudit> response = entities.ToDataContractList();
				return response;
			}
			catch (BE.ClientAuditException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = string.Format("Unable to find a ClientAudit with the given PaymentInfo");
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		#endregion
	}
}