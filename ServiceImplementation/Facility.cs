/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceImplementation (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:11 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using System.ServiceModel;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using BL = ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic;
using DC = ConcordMfg.PremierSeniorSolutions.WebService.DataContracts;
using FC = ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts;
using SC = ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;


namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceImplementation
{
	[ServiceBehavior(Name = "Facility", Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01")]
	public class Facility : SC.IFacility
	{
		#region IFacility Members
		public List<DC.Facility> GetAllFacility()
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				List<BE.Facility> entities = facilityLogic.GetAllFacility();
				List<DC.Facility> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve facility data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.Facility> GetAllFacilityWithUndefined()
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				List<BE.Facility> entities = facilityLogic.GetAllFacilityWithUndefined();
				List<DC.Facility> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve facility data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public DC.Facility GetFacilityByFacilityGuid(Guid facilityGuid)
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				BE.Facility entity = facilityLogic.GetFacilityByFacilityGuid(facilityGuid);
				DC.Facility response = entity.ToDataContract();
				return response;
			}
			catch (BE.FacilityNotFoundException ex)
			{
				FC.FacilityFault fault = new FC.FacilityFault();
				fault.FacilityGuid = ex.FacilityGuid;
				fault.ErrorMessage = "Facility does not exsist in the database.";
				throw new FaultException<FC.FacilityFault>(fault,
					new FaultReason(ex.Message));
			}
			catch (Exception ex)
			{
				FC.FacilityFault fault = new FC.FacilityFault();
				fault.ErrorMessage = "Could not retrieve a specific Facility for unknown reasons.";
				throw new FaultException<FC.FacilityFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void InsertFacility(DC.Facility request)
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				BE.Facility entity = request.ToBusinessEntity();
				facilityLogic.InsertFacility(entity);
			}
			catch (BE.FacilityAlreadyExistsException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to insert Facility data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void UpdateFacility(DC.Facility request)
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				BE.Facility entity = request.ToBusinessEntity();
				facilityLogic.UpdateFacility(entity);
			}
			catch (BE.FacilityNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to update Facility data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteFacility(DC.Facility request)
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				BE.Facility entity = request.ToBusinessEntity();
				facilityLogic.DeleteFacility(entity);
			}
			catch (BE.FacilityNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to delete Facility data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.Facility> GetFacilitiesForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				List<BE.Facility> entities = facilityLogic.GetFacilitiesForCityStateZipByCityStateZipGuid(cityStateZipGuid);
				List<DC.Facility> response = entities.ToDataContractList();
				return response;
			}
			catch (BE.FacilityException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = string.Format("Unable to find a Facility with the given CityStateZip");
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}


		public List<DC.Facility> GetFacilitiesForClientByClientGuid(Guid clientGuid)
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				List<BE.Facility> entities = facilityLogic.GetFacilitiesForClientByClientGuid(clientGuid);
				List<DC.Facility> response = entities.ToDataContractList();
				return response;
			}
			catch (BE.FacilityException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = string.Format("Unable to find a Facility with the given Client");
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}


		public List<DC.Facility> GetFacilitiesForListingTypeByListingTypeGuid(Guid listingTypeGuid)
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				List<BE.Facility> entities = facilityLogic.GetFacilitiesForListingTypeByListingTypeGuid(listingTypeGuid);
				List<DC.Facility> response = entities.ToDataContractList();
				return response;
			}
			catch (BE.FacilityException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = string.Format("Unable to find a Facility with the given ListingType");
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.Facility> GetFacilitiesForCityStateZip(Guid cityStateZipGuid)
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				List<BE.Facility> facilities = facilityLogic.GetFacilitiesForCityStateZip(cityStateZipGuid);
				List<DC.Facility> response = facilities.ToDataContractList();
				return response;
			}
			catch (BE.CityStateZipNotFoundException)
			{
				FC.CityStateZipFault fault = new FC.CityStateZipFault();
				fault.CityStateZipGuid = cityStateZipGuid;
				fault.ErrorMessage = String.Format("Unable to find facilities for cityStateZip '{0}'.",
					cityStateZipGuid);
				throw new FaultException<FC.CityStateZipFault>(fault,
					new FaultReason("CityStateZip does not exist in database."));
			}
			catch (Exception ex)
			{
				FC.CityStateZipFault fault = new FC.CityStateZipFault();
				fault.CityStateZipGuid = cityStateZipGuid;
				fault.ErrorMessage = String.Format("Unable to find facilities for cityStateZip '{0}'.",
					cityStateZipGuid);
				throw new FaultException<FC.CityStateZipFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.Facility> GetFacilitiesNotForCityStateZip(Guid cityStateZipGuid)
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				List<BE.Facility> facilities = facilityLogic.GetFacilitiesNotForCityStateZip(cityStateZipGuid);
				List<DC.Facility> response = facilities.ToDataContractList();
				return response;
			}
			catch (BE.CityStateZipNotFoundException)
			{
				FC.CityStateZipFault fault = new FC.CityStateZipFault();
				fault.CityStateZipGuid = cityStateZipGuid;
				fault.ErrorMessage = String.Format("Unable to find facilities not for cityStateZip '{0}'.",
					cityStateZipGuid);
				throw new FaultException<FC.CityStateZipFault>(fault,
					new FaultReason("CityStateZip does not exist in database."));
			}
			catch (Exception ex)
			{
				FC.CityStateZipFault fault = new FC.CityStateZipFault();
				fault.CityStateZipGuid = cityStateZipGuid;
				fault.ErrorMessage = String.Format("Unable to find facilities not for cityStateZip '{0}'.",
					cityStateZipGuid);
				throw new FaultException<FC.CityStateZipFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void AddCityStateZipToFacility(Guid facilityGuid, Guid cityStateZipGuid)
		{
			try
			{
				BE.FacilityLocationCriteria joinRowToAdd = new BE.FacilityLocationCriteria(facilityGuid, cityStateZipGuid);
				BL.FacilityLocationCriteriaLogic joinLogic = new BL.FacilityLocationCriteriaLogic();
				joinLogic.InsertFacilityLocationCriteria(joinRowToAdd);
			}  
			catch (Exception ex)
			{
				FC.FacilityLocationCriteriaFault fault = new FC.FacilityLocationCriteriaFault();
				fault.FacilityGuid = facilityGuid;
				fault.CityStateZipGuid = cityStateZipGuid;
				fault.ErrorMessage = String.Format("Unable to insert cityStateZip '{0}' into facility '{1}'.",
					cityStateZipGuid, facilityGuid);
				throw new FaultException<FC.FacilityLocationCriteriaFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteCityStateZipFromFacility(Guid facilityGuid, Guid cityStateZipGuid)
		{
			try
			{
				BE.FacilityLocationCriteria joinRowToDelete = new BE.FacilityLocationCriteria(facilityGuid, cityStateZipGuid);
				BL.FacilityLocationCriteriaLogic joinLogic = new BL.FacilityLocationCriteriaLogic();
				joinLogic.DeleteFacilityLocationCriteria(joinRowToDelete);
			}
			catch (Exception ex)
			{
				FC.FacilityLocationCriteriaFault fault = new FC.FacilityLocationCriteriaFault();
				fault.FacilityGuid = facilityGuid;
				fault.CityStateZipGuid = cityStateZipGuid;
				fault.ErrorMessage = String.Format("Unable to remove cityStateZip '{0}' from facility '{1}'.",
					cityStateZipGuid, facilityGuid);
				throw new FaultException<FC.FacilityLocationCriteriaFault>(fault,
					new FaultReason(ex.Message));
			}
		}
		public List<DC.Facility> GetFacilitiesForOffering(Guid offeringGuid)
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				List<BE.Facility> facilities = facilityLogic.GetFacilitiesForOffering(offeringGuid);
				List<DC.Facility> response = facilities.ToDataContractList();
				return response;
			}
			catch (BE.OfferingNotFoundException)
			{
				FC.OfferingFault fault = new FC.OfferingFault();
				fault.OfferingGuid = offeringGuid;
				fault.ErrorMessage = String.Format("Unable to find facilities for offering '{0}'.",
					offeringGuid);
				throw new FaultException<FC.OfferingFault>(fault,
					new FaultReason("Offering does not exist in database."));
			}
			catch (Exception ex)
			{
				FC.OfferingFault fault = new FC.OfferingFault();
				fault.OfferingGuid = offeringGuid;
				fault.ErrorMessage = String.Format("Unable to find facilities for offering '{0}'.",
					offeringGuid);
				throw new FaultException<FC.OfferingFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.Facility> GetFacilitiesNotForOffering(Guid offeringGuid)
		{
			try
			{
				BL.FacilityLogic facilityLogic = new BL.FacilityLogic();
				List<BE.Facility> facilities = facilityLogic.GetFacilitiesNotForOffering(offeringGuid);
				List<DC.Facility> response = facilities.ToDataContractList();
				return response;
			}
			catch (BE.OfferingNotFoundException)
			{
				FC.OfferingFault fault = new FC.OfferingFault();
				fault.OfferingGuid = offeringGuid;
				fault.ErrorMessage = String.Format("Unable to find facilities not for offering '{0}'.",
					offeringGuid);
				throw new FaultException<FC.OfferingFault>(fault,
					new FaultReason("Offering does not exist in database."));
			}
			catch (Exception ex)
			{
				FC.OfferingFault fault = new FC.OfferingFault();
				fault.OfferingGuid = offeringGuid;
				fault.ErrorMessage = String.Format("Unable to find facilities not for offering '{0}'.",
					offeringGuid);
				throw new FaultException<FC.OfferingFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void AddOfferingToFacility(Guid facilityGuid, Guid offeringGuid, bool isChecked)
		{
			try
			{
				BE.FacilityOffering joinRowToAdd = new BE.FacilityOffering(facilityGuid, offeringGuid, isChecked);
				BL.FacilityOfferingLogic joinLogic = new BL.FacilityOfferingLogic();
				joinLogic.InsertFacilityOffering(joinRowToAdd);
			}  
			catch (Exception ex)
			{
				FC.FacilityOfferingFault fault = new FC.FacilityOfferingFault();
				fault.FacilityGuid = facilityGuid;
				fault.OfferingGuid = offeringGuid;
				fault.ErrorMessage = String.Format("Unable to insert offering '{0}' into facility '{1}'.",
					offeringGuid, facilityGuid);
				throw new FaultException<FC.FacilityOfferingFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteOfferingFromFacility(Guid facilityGuid, Guid offeringGuid)
		{
			try
			{
				BE.FacilityOffering joinRowToDelete = new BE.FacilityOffering(facilityGuid, offeringGuid);
				BL.FacilityOfferingLogic joinLogic = new BL.FacilityOfferingLogic();
				joinLogic.DeleteFacilityOffering(joinRowToDelete);
			}
			catch (Exception ex)
			{
				FC.FacilityOfferingFault fault = new FC.FacilityOfferingFault();
				fault.FacilityGuid = facilityGuid;
				fault.OfferingGuid = offeringGuid;
				fault.ErrorMessage = String.Format("Unable to remove offering '{0}' from facility '{1}'.",
					offeringGuid, facilityGuid);
				throw new FaultException<FC.FacilityOfferingFault>(fault,
					new FaultReason(ex.Message));
			}
		}
		#endregion
	}
}