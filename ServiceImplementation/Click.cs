/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceImplementation (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:11 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using System.ServiceModel;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using BL = ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic;
using DC = ConcordMfg.PremierSeniorSolutions.WebService.DataContracts;
using FC = ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts;
using SC = ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;


namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceImplementation
{
	[ServiceBehavior(Name = "Click", Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01")]
	public class Click : SC.IClick
	{
		#region IClick Members
		public List<DC.Click> GetAllClick()
		{
			try
			{
				BL.ClickLogic clickLogic = new BL.ClickLogic();
				List<BE.Click> entities = clickLogic.GetAllClick();
				List<DC.Click> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve click data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.Click> GetAllClickWithUndefined()
		{
			try
			{
				BL.ClickLogic clickLogic = new BL.ClickLogic();
				List<BE.Click> entities = clickLogic.GetAllClickWithUndefined();
				List<DC.Click> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve click data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public DC.Click GetClickByClickGuid(Guid clickGuid)
		{
			try
			{
				BL.ClickLogic clickLogic = new BL.ClickLogic();
				BE.Click entity = clickLogic.GetClickByClickGuid(clickGuid);
				DC.Click response = entity.ToDataContract();
				return response;
			}
			catch (BE.ClickNotFoundException ex)
			{
				FC.ClickFault fault = new FC.ClickFault();
				fault.ClickGuid = ex.ClickGuid;
				fault.ErrorMessage = "Click does not exsist in the database.";
				throw new FaultException<FC.ClickFault>(fault,
					new FaultReason(ex.Message));
			}
			catch (Exception ex)
			{
				FC.ClickFault fault = new FC.ClickFault();
				fault.ErrorMessage = "Could not retrieve a specific Click for unknown reasons.";
				throw new FaultException<FC.ClickFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void InsertClick(DC.Click request)
		{
			try
			{
				BL.ClickLogic clickLogic = new BL.ClickLogic();
				BE.Click entity = request.ToBusinessEntity();
				clickLogic.InsertClick(entity);
			}
			catch (BE.ClickAlreadyExistsException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to insert Click data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void UpdateClick(DC.Click request)
		{
			try
			{
				BL.ClickLogic clickLogic = new BL.ClickLogic();
				BE.Click entity = request.ToBusinessEntity();
				clickLogic.UpdateClick(entity);
			}
			catch (BE.ClickNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to update Click data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteClick(DC.Click request)
		{
			try
			{
				BL.ClickLogic clickLogic = new BL.ClickLogic();
				BE.Click entity = request.ToBusinessEntity();
				clickLogic.DeleteClick(entity);
			}
			catch (BE.ClickNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to delete Click data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.Click> GetClicksForFacilityByFacilityGuid(Guid facilityGuid)
		{
			try
			{
				BL.ClickLogic clickLogic = new BL.ClickLogic();
				List<BE.Click> entities = clickLogic.GetClicksForFacilityByFacilityGuid(facilityGuid);
				List<DC.Click> response = entities.ToDataContractList();
				return response;
			}
			catch (BE.ClickException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = string.Format("Unable to find a Click with the given Facility");
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}


		public List<DC.Click> GetClicksForListingTypeByListingTypeGuid(Guid listingTypeGuid)
		{
			try
			{
				BL.ClickLogic clickLogic = new BL.ClickLogic();
				List<BE.Click> entities = clickLogic.GetClicksForListingTypeByListingTypeGuid(listingTypeGuid);
				List<DC.Click> response = entities.ToDataContractList();
				return response;
			}
			catch (BE.ClickException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = string.Format("Unable to find a Click with the given ListingType");
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		#endregion
	}
}