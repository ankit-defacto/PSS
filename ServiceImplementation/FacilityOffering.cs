/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceImplementation (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:11 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using System.ServiceModel;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using BL = ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic;
using DC = ConcordMfg.PremierSeniorSolutions.WebService.DataContracts;
using FC = ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts;
using SC = ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;


namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceImplementation
{
	[ServiceBehavior(Name = "FacilityOffering", Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01")]
	public class FacilityOffering : SC.IFacilityOffering
	{
		#region IFacilityOffering Members
		public List<DC.FacilityOffering> GetAllFacilityOffering()
		{
			try
			{
				BL.FacilityOfferingLogic facilityOfferingLogic = new BL.FacilityOfferingLogic();
				List<BE.FacilityOffering> entities = facilityOfferingLogic.GetAllFacilityOffering();
				List<DC.FacilityOffering> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve facilityOffering data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public DC.FacilityOffering GetFacilityOfferingByFacilityGuidOfferingGuid(Guid facilityGuid, Guid offeringGuid)
		{
			try
			{
				BL.FacilityOfferingLogic facilityOfferingLogic = new BL.FacilityOfferingLogic();
				BE.FacilityOffering entity = facilityOfferingLogic.GetFacilityOfferingByFacilityGuidOfferingGuid(facilityGuid, offeringGuid);
				DC.FacilityOffering response = entity.ToDataContract();
				return response;
			}
			catch (BE.FacilityOfferingNotFoundException ex)
			{
				FC.FacilityOfferingFault fault = new FC.FacilityOfferingFault();
				fault.FacilityGuid = ex.FacilityGuid;
				fault.OfferingGuid = ex.OfferingGuid;
				fault.ErrorMessage = "FacilityOffering does not exsist in the database.";
				throw new FaultException<FC.FacilityOfferingFault>(fault,
					new FaultReason(ex.Message));
			}
			catch (Exception ex)
			{
				FC.FacilityOfferingFault fault = new FC.FacilityOfferingFault();
				fault.ErrorMessage = "Could not retrieve a specific FacilityOffering for unknown reasons.";
				throw new FaultException<FC.FacilityOfferingFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void InsertFacilityOffering(DC.FacilityOffering request)
		{
			try
			{
				BL.FacilityOfferingLogic facilityOfferingLogic = new BL.FacilityOfferingLogic();
				BE.FacilityOffering entity = request.ToBusinessEntity();
				facilityOfferingLogic.InsertFacilityOffering(entity);
			}
			catch (BE.FacilityOfferingAlreadyExistsException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format("Unable to insert FacilityOffering data for FacilityGuid '{0}' and OfferingGuid '{1}'.",
					request.FacilityGuid.ToString(), request.OfferingGuid.ToString());
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void UpdateFacilityOffering(DC.FacilityOffering request)
		{
			try
			{
				BL.FacilityOfferingLogic facilityOfferingLogic = new BL.FacilityOfferingLogic();
				BE.FacilityOffering entity = request.ToBusinessEntity();
				facilityOfferingLogic.UpdateFacilityOffering(entity);
			}
			catch (BE.FacilityOfferingNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format("Unable to update FacilityOffering data for FacilityGuid '{0}' and OfferingGuid '{1}'.",
					request.FacilityGuid.ToString(), request.OfferingGuid.ToString());
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteFacilityOffering(DC.FacilityOffering request)
		{
			try
			{
				BL.FacilityOfferingLogic facilityOfferingLogic = new BL.FacilityOfferingLogic();
				BE.FacilityOffering entity = request.ToBusinessEntity();
				facilityOfferingLogic.DeleteFacilityOffering(entity);
			}
			catch (BE.FacilityOfferingNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format("Unable to delete FacilityOffering data for FacilityGuid '{0}' and OfferingGuid '{1}'.",
					request.FacilityGuid.ToString(), request.OfferingGuid.ToString());
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}
		#endregion
	}
}