/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceImplementation (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:11 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using System.ServiceModel;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using BL = ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic;
using DC = ConcordMfg.PremierSeniorSolutions.WebService.DataContracts;
using FC = ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts;
using SC = ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;


namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceImplementation
{
	[ServiceBehavior(Name = "PaymentInfo", Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01")]
	public class PaymentInfo : SC.IPaymentInfo
	{
		#region IPaymentInfo Members
		public List<DC.PaymentInfo> GetAllPaymentInfo()
		{
			try
			{
				BL.PaymentInfoLogic paymentInfoLogic = new BL.PaymentInfoLogic();
				List<BE.PaymentInfo> entities = paymentInfoLogic.GetAllPaymentInfo();
				List<DC.PaymentInfo> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve paymentInfo data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public List<DC.PaymentInfo> GetAllPaymentInfoWithUndefined()
		{
			try
			{
				BL.PaymentInfoLogic paymentInfoLogic = new BL.PaymentInfoLogic();
				List<BE.PaymentInfo> entities = paymentInfoLogic.GetAllPaymentInfoWithUndefined();
				List<DC.PaymentInfo> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve paymentInfo data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public DC.PaymentInfo GetPaymentInfoByPaymentInfoGuid(Guid paymentInfoGuid)
		{
			try
			{
				BL.PaymentInfoLogic paymentInfoLogic = new BL.PaymentInfoLogic();
				BE.PaymentInfo entity = paymentInfoLogic.GetPaymentInfoByPaymentInfoGuid(paymentInfoGuid);
				DC.PaymentInfo response = entity.ToDataContract();
				return response;
			}
			catch (BE.PaymentInfoNotFoundException ex)
			{
				FC.PaymentInfoFault fault = new FC.PaymentInfoFault();
				fault.PaymentInfoGuid = ex.PaymentInfoGuid;
				fault.ErrorMessage = "PaymentInfo does not exsist in the database.";
				throw new FaultException<FC.PaymentInfoFault>(fault,
					new FaultReason(ex.Message));
			}
			catch (Exception ex)
			{
				FC.PaymentInfoFault fault = new FC.PaymentInfoFault();
				fault.ErrorMessage = "Could not retrieve a specific PaymentInfo for unknown reasons.";
				throw new FaultException<FC.PaymentInfoFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void InsertPaymentInfo(DC.PaymentInfo request)
		{
			try
			{
				BL.PaymentInfoLogic paymentInfoLogic = new BL.PaymentInfoLogic();
				BE.PaymentInfo entity = request.ToBusinessEntity();
				paymentInfoLogic.InsertPaymentInfo(entity);
			}
			catch (BE.PaymentInfoAlreadyExistsException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to insert Payment Info data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void UpdatePaymentInfo(DC.PaymentInfo request)
		{
			try
			{
				BL.PaymentInfoLogic paymentInfoLogic = new BL.PaymentInfoLogic();
				BE.PaymentInfo entity = request.ToBusinessEntity();
				paymentInfoLogic.UpdatePaymentInfo(entity);
			}
			catch (BE.PaymentInfoNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to update Payment Info data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeletePaymentInfo(DC.PaymentInfo request)
		{
			try
			{
				BL.PaymentInfoLogic paymentInfoLogic = new BL.PaymentInfoLogic();
				BE.PaymentInfo entity = request.ToBusinessEntity();
				paymentInfoLogic.DeletePaymentInfo(entity);
			}
			catch (BE.PaymentInfoNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format(
					"Unable to delete Payment Info data. Data: {0}",
					request.ToBusinessEntity().ToString());
	
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}
		#endregion
	}
}