/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceImplementation (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:11 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using System.ServiceModel;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using BL = ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic;
using DC = ConcordMfg.PremierSeniorSolutions.WebService.DataContracts;
using FC = ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts;
using SC = ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;


namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceImplementation
{
	[ServiceBehavior(Name = "FacilityLocationCriteria", Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01")]
	public class FacilityLocationCriteria : SC.IFacilityLocationCriteria
	{
		#region IFacilityLocationCriteria Members
		public List<DC.FacilityLocationCriteria> GetAllFacilityLocationCriteria()
		{
			try
			{
				BL.FacilityLocationCriteriaLogic facilityLocationCriteriaLogic = new BL.FacilityLocationCriteriaLogic();
				List<BE.FacilityLocationCriteria> entities = facilityLocationCriteriaLogic.GetAllFacilityLocationCriteria();
				List<DC.FacilityLocationCriteria> response = entities.ToDataContractList();
				return response;
			}
			catch (Exception ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = "Unable to retrieve facilityLocationCriteria data.";
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public DC.FacilityLocationCriteria GetFacilityLocationCriteriaByFacilityGuidCityStateZipGuid(Guid facilityGuid, Guid cityStateZipGuid)
		{
			try
			{
				BL.FacilityLocationCriteriaLogic facilityLocationCriteriaLogic = new BL.FacilityLocationCriteriaLogic();
				BE.FacilityLocationCriteria entity = facilityLocationCriteriaLogic.GetFacilityLocationCriteriaByFacilityGuidCityStateZipGuid(facilityGuid, cityStateZipGuid);
				DC.FacilityLocationCriteria response = entity.ToDataContract();
				return response;
			}
			catch (BE.FacilityLocationCriteriaNotFoundException ex)
			{
				FC.FacilityLocationCriteriaFault fault = new FC.FacilityLocationCriteriaFault();
				fault.FacilityGuid = ex.FacilityGuid;
				fault.CityStateZipGuid = ex.CityStateZipGuid;
				fault.ErrorMessage = "FacilityLocationCriteria does not exsist in the database.";
				throw new FaultException<FC.FacilityLocationCriteriaFault>(fault,
					new FaultReason(ex.Message));
			}
			catch (Exception ex)
			{
				FC.FacilityLocationCriteriaFault fault = new FC.FacilityLocationCriteriaFault();
				fault.ErrorMessage = "Could not retrieve a specific FacilityLocationCriteria for unknown reasons.";
				throw new FaultException<FC.FacilityLocationCriteriaFault>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void InsertFacilityLocationCriteria(DC.FacilityLocationCriteria request)
		{
			try
			{
				BL.FacilityLocationCriteriaLogic facilityLocationCriteriaLogic = new BL.FacilityLocationCriteriaLogic();
				BE.FacilityLocationCriteria entity = request.ToBusinessEntity();
				facilityLocationCriteriaLogic.InsertFacilityLocationCriteria(entity);
			}
			catch (BE.FacilityLocationCriteriaAlreadyExistsException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format("Unable to insert FacilityLocationCriteria data for FacilityGuid '{0}' and CityStateZipGuid '{1}'.",
					request.FacilityGuid.ToString(), request.CityStateZipGuid.ToString());
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void UpdateFacilityLocationCriteria(DC.FacilityLocationCriteria request)
		{
			try
			{
				BL.FacilityLocationCriteriaLogic facilityLocationCriteriaLogic = new BL.FacilityLocationCriteriaLogic();
				BE.FacilityLocationCriteria entity = request.ToBusinessEntity();
				facilityLocationCriteriaLogic.UpdateFacilityLocationCriteria(entity);
			}
			catch (BE.FacilityLocationCriteriaNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format("Unable to update FacilityLocationCriteria data for FacilityGuid '{0}' and CityStateZipGuid '{1}'.",
					request.FacilityGuid.ToString(), request.CityStateZipGuid.ToString());
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}

		public void DeleteFacilityLocationCriteria(DC.FacilityLocationCriteria request)
		{
			try
			{
				BL.FacilityLocationCriteriaLogic facilityLocationCriteriaLogic = new BL.FacilityLocationCriteriaLogic();
				BE.FacilityLocationCriteria entity = request.ToBusinessEntity();
				facilityLocationCriteriaLogic.DeleteFacilityLocationCriteria(entity);
			}
			catch (BE.FacilityLocationCriteriaNotFoundException ex)
			{
				FC.DefaultFaultContract fault = new FC.DefaultFaultContract();
				fault.ErrorMessage = String.Format("Unable to delete FacilityLocationCriteria data for FacilityGuid '{0}' and CityStateZipGuid '{1}'.",
					request.FacilityGuid.ToString(), request.CityStateZipGuid.ToString());
				throw new FaultException<FC.DefaultFaultContract>(fault,
					new FaultReason(ex.Message));
			}
		}
		#endregion
	}
}