/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceContract (v0.0.7.0).xslt
 *  Date generated: 3/28/2012 12:46:09 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.ServiceModel;

namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts
{
    [ServiceContract(Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01",
        Name = "IFacility", SessionMode = SessionMode.Allowed)]
    public interface IFacility
    {
        /// <summary>
        /// Implementation of this method gets all facility objects.
        /// </summary>
        /// <returns>All facility objects.</returns>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAllFacility")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility> GetAllFacility();

        /// <summary>
        /// Implementation of this method gets all facility objects plus an undefined facility.
        /// </summary>
        /// <returns>All facility objects.</returns>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAllFacilityWithUndefined")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility> GetAllFacilityWithUndefined();

        /// <summary>
        /// Implementation of this method gets the facility object given a facility identifier.
        /// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
        /// <returns>The facility object.</returns>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilityByFacilityGuid")]
        ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility GetFacilityByFacilityGuid(Guid facilityGuid);

        /// <summary>
        /// Implementation of this method inserts a facility object.
        /// </summary>
        /// <param name="facility">The facility object to insert.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "InsertFacility")]
        void InsertFacility(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility facility);

        /// <summary>
        /// Implementation of this method updates a facility object.
        /// </summary>
        /// <param name="facility">The facility object to update.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "UpdateFacility")]
        void UpdateFacility(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility facility);

        /// <summary>
        /// Implementation of this method deletes a facility object.
        /// </summary>
        /// <param name="facility">The facility object to delete.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "DeleteFacility")]
        void DeleteFacility(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility facility);

        /// <summary>
        /// Implementation of this method gets a list of facilities associated to a cityStateZip.
        /// </summary>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
        /// <returns>The list of facilities associated with the cityStateZip.</returns>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.CityStateZipFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilitiesForCityStateZipByCityStateZipGuid")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility> GetFacilitiesForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid);

        /// <summary>
        /// Implementation of this method gets a list of facilities associated to a client.
        /// </summary>
		/// <param name="clientGuid">Client Guid</param>
        /// <returns>The list of facilities associated with the client.</returns>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.ClientFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilitiesForClientByClientGuid")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility> GetFacilitiesForClientByClientGuid(Guid clientGuid);

        /// <summary>
        /// Implementation of this method gets a list of facilities associated to a listingType.
        /// </summary>
		/// <param name="listingTypeGuid">Listing Type Guid</param>
        /// <returns>The list of facilities associated with the listingType.</returns>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.ListingTypeFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilitiesForListingTypeByListingTypeGuid")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility> GetFacilitiesForListingTypeByListingTypeGuid(Guid listingTypeGuid);

        /// <summary>
        /// Implementation of this method gets a list of facilities associated to a cityStateZip.
        /// </summary>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
        /// <returns>The list of facilities associated with the cityStateZip.</returns>
        /// <remarks><para>The return value does not include the cityStateZip identifier.</para>
        /// <para>This method is an operations contract.</para></remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.CityStateZipFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilitiesForCityStateZip")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility> GetFacilitiesForCityStateZip(Guid cityStateZipGuid);

        /// <summary>
        /// Implementation of this method gets list of facilities not associated with a cityStateZip.
        /// </summary>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
        /// <returns>The list of facilities not associated with the cityStateZip.</returns>
        /// <remarks><para>The return value does not include the cityStateZip identifier.</para>
        /// <para>This method is an operations contract.</para></remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.CityStateZipFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilitiesNotForCityStateZip")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility> GetFacilitiesNotForCityStateZip(Guid cityStateZipGuid);

        /// <summary>
        /// Implementation of this method associates a facility to a cityStateZip.
        /// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityLocationCriteriaFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "AddCityStateZipToFacility")]
        void AddCityStateZipToFacility(Guid facilityGuid, Guid cityStateZipGuid);

        /// <summary>
        /// Implementation of this method deletes an association of facility to a cityStateZip.
        /// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityLocationCriteriaFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "DeleteCityStateZipFromFacility")]
        void DeleteCityStateZipFromFacility(Guid facilityGuid, Guid cityStateZipGuid);

        /// <summary>
        /// Implementation of this method gets a list of facilities associated to a offering.
        /// </summary>
		/// <param name="offeringGuid">Offering Guid</param>
        /// <returns>The list of facilities associated with the offering.</returns>
        /// <remarks><para>The return value does not include the offering identifier.</para>
        /// <para>This method is an operations contract.</para></remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.OfferingFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilitiesForOffering")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility> GetFacilitiesForOffering(Guid offeringGuid);

        /// <summary>
        /// Implementation of this method gets list of facilities not associated with a offering.
        /// </summary>
		/// <param name="offeringGuid">Offering Guid</param>
        /// <returns>The list of facilities not associated with the offering.</returns>
        /// <remarks><para>The return value does not include the offering identifier.</para>
        /// <para>This method is an operations contract.</para></remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.OfferingFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilitiesNotForOffering")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Facility> GetFacilitiesNotForOffering(Guid offeringGuid);

        /// <summary>
        /// Implementation of this method associates a facility to a offering.
        /// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <param name="isChecked">Is Checked</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityOfferingFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "AddOfferingToFacility")]
        void AddOfferingToFacility(Guid facilityGuid, Guid offeringGuid, bool isChecked);

        /// <summary>
        /// Implementation of this method deletes an association of facility to a offering.
        /// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="offeringGuid">Offering Guid</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityOfferingFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "DeleteOfferingFromFacility")]
        void DeleteOfferingFromFacility(Guid facilityGuid, Guid offeringGuid);
	}
}
	