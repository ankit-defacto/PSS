/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceContract (v0.0.7.0).xslt
 *  Date generated: 3/28/2012 12:46:09 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.ServiceModel;

namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts
{
    [ServiceContract(Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01",
        Name = "IFacilityOffering", SessionMode = SessionMode.Allowed)]
    public interface IFacilityOffering
    {
        /// <summary>
        /// Implementation of this method gets all facilityOffering objects.
        /// </summary>
        /// <returns>All facilityOffering objects.</returns>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAllFacilityOffering")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityOffering> GetAllFacilityOffering();

        /// <summary>
        /// Implementation of this method gets the facilityOffering object given a facilityOffering identifier.
        /// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="offeringGuid">Offering Guid</param>
        /// <returns>The facilityOffering object.</returns>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityOfferingFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilityOfferingByFacilityGuidOfferingGuid")]
        ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityOffering GetFacilityOfferingByFacilityGuidOfferingGuid(Guid facilityGuid, Guid offeringGuid);

        /// <summary>
        /// Implementation of this method inserts a facilityOffering object.
        /// </summary>
        /// <param name="facilityOffering">The facilityOffering object to insert.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "InsertFacilityOffering")]
        void InsertFacilityOffering(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityOffering facilityOffering);

        /// <summary>
        /// Implementation of this method updates a facilityOffering object.
        /// </summary>
        /// <param name="facilityOffering">The facilityOffering object to update.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "UpdateFacilityOffering")]
        void UpdateFacilityOffering(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityOffering facilityOffering);

        /// <summary>
        /// Implementation of this method deletes a facilityOffering object.
        /// </summary>
        /// <param name="facilityOffering">The facilityOffering object to delete.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "DeleteFacilityOffering")]
        void DeleteFacilityOffering(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityOffering facilityOffering);
	}
}
	