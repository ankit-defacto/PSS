/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceContract (v0.0.7.0).xslt
 *  Date generated: 3/28/2012 12:46:09 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.ServiceModel;

namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts
{
    [ServiceContract(Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01",
        Name = "IFacilityAudit", SessionMode = SessionMode.Allowed)]
    public interface IFacilityAudit
    {
        /// <summary>
        /// Implementation of this method gets all facilityAudit objects.
        /// </summary>
        /// <returns>All facilityAudit objects.</returns>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAllFacilityAudit")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityAudit> GetAllFacilityAudit();

        /// <summary>
        /// Implementation of this method gets all facilityAudit objects plus an undefined facilityAudit.
        /// </summary>
        /// <returns>All facilityAudit objects.</returns>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAllFacilityAuditWithUndefined")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityAudit> GetAllFacilityAuditWithUndefined();

        /// <summary>
        /// Implementation of this method gets the facilityAudit object given a facilityAudit identifier.
        /// </summary>
		/// <param name="facilityAuditGuid">Facility Audit Guid</param>
        /// <returns>The facilityAudit object.</returns>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityAuditFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilityAuditByFacilityAuditGuid")]
        ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityAudit GetFacilityAuditByFacilityAuditGuid(Guid facilityAuditGuid);

        /// <summary>
        /// Implementation of this method inserts a facilityAudit object.
        /// </summary>
        /// <param name="facilityAudit">The facilityAudit object to insert.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "InsertFacilityAudit")]
        void InsertFacilityAudit(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityAudit facilityAudit);

        /// <summary>
        /// Implementation of this method updates a facilityAudit object.
        /// </summary>
        /// <param name="facilityAudit">The facilityAudit object to update.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "UpdateFacilityAudit")]
        void UpdateFacilityAudit(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityAudit facilityAudit);

        /// <summary>
        /// Implementation of this method deletes a facilityAudit object.
        /// </summary>
        /// <param name="facilityAudit">The facilityAudit object to delete.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "DeleteFacilityAudit")]
        void DeleteFacilityAudit(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityAudit facilityAudit);

        /// <summary>
        /// Implementation of this method gets a list of facilityAudits associated to a facility.
        /// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
        /// <returns>The list of facilityAudits associated with the facility.</returns>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilityAuditsForFacilityByFacilityGuid")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityAudit> GetFacilityAuditsForFacilityByFacilityGuid(Guid facilityGuid);

        /// <summary>
        /// Implementation of this method gets a list of facilityAudits associated to a cityStateZip.
        /// </summary>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
        /// <returns>The list of facilityAudits associated with the cityStateZip.</returns>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.CityStateZipFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilityAuditsForCityStateZipByCityStateZipGuid")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityAudit> GetFacilityAuditsForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid);

        /// <summary>
        /// Implementation of this method gets a list of facilityAudits associated to a client.
        /// </summary>
		/// <param name="clientGuid">Client Guid</param>
        /// <returns>The list of facilityAudits associated with the client.</returns>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.ClientFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilityAuditsForClientByClientGuid")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityAudit> GetFacilityAuditsForClientByClientGuid(Guid clientGuid);

        /// <summary>
        /// Implementation of this method gets a list of facilityAudits associated to a listingType.
        /// </summary>
		/// <param name="listingTypeGuid">Listing Type Guid</param>
        /// <returns>The list of facilityAudits associated with the listingType.</returns>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.ListingTypeFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetFacilityAuditsForListingTypeByListingTypeGuid")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.FacilityAudit> GetFacilityAuditsForListingTypeByListingTypeGuid(Guid listingTypeGuid);
	}
}
	