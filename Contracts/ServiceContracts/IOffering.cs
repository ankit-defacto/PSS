/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEServiceContract (v0.0.7.0).xslt
 *  Date generated: 3/28/2012 12:46:09 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.ServiceModel;

namespace ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts
{
    [ServiceContract(Namespace = "http://ConcordMfg.PremierSeniorSolutions.WebService.ServiceContracts/2007/01",
        Name = "IOffering", SessionMode = SessionMode.Allowed)]
    public interface IOffering
    {
        /// <summary>
        /// Implementation of this method gets all offering objects.
        /// </summary>
        /// <returns>All offering objects.</returns>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAllOffering")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Offering> GetAllOffering();

        /// <summary>
        /// Implementation of this method gets all offering objects plus an undefined offering.
        /// </summary>
        /// <returns>All offering objects.</returns>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAllOfferingWithUndefined")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Offering> GetAllOfferingWithUndefined();

        /// <summary>
        /// Implementation of this method gets the offering object given a offering identifier.
        /// </summary>
		/// <param name="offeringGuid">Offering Guid</param>
        /// <returns>The offering object.</returns>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.OfferingFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetOfferingByOfferingGuid")]
        ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Offering GetOfferingByOfferingGuid(Guid offeringGuid);

        /// <summary>
        /// Implementation of this method inserts a offering object.
        /// </summary>
        /// <param name="offering">The offering object to insert.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "InsertOffering")]
        void InsertOffering(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Offering offering);

        /// <summary>
        /// Implementation of this method updates a offering object.
        /// </summary>
        /// <param name="offering">The offering object to update.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "UpdateOffering")]
        void UpdateOffering(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Offering offering);

        /// <summary>
        /// Implementation of this method deletes a offering object.
        /// </summary>
        /// <param name="offering">The offering object to delete.</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.DefaultFaultContract))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "DeleteOffering")]
        void DeleteOffering(ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Offering offering);

        /// <summary>
        /// Implementation of this method gets a list of offerings associated to a facility.
        /// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
        /// <returns>The list of offerings associated with the facility.</returns>
        /// <remarks><para>The return value does not include the facility identifier.</para>
        /// <para>This method is an operations contract.</para></remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetOfferingsForFacility")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Offering> GetOfferingsForFacility(Guid facilityGuid);

        /// <summary>
        /// Implementation of this method gets list of offerings not associated with a facility.
        /// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
        /// <returns>The list of offerings not associated with the facility.</returns>
        /// <remarks><para>The return value does not include the facility identifier.</para>
        /// <para>This method is an operations contract.</para></remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetOfferingsNotForFacility")]
        System.Collections.Generic.List<ConcordMfg.PremierSeniorSolutions.WebService.DataContracts.Offering> GetOfferingsNotForFacility(Guid facilityGuid);

        /// <summary>
        /// Implementation of this method associates a offering to a facility.
        /// </summary>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="isChecked">Is Checked</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityOfferingFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "AddFacilityToOffering")]
        void AddFacilityToOffering(Guid offeringGuid, Guid facilityGuid, bool isChecked);

        /// <summary>
        /// Implementation of this method deletes an association of offering to a facility.
        /// </summary>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <param name="facilityGuid">Facility Guid</param>
        /// <remarks>This method is an operations contract.</remarks>
        [FaultContract(typeof(ConcordMfg.PremierSeniorSolutions.WebService.FaultContracts.FacilityOfferingFault))]
        [OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "DeleteFacilityFromOffering")]
        void DeleteFacilityFromOffering(Guid offeringGuid, Guid facilityGuid);
	}
}
	