/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BELogic (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:04 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Collections.Generic;
using System.Linq;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using DA = ConcordMfg.PremierSeniorSolutions.WebService.DataAccess;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic
{
	public class FacilityAuditLogic
	{
		#region Public CRUD Methods
		public List<BE.FacilityAudit> GetAllFacilityAudit()
		{
			//@@NEW - removed try/catch. Separated query from entity conversion. Renamed "result" to "entities".
			DA.FacilityAuditGateway gateway = new DA.FacilityAuditGateway();
			IOrderedQueryable<DA.FacilityAudit> query = gateway.GetAll();

			List<BE.FacilityAudit> entities = query.ToBusinessEntitiesList();
			return entities;
		}

		public List<BE.FacilityAudit> GetAllFacilityAuditWithUndefined()
		{
			//@@NEW - removed try/catch. Separated DA call from entity conversion. Renamed "result" to "entities".
			DA.FacilityAuditGateway gateway = new DA.FacilityAuditGateway();
			List<DA.FacilityAudit> results =  gateway.GetAllWithUndefined();
			
			List<BE.FacilityAudit> entities = results.ToBusinessEntitiesList();
			return entities;
		}

		public BE.FacilityAudit GetFacilityAuditByFacilityAuditGuid(Guid facilityAuditGuid)
		{
			//@@NEW - removed try/catch. Separated DA call from entity conversion. Renamed "result" to "entity".
			DA.FacilityAuditGateway gateway = new DA.FacilityAuditGateway();
			DA.FacilityAudit result = gateway.GetByPK(facilityAuditGuid);

			BE.FacilityAudit entity = result.ToBusinessEntity();
			return entity;
		}

		public BE.FacilityAudit InsertFacilityAudit(BE.FacilityAudit entity)
		{
			//@@NEW - removed try/catch. insert returns DA entity (with new data). this method now returns an entity.
			DA.FacilityAuditGateway gateway = new DA.FacilityAuditGateway();
			DA.FacilityAudit result = gateway.Insert(entity.ToDataEntity());
			return result.ToBusinessEntity();
		}

		//@@NEW - new method.
		public BE.FacilityAudit InsertFacilityAudit(BE.Facility entity)
		{
			// Create the audit record.
			BE.FacilityAudit audit = new BE.FacilityAudit(entity);
			// Insert the audit record.
			BE.FacilityAudit result = InsertFacilityAudit(audit);

			if (Guid.Empty == result.FacilityAuditGuid)
				throw new BE.FacilityAuditException("Facility Audit record was not inserted.", audit);

			return result;
		}

		//public void UpdateFacilityAudit(BE.FacilityAudit entity)
		//{
		//    //@@NEW - removed try/catch.
		//    DA.FacilityAuditGateway gateway = new DA.FacilityAuditGateway();
		//    gateway.Update(entity.ToDataEntity());
		//}

		//public void DeleteFacilityAudit(BE.FacilityAudit entity)
		//{
		//    //@@NEW - removed try/catch.
		//    DA.FacilityAuditGateway gateway = new DA.FacilityAuditGateway();
		//    gateway.Delete(entity.FacilityAuditGuid);
		//}
		#endregion

		#region Public Many-To-One Methods

		public List<BE.FacilityAudit> GetFacilityAuditsForFacilityByFacilityGuid(Guid facilityGuid)
		{
			DA.FacilityAuditGateway gateway = new DA.FacilityAuditGateway();
			List<BE.FacilityAudit> result = new List<BE.FacilityAudit>();
			result = gateway.GetForFacilityByFacilityGuid(facilityGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.FacilityAudit> GetFacilityAuditsForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			DA.FacilityAuditGateway gateway = new DA.FacilityAuditGateway();
			List<BE.FacilityAudit> result = new List<BE.FacilityAudit>();
			result = gateway.GetForCityStateZipByCityStateZipGuid(cityStateZipGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.FacilityAudit> GetFacilityAuditsForClientByClientGuid(Guid clientGuid)
		{
			DA.FacilityAuditGateway gateway = new DA.FacilityAuditGateway();
			List<BE.FacilityAudit> result = new List<BE.FacilityAudit>();
			result = gateway.GetForClientByClientGuid(clientGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.FacilityAudit> GetFacilityAuditsForListingTypeByListingTypeGuid(Guid listingTypeGuid)
		{
			DA.FacilityAuditGateway gateway = new DA.FacilityAuditGateway();
			List<BE.FacilityAudit> result = new List<BE.FacilityAudit>();
			result = gateway.GetForListingTypeByListingTypeGuid(listingTypeGuid).ToBusinessEntitiesList();
			return result;
		}

		#endregion
		
		#region Public Many-To-Many Methods

		#endregion
	}
}