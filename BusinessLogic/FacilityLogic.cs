/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BELogic (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:04 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Collections.Generic;
using System.Linq;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using DA = ConcordMfg.PremierSeniorSolutions.WebService.DataAccess;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic
{
	public class FacilityLogic
	{
		#region Public CRUD Methods

        public List<BE.Facility> GetAllFacilityByDistanceFilter(BE.DistanceParameters parameters, IEnumerable<BE.Offering> offerings, bool wideSearch, int page, int pageSize, out int totalCount)
        {
            DA.FacilityGateway gateway = new DA.FacilityGateway();
            return gateway.GetAllByDistanceFilter(offerings.ToDataEntitiesList(),
                new DA.DAEntities.LatLng(parameters.Latitude, parameters.Longitude),
                parameters.DistanceRadius, wideSearch, page, pageSize, out totalCount).ToBusinessEntitiesList();
        }

        public List<BE.Facility> GetAllFacilityByDistance(BE.DistanceParameters parameters, int page, int pageSize, out int totalCount)
        {
            DA.FacilityGateway gateway = new DA.FacilityGateway();
            return gateway.GetAllByDistance(
                new DA.DAEntities.LatLng(parameters.Latitude, parameters.Longitude),
                parameters.DistanceRadius, page, pageSize, out totalCount).ToBusinessEntitiesList();
        }

        public List<BE.Facility> GetAllFacilityFilter(BE.CityStateZip csz, IEnumerable<BE.Offering> offerings, bool wideSearch, int page, int pageSize, out int totalCount)
        {
            DA.FacilityGateway gateway = new DA.FacilityGateway();
            return gateway.GetAllFilter(
                csz.ToDataEntity(), offerings.ToDataEntitiesList(), wideSearch, page, pageSize, out totalCount)
                .ToBusinessEntitiesList();
        }

		public List<BE.Facility> GetAllFacility()
		{
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			List<BE.Facility> result = new List<BE.Facility>();
			result = gateway.GetAll().ToBusinessEntitiesList();
			return result;
		}

		public List<BE.Facility> GetAllFacilityWithUndefined()
		{
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			List<BE.Facility> result = new List<BE.Facility>();
			result = gateway.GetAllWithUndefined().ToBusinessEntitiesList();
			return result;
		}

        public BE.Facility GetFacilityByFacilityGuid(Guid facilityGuid)
        {
            DA.FacilityGateway gateway = new DA.FacilityGateway();
            BE.Facility result = new BE.Facility();
            result = gateway.GetByPK(facilityGuid).ToBusinessEntity();
            return result;
        }

        public List<BE.Facility> GetFacilityByClientAndListingTypeGuid(Guid clientGuid,Guid listingTypeGuid)
        {
            DA.FacilityGateway gateway = new DA.FacilityGateway();
            var response= gateway.GetByClientAndListingTypeGuid(clientGuid,listingTypeGuid);
            if (response == null)
                return null;
            else
                return gateway.GetByClientAndListingTypeGuid(clientGuid, listingTypeGuid).ToBusinessEntitiesList();
        }

		public BE.Facility InsertFacility(BE.Facility entity)
		{
			StripPhoneNumber(entity);
			//@@NEW - removed try/catch. insert returns DA entity (with new data). this method now returns an entity.
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			DA.Facility result = gateway.Insert(entity.ToDataEntity());

			//@@NEW
			// Create the audit record.
			FacilityAuditLogic auditLogic = new FacilityAuditLogic();
			auditLogic.InsertFacilityAudit(result.ToBusinessEntity());

			return result.ToBusinessEntity();
		}

		public void UpdateFacility(BE.Facility entity)
		{
			StripPhoneNumber(entity);
			// Update the main record.
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			gateway.Update(entity.ToDataEntity());

			//@@NEW
			// Create the audit record.
			FacilityAuditLogic auditLogic = new FacilityAuditLogic();
			auditLogic.InsertFacilityAudit(entity);
		}

		public void DeleteFacility(BE.Facility entity)
		{
			// Delete the main record.
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			gateway.Delete(entity.FacilityGuid);

			//@@NEW
			// Create the audit record.
			FacilityAuditLogic auditLogic = new FacilityAuditLogic();
			auditLogic.InsertFacilityAudit(entity);
		}
		#endregion

		#region Public Many-To-One Methods

		public List<BE.Facility> GetFacilitiesForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			List<BE.Facility> result = new List<BE.Facility>();
			result = gateway.GetForCityStateZipByCityStateZipGuid(cityStateZipGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.Facility> GetFacilitiesForClientByClientGuid(Guid clientGuid)
		{
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			List<BE.Facility> result = new List<BE.Facility>();
			result = gateway.GetForClientByClientGuid(clientGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.Facility> GetFacilitiesForListingTypeByListingTypeGuid(Guid listingTypeGuid)
		{
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			List<BE.Facility> result = new List<BE.Facility>();
			result = gateway.GetForListingTypeByListingTypeGuid(listingTypeGuid).ToBusinessEntitiesList();
			return result;
		}

		#endregion
		
		#region Public Many-To-Many Methods

		public List<BE.Facility> GetFacilitiesForCityStateZip(Guid cityStateZipGuid)
		{
			List<BE.Facility> result = new List<BE.Facility>();
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			result = gateway.GetAllForCityStateZip(cityStateZipGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.Facility> GetFacilitiesNotForCityStateZip(Guid cityStateZipGuid)
		{
			List<BE.Facility> result = new List<BE.Facility>();
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			result = gateway.GetAllNotForCityStateZip(cityStateZipGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.Facility> GetFacilitiesForOffering(Guid offeringGuid)
		{
			List<BE.Facility> result = new List<BE.Facility>();
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			result = gateway.GetAllForOffering(offeringGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.Facility> GetFacilitiesNotForOffering(Guid offeringGuid)
		{
			List<BE.Facility> result = new List<BE.Facility>();
			DA.FacilityGateway gateway = new DA.FacilityGateway();
			result = gateway.GetAllNotForOffering(offeringGuid).ToBusinessEntitiesList();
			return result;
		}

		#endregion

		private void StripPhoneNumber(BE.Facility entity)
		{
			System.Text.StringBuilder result = new System.Text.StringBuilder();
			foreach (char c in entity.PhoneNumber)
			{
				if (char.IsNumber(c))
					result.Append(c);
			}
			entity.PhoneNumber = result.ToString().Substring(0, 10).PadLeft(10);
		}
	}
}