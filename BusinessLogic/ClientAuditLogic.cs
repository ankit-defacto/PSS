/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BELogic (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:04 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Collections.Generic;
using System.Linq;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using DA = ConcordMfg.PremierSeniorSolutions.WebService.DataAccess;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic
{
	public class ClientAuditLogic
	{
		#region Public CRUD Methods

		public List<BE.ClientAudit> GetAllClientAudit()
		{
			DA.ClientAuditGateway gateway = new DA.ClientAuditGateway();
			List<BE.ClientAudit> result = new List<BE.ClientAudit>();
			result = gateway.GetAll().ToBusinessEntitiesList();
			return result;
		}

		public List<BE.ClientAudit> GetAllClientAuditWithUndefined()
		{
			DA.ClientAuditGateway gateway = new DA.ClientAuditGateway();
			List<BE.ClientAudit> result = new List<BE.ClientAudit>();
			result = gateway.GetAllWithUndefined().ToBusinessEntitiesList();
			return result;
		}

		public BE.ClientAudit GetClientAuditByClientAuditGuid(Guid clientAuditGuid)
		{
			DA.ClientAuditGateway gateway = new DA.ClientAuditGateway();
			BE.ClientAudit result = new BE.ClientAudit();
			result = gateway.GetByPK(clientAuditGuid).ToBusinessEntity();
			return result;
		}

		public BE.ClientAudit InsertClientAudit(BE.ClientAudit entity)
		{
			//@@NEW - removed try/catch. insert returns DA entity (with new data). this method now returns an entity.
			DA.ClientAuditGateway gateway = new DA.ClientAuditGateway();
			DA.ClientAudit result = gateway.Insert(entity.ToDataEntity());
			return result.ToBusinessEntity();
		}

		//@@NEW - new method.
		public BE.ClientAudit InsertClientAudit(BE.Client entity)
		{
			// Create the audit record.
			BE.ClientAudit audit = new BE.ClientAudit(entity);
            audit.AccountPaused = entity.AccountPaused;
			// Insert the audit record.
			BE.ClientAudit result = InsertClientAudit(audit);

			if (Guid.Empty == result.ClientAuditGuid)
				throw new BE.ClientAuditException("Client Audit record was not inserted.", audit);

			return result;
		}

		//public void UpdateClientAudit(BE.ClientAudit entity)
		//{
		//    try
		//    {
		//        DA.ClientAuditGateway gateway = new DA.ClientAuditGateway();
		//        gateway.Update(entity.ToDataEntity());
		//    }
		//    catch (Exception ex) { throw ex; }
		//}

		//public void DeleteClientAudit(BE.ClientAudit entity)
		//{
		//    try
		//    {
		//        DA.ClientAuditGateway gateway = new DA.ClientAuditGateway();
		//        gateway.Delete(entity.ClientAuditGuid);
		//    }
		//    catch (Exception ex) { throw ex; }
		//}
		#endregion

		#region Public Many-To-One Methods

		public List<BE.ClientAudit> GetClientAuditsForClientByClientGuid(Guid clientGuid)
		{
			DA.ClientAuditGateway gateway = new DA.ClientAuditGateway();
			List<BE.ClientAudit> result = new List<BE.ClientAudit>();
			result = gateway.GetForClientByClientGuid(clientGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.ClientAudit> GetClientAuditsForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			DA.ClientAuditGateway gateway = new DA.ClientAuditGateway();
			List<BE.ClientAudit> result = new List<BE.ClientAudit>();
			result = gateway.GetForCityStateZipByCityStateZipGuid(cityStateZipGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.ClientAudit> GetClientAuditsForPaymentInfoByPaymentInfoGuid(Guid paymentInfoGuid)
		{
			DA.ClientAuditGateway gateway = new DA.ClientAuditGateway();
			List<BE.ClientAudit> result = new List<BE.ClientAudit>();
			result = gateway.GetForPaymentInfoByPaymentInfoGuid(paymentInfoGuid).ToBusinessEntitiesList();
			return result;
		}

		#endregion
		
		#region Public Many-To-Many Methods

		#endregion
	}
}