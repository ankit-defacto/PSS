/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BELogic (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:04 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Collections.Generic;
using System.Linq;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using DA = ConcordMfg.PremierSeniorSolutions.WebService.DataAccess;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic
{
	public class CityStateZipLogic
	{
		#region Public CRUD Methods

		public List<BE.CityStateZip> GetAllCityStateZip()
		{
			DA.CityStateZipGateway gateway = new DA.CityStateZipGateway();
			List<BE.CityStateZip> result = new List<BE.CityStateZip>();
            result = gateway.GetAll().ToBusinessEntitiesList();
			return result;
		}

		public List<BE.CityStateZip> GetAllCityStateZipWithUndefined()
		{
			DA.CityStateZipGateway gateway = new DA.CityStateZipGateway();
			List<BE.CityStateZip> result = new List<BE.CityStateZip>();
			result = gateway.GetAllWithUndefined().ToBusinessEntitiesList();
			return result;
		}

		public BE.CityStateZip GetCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			DA.CityStateZipGateway gateway = new DA.CityStateZipGateway();
			BE.CityStateZip result = new BE.CityStateZip();
			result = gateway.GetByPK(cityStateZipGuid).ToBusinessEntity();
			return result;
		}

		//@@NEW
		public BE.CityStateZip GetCityStateZipCodeByZipCode(string zipCode)
		{
			DA.CityStateZipGateway gateway = new DA.CityStateZipGateway();
			DA.CityStateZip result = gateway.GetByZipCode(zipCode);
			if (null != result)
				return result.ToBusinessEntity();
			else
				return null;
		}

		public BE.CityStateZip InsertCityStateZip(BE.CityStateZip entity)
		{
			//@@NEW
			// Check if a CityStateZip already exists with this ZipCode.
			BE.CityStateZip existingEntity = GetCityStateZipCodeByZipCode(entity.ZipCode);
            DA.CityStateZipGateway gateway = new DA.CityStateZipGateway();
            if (null != existingEntity)
            {// existing entity - problematic if first entry contains wrong city/state
                if (!existingEntity.Equals(entity))
                {// argument entity contains different city/state => update with these values
                    //// entity comes without guid from UI
                    entity.CityStateZipGuid = existingEntity.CityStateZipGuid;
                    gateway.Update(entity.ToDataEntity());
                    // should return new value
                    existingEntity = this.GetCityStateZipCodeByZipCode(entity.ZipCode);
                }

                return existingEntity;
            }

			//@@NEW - removed try/catch. insert returns DA entity (with new data). this method now returns an entity.			
			DA.CityStateZip result = gateway.Insert(entity.ToDataEntity());
			return result.ToBusinessEntity();
		}

		public void UpdateCityStateZip(BE.CityStateZip entity)
		{
			DA.CityStateZipGateway gateway = new DA.CityStateZipGateway();
			gateway.Update(entity.ToDataEntity());
		}

		public void DeleteCityStateZip(BE.CityStateZip entity)
		{
			DA.CityStateZipGateway gateway = new DA.CityStateZipGateway();
			gateway.Delete(entity.CityStateZipGuid);
		}

		#endregion

		#region Public Many-To-One Methods

		#endregion
		
		#region Public Many-To-Many Methods

		public List<BE.CityStateZip> GetCityStateZipsForFacility(Guid facilityGuid)
		{
			List<BE.CityStateZip> result = new List<BE.CityStateZip>();
			DA.CityStateZipGateway gateway = new DA.CityStateZipGateway();
			result = gateway.GetAllForFacility(facilityGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.CityStateZip> GetCityStateZipsNotForFacility(Guid facilityGuid)
		{
			List<BE.CityStateZip> result = new List<BE.CityStateZip>();
			DA.CityStateZipGateway gateway = new DA.CityStateZipGateway();
			result = gateway.GetAllNotForFacility(facilityGuid).ToBusinessEntitiesList();
			return result;
		}

		#endregion
	}
}