/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BELogic (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:04 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Collections.Generic;
using System.Linq;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using DA = ConcordMfg.PremierSeniorSolutions.WebService.DataAccess;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic
{
	public class ListingTypeLogic
	{
		#region Public CRUD Methods
		public List<BE.ListingType> GetAllListingType()
		{
			DA.ListingTypeGateway gateway = new DA.ListingTypeGateway();
			List<BE.ListingType> result = new List<BE.ListingType>();
			result = gateway.GetAll().ToBusinessEntitiesList();
			return result;
		}

		public List<BE.ListingType> GetAllListingTypeWithUndefined()
		{
			DA.ListingTypeGateway gateway = new DA.ListingTypeGateway();
			List<BE.ListingType> result = new List<BE.ListingType>();
			result = gateway.GetAllWithUndefined().ToBusinessEntitiesList();
			return result;
		}

		public BE.ListingType GetListingTypeByListingTypeGuid(Guid listingTypeGuid)
		{
			DA.ListingTypeGateway gateway = new DA.ListingTypeGateway();
			BE.ListingType result = new BE.ListingType();
			result = gateway.GetByPK(listingTypeGuid).ToBusinessEntity();
			return result;
		}

		//@@NEW
		public BE.ListingType GetListingTypeByListingTypeName(string listingTypeName)
		{
			DA.ListingTypeGateway gateway = new DA.ListingTypeGateway();
			DA.ListingType result = gateway.GetByListingTypeName(listingTypeName);
			if (null != result)
				return result.ToBusinessEntity();
			else
				return null;
		}

		public BE.ListingType InsertListingType(BE.ListingType entity)
		{
			//@@NEW
			// Check if a CityStateZip already exists with this ZipCode.
			BE.ListingType existingEntity = GetListingTypeByListingTypeName(entity.ListingTypeName);
			if (null != existingEntity)
				return existingEntity;

			//@@NEW - removed try/catch. insert returns DA entity (with new data). this method now returns an entity.
			DA.ListingTypeGateway gateway = new DA.ListingTypeGateway();
			DA.ListingType result = gateway.Insert(entity.ToDataEntity());
			return result.ToBusinessEntity();
		}

		public void UpdateListingType(BE.ListingType entity)
		{
			DA.ListingTypeGateway gateway = new DA.ListingTypeGateway();
			gateway.Update(entity.ToDataEntity());
		}

		public void DeleteListingType(BE.ListingType entity)
		{
			DA.ListingTypeGateway gateway = new DA.ListingTypeGateway();
			gateway.Delete(entity.ListingTypeGuid);
		}

		#endregion

		#region Public Many-To-One Methods

		#endregion
		
		#region Public Many-To-Many Methods

		#endregion
	}
}