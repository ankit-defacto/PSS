/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BELogic (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:04 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Collections.Generic;
using System.Linq;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using DA = ConcordMfg.PremierSeniorSolutions.WebService.DataAccess;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic
{
	public class FacilityLocationCriteriaLogic
	{
		#region Public CRUD Methods
		public List<BE.FacilityLocationCriteria> GetAllFacilityLocationCriteria()
		{
			DA.FacilityLocationCriteriaGateway gateway = new DA.FacilityLocationCriteriaGateway();
			List<BE.FacilityLocationCriteria> result = new List<BE.FacilityLocationCriteria>();
			result = gateway.GetAll().ToBusinessEntitiesList();
			return result;
		}

		public BE.FacilityLocationCriteria GetFacilityLocationCriteriaByFacilityGuidCityStateZipGuid(Guid facilityGuid, Guid cityStateZipGuid)
		{
			DA.FacilityLocationCriteriaGateway gateway = new DA.FacilityLocationCriteriaGateway();
			BE.FacilityLocationCriteria result = new BE.FacilityLocationCriteria();
			result = gateway.GetByPK(facilityGuid, cityStateZipGuid).ToBusinessEntity();
			return result;
		}

		public BE.FacilityLocationCriteria InsertFacilityLocationCriteria(BE.FacilityLocationCriteria entity)
		{
			//@@NEW - remove try/catch. insert returns DA entity (with new data). this method now returns an entity.
			DA.FacilityLocationCriteriaGateway gateway = new DA.FacilityLocationCriteriaGateway();
			DA.FacilityLocationCriteria result = gateway.Insert(entity.ToDataEntity());
			return result.ToBusinessEntity();
		}

		public void UpdateFacilityLocationCriteria(BE.FacilityLocationCriteria entity)
		{
			DA.FacilityLocationCriteriaGateway gateway = new DA.FacilityLocationCriteriaGateway();
			gateway.Update(entity.ToDataEntity());
		}

		public void DeleteFacilityLocationCriteria(BE.FacilityLocationCriteria entity)
		{
			DA.FacilityLocationCriteriaGateway gateway = new DA.FacilityLocationCriteriaGateway();
			gateway.Delete(entity.FacilityGuid, entity.CityStateZipGuid);
		}
		#endregion

		#region Public Many-To-One Methods

		#endregion
		
		#region Public Many-To-Many Methods

		#endregion
	}
}