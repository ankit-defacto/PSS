/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BELogic (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:04 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Collections.Generic;
using System.Linq;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using DA = ConcordMfg.PremierSeniorSolutions.WebService.DataAccess;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic
{
	public class ClickLogic
	{
		#region Public CRUD Methods
		public List<BE.Click> GetAllClick()
		{
			try
			{
				DA.ClickGateway gateway = new DA.ClickGateway();
				List<BE.Click> result = new List<BE.Click>();
				result = gateway.GetAll().ToBusinessEntitiesList();
				return result;
			}
			catch (Exception ex) { throw ex; }
		}

		public List<BE.Click> GetAllClickWithUndefined()
		{
			try
			{
				DA.ClickGateway gateway = new DA.ClickGateway();
				List<BE.Click> result = new List<BE.Click>();
				result = gateway.GetAllWithUndefined().ToBusinessEntitiesList();
				return result;
			}
			catch (Exception ex) { throw ex; }
		}

		public BE.Click GetClickByClickGuid(Guid clickGuid)
		{
			try
			{
				DA.ClickGateway gateway = new DA.ClickGateway();
				BE.Click result = new BE.Click();
				result = gateway.GetByPK(clickGuid).ToBusinessEntity();
				return result;
			}
			catch (Exception ex) { throw ex; }
		}

		public BE.Click InsertClick(BE.Click entity)
		{
			//@@NEW - removed try/catch. insert returns DA entity (with new data). this method now returns an entity.
			DA.ClickGateway gateway = new DA.ClickGateway();
			DA.Click result = gateway.Insert(entity.ToDataEntity());
			return result.ToBusinessEntity();
		}

		public void UpdateClick(BE.Click entity)
		{
			try
			{
				DA.ClickGateway gateway = new DA.ClickGateway();
				gateway.Update(entity.ToDataEntity());
			}
			catch (Exception ex) { throw ex; }
		}

		public void DeleteClick(BE.Click entity)
		{
			try
			{
				DA.ClickGateway gateway = new DA.ClickGateway();
				gateway.Delete(entity.ClickGuid);
			}
			catch (Exception ex) { throw ex; }
		}
		#endregion

		#region Public Many-To-One Methods

		public List<BE.Click> GetClicksForFacilityByFacilityGuid(Guid facilityGuid)
		{
			try
			{
				DA.ClickGateway gateway = new DA.ClickGateway();
				List<BE.Click> result = new List<BE.Click>();
				result = gateway.GetForFacilityByFacilityGuid(facilityGuid).ToBusinessEntitiesList();
				return result;
			}
			catch (Exception ex) { throw ex; }
		}

		public List<BE.Click> GetClicksForListingTypeByListingTypeGuid(Guid listingTypeGuid)
		{
			try
			{
				DA.ClickGateway gateway = new DA.ClickGateway();
				List<BE.Click> result = new List<BE.Click>();
				result = gateway.GetForListingTypeByListingTypeGuid(listingTypeGuid).ToBusinessEntitiesList();
				return result;
			}
			catch (Exception ex) { throw ex; }
		}

		#endregion
		
		#region Public Many-To-Many Methods

		#endregion
	}
}