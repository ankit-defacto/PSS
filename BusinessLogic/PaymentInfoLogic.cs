/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BELogic (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:04 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Collections.Generic;
using System.Linq;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using DA = ConcordMfg.PremierSeniorSolutions.WebService.DataAccess;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic
{
	public class PaymentInfoLogic
	{
		#region Public CRUD Methods
		public List<BE.PaymentInfo> GetAllPaymentInfo()
		{
			DA.PaymentInfoGateway gateway = new DA.PaymentInfoGateway();
			List<BE.PaymentInfo> result = new List<BE.PaymentInfo>();
			result = gateway.GetAll().ToBusinessEntitiesList();
			return result;
		}

		public List<BE.PaymentInfo> GetAllPaymentInfoWithUndefined()
		{
			DA.PaymentInfoGateway gateway = new DA.PaymentInfoGateway();
			List<BE.PaymentInfo> result = new List<BE.PaymentInfo>();
			result = gateway.GetAllWithUndefined().ToBusinessEntitiesList();
			return result;
		}

		public BE.PaymentInfo GetPaymentInfoByPaymentInfoGuid(Guid paymentInfoGuid)
		{
			DA.PaymentInfoGateway gateway = new DA.PaymentInfoGateway();
			BE.PaymentInfo result = new BE.PaymentInfo();
            try
            {
                result = gateway.GetByPK(paymentInfoGuid).ToBusinessEntity();
            }
            catch (DataAccess.DataAccessException)
            {
                return null;
            }
			
			return result;
		}

		public BE.PaymentInfo InsertPaymentInfo(BE.PaymentInfo entity)
		{
			//@@NEW - removed try/catch. insert returns DA entity (with new data). this method now returns an entity.
			DA.PaymentInfoGateway gateway = new DA.PaymentInfoGateway();
			DA.PaymentInfo result = gateway.Insert(entity.ToDataEntity());

			// Create the audit record.
			PaymentInfoAuditLogic auditLogic = new PaymentInfoAuditLogic();
			auditLogic.InsertPaymentInfoAudit(result.ToBusinessEntity());

			return result.ToBusinessEntity();
		}

		public void UpdatePaymentInfo(BE.PaymentInfo entity)
		{
			//@@NEW
			// Update the main record.
			DA.PaymentInfoGateway gateway = new DA.PaymentInfoGateway();
			gateway.Update(entity.ToDataEntity());

			// Create the audit record.
			PaymentInfoAuditLogic auditLogic = new PaymentInfoAuditLogic();
			auditLogic.InsertPaymentInfoAudit(entity);
		}

		public void DeletePaymentInfo(BE.PaymentInfo entity)
		{
			//@@NEW
			// Delete the main record.
			DA.PaymentInfoGateway gateway = new DA.PaymentInfoGateway();
			gateway.Delete(entity.PaymentInfoGuid);

			// Create the audit record.
			PaymentInfoAuditLogic auditLogic = new PaymentInfoAuditLogic();
			auditLogic.InsertPaymentInfoAudit(entity);
		}
		#endregion

		#region Public Many-To-One Methods

		#endregion
		
		#region Public Many-To-Many Methods

		#endregion
	}
}