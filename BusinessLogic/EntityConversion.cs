/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: EntityConversion (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:05 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using DA = ConcordMfg.PremierSeniorSolutions.WebService.DataAccess;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;

namespace ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions
{
	public static class EntityConversion
	{
		#region CityStateZip DataAccess Entities to BusinessEntities
		public static BE.CityStateZip ToBusinessEntity(this DA.CityStateZip daCityStateZip)
		{
			BE.CityStateZip cityStateZipResult = new BE.CityStateZip()
			{
				CityStateZipGuid = daCityStateZip.CityStateZipGuid,
				City = daCityStateZip.City,
				State = daCityStateZip.State,
				ZipCode = daCityStateZip.ZipCode,
			};

			return cityStateZipResult;
		}

		public static List<BE.CityStateZip> ToBusinessEntitiesList(this IEnumerable<DA.CityStateZip> daCityStateZipList)
		{
			List<BE.CityStateZip> businessEntityList =
				new List<BE.CityStateZip>();
			foreach (DA.CityStateZip daCityStateZip in daCityStateZipList)
			{
				businessEntityList.Add(daCityStateZip.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region CityStateZip BusinessEntities to DataAccess Entities
		public static DA.CityStateZip ToDataEntity(this BE.CityStateZip beCityStateZip)
		{
			DA.CityStateZip cityStateZipResult = new DA.CityStateZip()
			{
				CityStateZipGuid = beCityStateZip.CityStateZipGuid,
				City = beCityStateZip.City,
				State = beCityStateZip.State,
				ZipCode = beCityStateZip.ZipCode,
			};

			return cityStateZipResult;
		}

		public static List<DA.CityStateZip> ToDataEntitiesList(this IEnumerable<BE.CityStateZip> beCityStateZipList)
		{
			List<DA.CityStateZip> dataEntityList =
				new List<DA.CityStateZip>();
			foreach (BE.CityStateZip daCityStateZip in beCityStateZipList)
			{
				dataEntityList.Add(daCityStateZip.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion

		#region Click DataAccess Entities to BusinessEntities
		public static BE.Click ToBusinessEntity(this DA.Click daClick)
		{
			BE.Click clickResult = new BE.Click()
			{
				ClickGuid = daClick.ClickGuid,
				FacilityGuid = daClick.FacilityGuid,
				ListingTypeGuid = daClick.ListingTypeGuid,
				TimeStamp = daClick.TimeStamp,
			};

			return clickResult;
		}

		public static List<BE.Click> ToBusinessEntitiesList(this IEnumerable<DA.Click> daClickList)
		{
			List<BE.Click> businessEntityList =
				new List<BE.Click>();
			foreach (DA.Click daClick in daClickList)
			{
				businessEntityList.Add(daClick.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region Click BusinessEntities to DataAccess Entities
		public static DA.Click ToDataEntity(this BE.Click beClick)
		{
			DA.Click clickResult = new DA.Click()
			{
				ClickGuid = beClick.ClickGuid,
				FacilityGuid = beClick.FacilityGuid,
				ListingTypeGuid = beClick.ListingTypeGuid,
				TimeStamp = beClick.TimeStamp,
			};

			return clickResult;
		}

		public static List<DA.Click> ToDataEntitiesList(this IEnumerable<BE.Click> beClickList)
		{
			List<DA.Click> dataEntityList =
				new List<DA.Click>();
			foreach (BE.Click daClick in beClickList)
			{
				dataEntityList.Add(daClick.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion

		#region Client DataAccess Entities to BusinessEntities
		public static BE.Client ToBusinessEntity(this DA.Client daClient)
		{
			BE.Client clientResult = new BE.Client()
			{
				ClientGuid = daClient.ClientGuid,
				ClientID = daClient.ClientID,
				ClientName = daClient.ClientName,
				PhoneNumber = daClient.PhoneNumber,
				Email = daClient.Email,
				Address = daClient.Address,
				CityStateZipGuid = daClient.CityStateZipGuid,
				PaymentInfoGuid = daClient.PaymentInfoGuid,
				FederatedID = daClient.FederatedID,
				FederatedKey = daClient.FederatedKey,
				FederatedIDProvider = daClient.FederatedIDProvider,
				Username = daClient.Username,
				HashedPassword = daClient.HashedPassword,
                AccountPaused = daClient.AccountPaused,
                IsWaiverd = daClient.IsWaiverd,
                FreeDays = daClient.FreeDays,
                Credits = daClient.Credits,
                IsSuspended = daClient.IsSuspended,
                IsFlagged=daClient.IsFlagged,
                IsActive = daClient.IsActive
                
			};

			return clientResult;
		}

		public static List<BE.Client> ToBusinessEntitiesList(this IEnumerable<DA.Client> daClientList)
		{
			List<BE.Client> businessEntityList =
				new List<BE.Client>();
			foreach (DA.Client daClient in daClientList)
			{
				businessEntityList.Add(daClient.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region Client BusinessEntities to DataAccess Entities
		public static DA.Client ToDataEntity(this BE.Client beClient)
		{
			DA.Client clientResult = new DA.Client()
			{
				ClientGuid = beClient.ClientGuid,
				ClientID = beClient.ClientID,
				ClientName = beClient.ClientName,
				PhoneNumber = beClient.PhoneNumber,
				Email = beClient.Email,
				Address = beClient.Address,
				CityStateZipGuid = beClient.CityStateZipGuid,
				PaymentInfoGuid = beClient.PaymentInfoGuid,
				FederatedID = beClient.FederatedID,
				FederatedKey = beClient.FederatedKey,
				FederatedIDProvider = beClient.FederatedIDProvider,
				Username = beClient.Username,
				HashedPassword = beClient.HashedPassword,
                AccountPaused = beClient.AccountPaused,
                IsWaiverd = beClient.IsWaiverd,
                FreeDays = beClient.FreeDays,
                Credits = beClient.Credits,
                IsSuspended = beClient.IsSuspended,
                IsFlagged=beClient.IsFlagged,
                IsActive = beClient.IsActive
			};

			return clientResult;
		}

		public static List<DA.Client> ToDataEntitiesList(this IEnumerable<BE.Client> beClientList)
		{
			List<DA.Client> dataEntityList =
				new List<DA.Client>();
			foreach (BE.Client daClient in beClientList)
			{
				dataEntityList.Add(daClient.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion

		#region ClientAudit DataAccess Entities to BusinessEntities
		public static BE.ClientAudit ToBusinessEntity(this DA.ClientAudit daClientAudit)
		{
			BE.ClientAudit clientAuditResult = new BE.ClientAudit()
			{
				ClientAuditGuid = daClientAudit.ClientAuditGuid,
				ClientGuid = daClientAudit.ClientGuid,
				ClientID = daClientAudit.ClientID,
				ClientName = daClientAudit.ClientName,
				PhoneNumber = daClientAudit.PhoneNumber,
				Email = daClientAudit.Email,
				Address = daClientAudit.Address,
				CityStateZipGuid = daClientAudit.CityStateZipGuid,
				PaymentInfoGuid = daClientAudit.PaymentInfoGuid,
				FederatedID = daClientAudit.FederatedID,
				FederatedKey = daClientAudit.FederatedKey,
				FederatedIDProvider = daClientAudit.FederatedIDProvider,
				Username = daClientAudit.Username,
				HashedPassword = daClientAudit.HashedPassword,
				DateModified = daClientAudit.DateModified,
                AccountPaused = daClientAudit.AccountPaused,
                IsWaiverd=daClientAudit.IsWaiverd,
                FreeDays=daClientAudit.FreeDays,
                Credits=daClientAudit.Credits,
                IsSuspended=daClientAudit.IsSuspended,
                IsFlagged=daClientAudit.IsFlagged,
                IsActive=daClientAudit.IsActive
			};

			return clientAuditResult;
		}

		public static List<BE.ClientAudit> ToBusinessEntitiesList(this IEnumerable<DA.ClientAudit> daClientAuditList)
		{
			List<BE.ClientAudit> businessEntityList =
				new List<BE.ClientAudit>();
			foreach (DA.ClientAudit daClientAudit in daClientAuditList)
			{
				businessEntityList.Add(daClientAudit.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region ClientAudit BusinessEntities to DataAccess Entities
		public static DA.ClientAudit ToDataEntity(this BE.ClientAudit beClientAudit)
		{
			DA.ClientAudit clientAuditResult = new DA.ClientAudit()
			{
				ClientAuditGuid = beClientAudit.ClientAuditGuid,
				ClientGuid = beClientAudit.ClientGuid,
				ClientID = beClientAudit.ClientID,
				ClientName = beClientAudit.ClientName,
				PhoneNumber = beClientAudit.PhoneNumber,
				Email = beClientAudit.Email,
				Address = beClientAudit.Address,
				CityStateZipGuid = beClientAudit.CityStateZipGuid,
				PaymentInfoGuid = beClientAudit.PaymentInfoGuid,
				FederatedID = beClientAudit.FederatedID,
				FederatedKey = beClientAudit.FederatedKey,
				FederatedIDProvider = beClientAudit.FederatedIDProvider,
				Username = beClientAudit.Username,
				HashedPassword = beClientAudit.HashedPassword,
				DateModified = beClientAudit.DateModified,
                AccountPaused = beClientAudit.AccountPaused,
                IsWaiverd=beClientAudit.IsWaiverd,
                FreeDays=beClientAudit.FreeDays,
                Credits=beClientAudit.Credits,
                IsSuspended=beClientAudit.IsSuspended,
                IsFlagged=beClientAudit.IsFlagged,
                IsActive=beClientAudit.IsActive
			};

			return clientAuditResult;
		}

		public static List<DA.ClientAudit> ToDataEntitiesList(this IEnumerable<BE.ClientAudit> beClientAuditList)
		{
			List<DA.ClientAudit> dataEntityList =
				new List<DA.ClientAudit>();
			foreach (BE.ClientAudit daClientAudit in beClientAuditList)
			{
				dataEntityList.Add(daClientAudit.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion

		#region Facility DataAccess Entities to BusinessEntities
		        
        public static BE.Facility ToBusinessEntity(this DA.Facility daFacility)
		{
			BE.Facility facilityResult = new BE.Facility()
			{
				FacilityGuid = daFacility.FacilityGuid,
				FacilityID = daFacility.FacilityID,
				FacilityName = daFacility.FacilityName,
				Exerpt = daFacility.Exerpt,
				Description = daFacility.Description,
				Address = daFacility.Address,
				CityStateZipGuid = daFacility.CityStateZipGuid,
				PhoneNumber = daFacility.PhoneNumber,
				Email = daFacility.Email,
				Website = daFacility.Website,
				ClientGuid = daFacility.ClientGuid,
				ListingTypeGuid = daFacility.ListingTypeGuid,
				PublicPhotoFileUri = daFacility.PublicPhotoFileUri,
                Latitude = daFacility.Latitude,
                Longitude = daFacility.Longitude,
                Price=daFacility.Price
			};

			return facilityResult;
		}

		public static List<BE.Facility> ToBusinessEntitiesList(this IEnumerable<DA.Facility> daFacilityList)
		{
			List<BE.Facility> businessEntityList =
				new List<BE.Facility>();
			foreach (DA.Facility daFacility in daFacilityList)
			{
				businessEntityList.Add(daFacility.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region Facility BusinessEntities to DataAccess Entities
		public static DA.Facility ToDataEntity(this BE.Facility beFacility)
		{
			DA.Facility facilityResult = new DA.Facility()
			{
				FacilityGuid = beFacility.FacilityGuid,
				FacilityID = beFacility.FacilityID,
				FacilityName = beFacility.FacilityName,
				Exerpt = beFacility.Exerpt,
				Description = beFacility.Description,
				Address = beFacility.Address,
				CityStateZipGuid = beFacility.CityStateZipGuid,
				PhoneNumber = beFacility.PhoneNumber,
				Email = beFacility.Email,
				Website = beFacility.Website,
				ClientGuid = beFacility.ClientGuid,
				ListingTypeGuid = beFacility.ListingTypeGuid,
				PublicPhotoFileUri = beFacility.PublicPhotoFileUri,
                Latitude = beFacility.Latitude,
                Longitude = beFacility.Longitude,
                Price=beFacility.Price
			};

			return facilityResult;
		}

		public static List<DA.Facility> ToDataEntitiesList(this IEnumerable<BE.Facility> beFacilityList)
		{
			List<DA.Facility> dataEntityList =
				new List<DA.Facility>();
			foreach (BE.Facility daFacility in beFacilityList)
			{
				dataEntityList.Add(daFacility.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion

		#region FacilityAudit DataAccess Entities to BusinessEntities
		public static BE.FacilityAudit ToBusinessEntity(this DA.FacilityAudit daFacilityAudit)
		{
			BE.FacilityAudit facilityAuditResult = new BE.FacilityAudit()
			{
				FacilityAuditGuid = daFacilityAudit.FacilityAuditGuid,
				FacilityGuid = daFacilityAudit.FacilityGuid,
				FacilityID = daFacilityAudit.FacilityID,
				FacilityName = daFacilityAudit.FacilityName,
				Exerpt = daFacilityAudit.Exerpt,
				Description = daFacilityAudit.Description,
				Address = daFacilityAudit.Address,
				CityStateZipGuid = daFacilityAudit.CityStateZipGuid,
				PhoneNumber = daFacilityAudit.PhoneNumber,
				Email = daFacilityAudit.Email,
				Website = daFacilityAudit.Website,
				ClientGuid = daFacilityAudit.ClientGuid,
				ListingTypeGuid = daFacilityAudit.ListingTypeGuid,
				PublicPhotoFileUri = daFacilityAudit.PublicPhotoFileUri,
				DateModified = daFacilityAudit.DateModified,
                Latitude = daFacilityAudit.Latitude,
                Longitude = daFacilityAudit.Longitude,
                Price=daFacilityAudit.Price
			};

			return facilityAuditResult;
		}

		public static List<BE.FacilityAudit> ToBusinessEntitiesList(this IEnumerable<DA.FacilityAudit> daFacilityAuditList)
		{
			List<BE.FacilityAudit> businessEntityList = new List<BE.FacilityAudit>();
			//@@NEW - new line added.

			foreach (DA.FacilityAudit daFacilityAudit in daFacilityAuditList)
			{
				businessEntityList.Add(daFacilityAudit.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region FacilityAudit BusinessEntities to DataAccess Entities
		public static DA.FacilityAudit ToDataEntity(this BE.FacilityAudit beFacilityAudit)
		{
			DA.FacilityAudit facilityAuditResult = new DA.FacilityAudit()
			{
				FacilityAuditGuid = beFacilityAudit.FacilityAuditGuid,
				FacilityGuid = beFacilityAudit.FacilityGuid,
				FacilityID = beFacilityAudit.FacilityID,
				FacilityName = beFacilityAudit.FacilityName,
				Exerpt = beFacilityAudit.Exerpt,
				Description = beFacilityAudit.Description,
				Address = beFacilityAudit.Address,
				CityStateZipGuid = beFacilityAudit.CityStateZipGuid,
				PhoneNumber = beFacilityAudit.PhoneNumber,
				Email = beFacilityAudit.Email,
				Website = beFacilityAudit.Website,
				ClientGuid = beFacilityAudit.ClientGuid,
				ListingTypeGuid = beFacilityAudit.ListingTypeGuid,
				PublicPhotoFileUri = beFacilityAudit.PublicPhotoFileUri,
				DateModified = beFacilityAudit.DateModified,
                Latitude = beFacilityAudit.Latitude,
                Longitude = beFacilityAudit.Longitude,
                Price=beFacilityAudit.Price
			};

			return facilityAuditResult;
		}

		public static List<DA.FacilityAudit> ToDataEntitiesList(this IEnumerable<BE.FacilityAudit> beFacilityAuditList)
		{
			List<DA.FacilityAudit> dataEntityList =
				new List<DA.FacilityAudit>();
			foreach (BE.FacilityAudit daFacilityAudit in beFacilityAuditList)
			{
				dataEntityList.Add(daFacilityAudit.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion

		#region FacilityLocationCriteria DataAccess Entities to BusinessEntities
		public static BE.FacilityLocationCriteria ToBusinessEntity(this DA.FacilityLocationCriteria daFacilityLocationCriteria)
		{
			BE.FacilityLocationCriteria facilityLocationCriteriaResult = new BE.FacilityLocationCriteria()
			{
				FacilityGuid = daFacilityLocationCriteria.FacilityGuid,
				CityStateZipGuid = daFacilityLocationCriteria.CityStateZipGuid,
			};

			return facilityLocationCriteriaResult;
		}

		public static List<BE.FacilityLocationCriteria> ToBusinessEntitiesList(this IEnumerable<DA.FacilityLocationCriteria> daFacilityLocationCriteriaList)
		{
			List<BE.FacilityLocationCriteria> businessEntityList =
				new List<BE.FacilityLocationCriteria>();
			foreach (DA.FacilityLocationCriteria daFacilityLocationCriteria in daFacilityLocationCriteriaList)
			{
				businessEntityList.Add(daFacilityLocationCriteria.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region FacilityLocationCriteria BusinessEntities to DataAccess Entities
		public static DA.FacilityLocationCriteria ToDataEntity(this BE.FacilityLocationCriteria beFacilityLocationCriteria)
		{
			DA.FacilityLocationCriteria facilityLocationCriteriaResult = new DA.FacilityLocationCriteria()
			{
				FacilityGuid = beFacilityLocationCriteria.FacilityGuid,
				CityStateZipGuid = beFacilityLocationCriteria.CityStateZipGuid,
			};

			return facilityLocationCriteriaResult;
		}

		public static List<DA.FacilityLocationCriteria> ToDataEntitiesList(this IEnumerable<BE.FacilityLocationCriteria> beFacilityLocationCriteriaList)
		{
			List<DA.FacilityLocationCriteria> dataEntityList =
				new List<DA.FacilityLocationCriteria>();
			foreach (BE.FacilityLocationCriteria daFacilityLocationCriteria in beFacilityLocationCriteriaList)
			{
				dataEntityList.Add(daFacilityLocationCriteria.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion

		#region FacilityOffering DataAccess Entities to BusinessEntities
		public static BE.FacilityOffering ToBusinessEntity(this DA.FacilityOffering daFacilityOffering)
		{
			BE.FacilityOffering facilityOfferingResult = new BE.FacilityOffering()
			{
				FacilityGuid = daFacilityOffering.FacilityGuid,
				OfferingGuid = daFacilityOffering.OfferingGuid,
				IsChecked = daFacilityOffering.IsChecked,
			};

			return facilityOfferingResult;
		}

		public static List<BE.FacilityOffering> ToBusinessEntitiesList(this IEnumerable<DA.FacilityOffering> daFacilityOfferingList)
		{
			List<BE.FacilityOffering> businessEntityList =
				new List<BE.FacilityOffering>();
			foreach (DA.FacilityOffering daFacilityOffering in daFacilityOfferingList)
			{
				businessEntityList.Add(daFacilityOffering.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region FacilityOffering BusinessEntities to DataAccess Entities
		public static DA.FacilityOffering ToDataEntity(this BE.FacilityOffering beFacilityOffering)
		{
			DA.FacilityOffering facilityOfferingResult = new DA.FacilityOffering()
			{
				FacilityGuid = beFacilityOffering.FacilityGuid,
				OfferingGuid = beFacilityOffering.OfferingGuid,
				IsChecked = beFacilityOffering.IsChecked,
			};

			return facilityOfferingResult;
		}

		public static List<DA.FacilityOffering> ToDataEntitiesList(this IEnumerable<BE.FacilityOffering> beFacilityOfferingList)
		{
			List<DA.FacilityOffering> dataEntityList =
				new List<DA.FacilityOffering>();
			foreach (BE.FacilityOffering daFacilityOffering in beFacilityOfferingList)
			{
				dataEntityList.Add(daFacilityOffering.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion

		#region ListingType DataAccess Entities to BusinessEntities
		public static BE.ListingType ToBusinessEntity(this DA.ListingType daListingType)
		{
			BE.ListingType listingTypeResult = new BE.ListingType()
			{
				ListingTypeGuid = daListingType.ListingTypeGuid,
				ListingTypeName = daListingType.ListingTypeName,
                ListingTypePrice=daListingType.ListingTypePrice
			};

			return listingTypeResult;
		}

		public static List<BE.ListingType> ToBusinessEntitiesList(this IEnumerable<DA.ListingType> daListingTypeList)
		{
			List<BE.ListingType> businessEntityList =
				new List<BE.ListingType>();
			foreach (DA.ListingType daListingType in daListingTypeList)
			{
				businessEntityList.Add(daListingType.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region ListingType BusinessEntities to DataAccess Entities
		public static DA.ListingType ToDataEntity(this BE.ListingType beListingType)
		{
			DA.ListingType listingTypeResult = new DA.ListingType()
			{
				ListingTypeGuid = beListingType.ListingTypeGuid,
				ListingTypeName = beListingType.ListingTypeName,
                ListingTypePrice=beListingType.ListingTypePrice
			};

			return listingTypeResult;
		}

		public static List<DA.ListingType> ToDataEntitiesList(this IEnumerable<BE.ListingType> beListingTypeList)
		{
			List<DA.ListingType> dataEntityList =
				new List<DA.ListingType>();
			foreach (BE.ListingType daListingType in beListingTypeList)
			{
				dataEntityList.Add(daListingType.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion


        #region ClentCardInfo BusinessEntities to DataAccess Entities
        public static DA.ClientCardInfo ToDataEntity(this BE.ClientCardInfo beClientCardInfo)
        {
            DA.ClientCardInfo clientCardInfoResult = new DA.ClientCardInfo()
            {
                ClientCardGuid = beClientCardInfo.ClientCardGuid,
                ClientGuid = beClientCardInfo.ClientGuid,
                Cardtype = beClientCardInfo.CardType,
                CardNumber = beClientCardInfo.CardNumber,
                CardHolderNameOnCard = beClientCardInfo.CardHolderNameOnCard,
                CvvNumber = beClientCardInfo.CvvNumber,
                ExpMonth = beClientCardInfo.ExpMonth,
                ExpYear=beClientCardInfo.ExpYear
                   
            };

            return clientCardInfoResult;
        }
        public static List<DA.ClientCardInfo> ToDataEntitiesList(this IEnumerable<BE.ClientCardInfo> beClientCardInfoList)
        {
            List<DA.ClientCardInfo> dataEntityList =
                new List<DA.ClientCardInfo>();
            foreach (BE.ClientCardInfo daClientCardInfo in beClientCardInfoList)
            {
                dataEntityList.Add(daClientCardInfo.ToDataEntity());
            }

            return dataEntityList;
        }

        #endregion

        #region ClientCardInfo DataAccess Entities to BusinessEntities
        public static BE.ClientCardInfo ToBusinessEntity(this DA.ClientCardInfo daClientCardInfo)
        {
            BE.ClientCardInfo clientCardInfoResult = new BE.ClientCardInfo()
            {
                ClientCardGuid = daClientCardInfo.ClientCardGuid,
                ClientGuid = daClientCardInfo.ClientGuid,
                CardType = daClientCardInfo.Cardtype,
                CardNumber=daClientCardInfo.CardNumber,
                CvvNumber=daClientCardInfo.CvvNumber,
                CardHolderNameOnCard=daClientCardInfo.CardHolderNameOnCard,
                ExpMonth = daClientCardInfo.ExpMonth,
                ExpYear=daClientCardInfo.ExpYear
                
            };

            return clientCardInfoResult;
        }

        public static List<BE.ClientCardInfo> ToBusinessEntitiesList(this IEnumerable<DA.ClientCardInfo> daClientCardInfoList)
        {
            List<BE.ClientCardInfo> businessEntityList =
                new List<BE.ClientCardInfo>();
            foreach (DA.ClientCardInfo daClientCardInfo in daClientCardInfoList)
            {
                businessEntityList.Add(daClientCardInfo.ToBusinessEntity());
            }

            return businessEntityList;
        }
        #endregion


        #region Offering DataAccess Entities to BusinessEntities
        public static BE.Offering ToBusinessEntity(this DA.Offering daOffering)
		{
			BE.Offering offeringResult = new BE.Offering()
			{
				OfferingGuid = daOffering.OfferingGuid,
				OfferingID = daOffering.OfferingID,
				OfferingName = daOffering.OfferingName,
			};

			return offeringResult;
		}

		public static List<BE.Offering> ToBusinessEntitiesList(this IEnumerable<DA.Offering> daOfferingList)
		{
			List<BE.Offering> businessEntityList =
				new List<BE.Offering>();
			foreach (DA.Offering daOffering in daOfferingList)
			{
				businessEntityList.Add(daOffering.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region Offering BusinessEntities to DataAccess Entities
		public static DA.Offering ToDataEntity(this BE.Offering beOffering)
		{
			DA.Offering offeringResult = new DA.Offering()
			{
				OfferingGuid = beOffering.OfferingGuid,
				OfferingID = beOffering.OfferingID,
				OfferingName = beOffering.OfferingName,
			};

			return offeringResult;
		}

		public static List<DA.Offering> ToDataEntitiesList(this IEnumerable<BE.Offering> beOfferingList)
		{
			List<DA.Offering> dataEntityList =
				new List<DA.Offering>();
			foreach (BE.Offering daOffering in beOfferingList)
			{
				dataEntityList.Add(daOffering.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion

		#region PaymentInfo DataAccess Entities to BusinessEntities
		public static BE.PaymentInfo ToBusinessEntity(this DA.PaymentInfo daPaymentInfo)
		{
			BE.PaymentInfo paymentInfoResult = new BE.PaymentInfo()
			{
				PaymentInfoGuid = daPaymentInfo.PaymentInfoGuid,
				PaymentInfoID = daPaymentInfo.PaymentInfoID,
				AmazonToken = daPaymentInfo.AmazonToken,
			};

			return paymentInfoResult;
		}

		public static List<BE.PaymentInfo> ToBusinessEntitiesList(this IEnumerable<DA.PaymentInfo> daPaymentInfoList)
		{
			List<BE.PaymentInfo> businessEntityList =
				new List<BE.PaymentInfo>();
			foreach (DA.PaymentInfo daPaymentInfo in daPaymentInfoList)
			{
				businessEntityList.Add(daPaymentInfo.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region PaymentInfo BusinessEntities to DataAccess Entities
		public static DA.PaymentInfo ToDataEntity(this BE.PaymentInfo bePaymentInfo)
		{
			DA.PaymentInfo paymentInfoResult = new DA.PaymentInfo()
			{
				PaymentInfoGuid = bePaymentInfo.PaymentInfoGuid,
				PaymentInfoID = bePaymentInfo.PaymentInfoID,
				AmazonToken = bePaymentInfo.AmazonToken,
			};

			return paymentInfoResult;
		}

		public static List<DA.PaymentInfo> ToDataEntitiesList(this IEnumerable<BE.PaymentInfo> bePaymentInfoList)
		{
			List<DA.PaymentInfo> dataEntityList =
				new List<DA.PaymentInfo>();
			foreach (BE.PaymentInfo daPaymentInfo in bePaymentInfoList)
			{
				dataEntityList.Add(daPaymentInfo.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion

		#region PaymentInfoAudit DataAccess Entities to BusinessEntities
		public static BE.PaymentInfoAudit ToBusinessEntity(this DA.PaymentInfoAudit daPaymentInfoAudit)
		{
			BE.PaymentInfoAudit paymentInfoAuditResult = new BE.PaymentInfoAudit()
			{
				PaymentInfoAuditGuid = daPaymentInfoAudit.PaymentInfoAuditGuid,
				PaymentInfoGuid = daPaymentInfoAudit.PaymentInfoGuid,
				PaymentInfoID = daPaymentInfoAudit.PaymentInfoID,
				AmazonToken = daPaymentInfoAudit.AmazonToken,
				DateModified = daPaymentInfoAudit.DateModified,
			};

			return paymentInfoAuditResult;
		}

		public static List<BE.PaymentInfoAudit> ToBusinessEntitiesList(this IEnumerable<DA.PaymentInfoAudit> daPaymentInfoAuditList)
		{
			List<BE.PaymentInfoAudit> businessEntityList =
				new List<BE.PaymentInfoAudit>();
			foreach (DA.PaymentInfoAudit daPaymentInfoAudit in daPaymentInfoAuditList)
			{
				businessEntityList.Add(daPaymentInfoAudit.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region PaymentInfoAudit BusinessEntities to DataAccess Entities
		public static DA.PaymentInfoAudit ToDataEntity(this BE.PaymentInfoAudit bePaymentInfoAudit)
		{
			DA.PaymentInfoAudit paymentInfoAuditResult = new DA.PaymentInfoAudit()
			{
				PaymentInfoAuditGuid = bePaymentInfoAudit.PaymentInfoAuditGuid,
				PaymentInfoGuid = bePaymentInfoAudit.PaymentInfoGuid,
				PaymentInfoID = bePaymentInfoAudit.PaymentInfoID,
				AmazonToken = bePaymentInfoAudit.AmazonToken,
				DateModified = bePaymentInfoAudit.DateModified,
			};

			return paymentInfoAuditResult;
		}

		public static List<DA.PaymentInfoAudit> ToDataEntitiesList(this IEnumerable<BE.PaymentInfoAudit> bePaymentInfoAuditList)
		{
			List<DA.PaymentInfoAudit> dataEntityList =
				new List<DA.PaymentInfoAudit>();
			foreach (BE.PaymentInfoAudit daPaymentInfoAudit in bePaymentInfoAuditList)
			{
				dataEntityList.Add(daPaymentInfoAudit.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion

		#region FacilityPhoto DataAccess Entities to BusinessEntities
		public static BE.FacilityPhoto ToBusinessEntity(this DA.FacilityPhoto daFacilityPhoto)
		{
			BE.FacilityPhoto facilityPhotoResult = new BE.FacilityPhoto()
			{
				FacilityPhotoGuid = daFacilityPhoto.FacilityPhotoGuid,
				PhotoUri = daFacilityPhoto.PhotoUri,
				FacilityGuid = daFacilityPhoto.FacilityGuid,
			};

			return facilityPhotoResult;
		}

		public static List<BE.FacilityPhoto> ToBusinessEntitiesList(this IEnumerable<DA.FacilityPhoto> daFacilityPhotoList)
		{
			List<BE.FacilityPhoto> businessEntityList =
				new List<BE.FacilityPhoto>();
			foreach (DA.FacilityPhoto daFacilityPhoto in daFacilityPhotoList)
			{
				businessEntityList.Add(daFacilityPhoto.ToBusinessEntity());
			}

			return businessEntityList;
		}
		#endregion

		#region FacilityPhoto BusinessEntities to DataAccess Entities
		public static DA.FacilityPhoto ToDataEntity(this BE.FacilityPhoto beFacilityPhoto)
		{
			DA.FacilityPhoto facilityPhotoResult = new DA.FacilityPhoto()
			{
				FacilityPhotoGuid = beFacilityPhoto.FacilityPhotoGuid,
				PhotoUri = beFacilityPhoto.PhotoUri,
				FacilityGuid = beFacilityPhoto.FacilityGuid,
			};

			return facilityPhotoResult;
		}

		public static List<DA.FacilityPhoto> ToDataEntitiesList(this IEnumerable<BE.FacilityPhoto> beFacilityPhotoList)
		{
			List<DA.FacilityPhoto> dataEntityList =
				new List<DA.FacilityPhoto>();
			foreach (BE.FacilityPhoto daFacilityPhoto in beFacilityPhotoList)
			{
				dataEntityList.Add(daFacilityPhoto.ToDataEntity());
			}

			return dataEntityList;
		}
		#endregion


		#region ConvertFromNullable
		public static DateTime ConvertFromNullable(this Nullable<DateTime> toConvert)
		{
			return toConvert.HasValue ? toConvert.Value : default(DateTime);
		}

		public static int ConvertFromNullable(this Nullable<int> toConvert)
		{
			return toConvert.HasValue ? toConvert.Value : default(int);
		}

		public static bool ConvertFromNullable(this Nullable<bool> toConvert)
		{
			return toConvert.HasValue ? toConvert.Value : default(bool);
		}

		public static short ConvertFromNullable(this Nullable<short> toConvert)
		{
			return toConvert.HasValue ? toConvert.Value : default(short);
		}

		public static double ConvertFromNullable(this Nullable<double> toConvert)
		{
			return toConvert.HasValue ? toConvert.Value : default(double);
		}

		public static decimal ConvertFromNullable(this Nullable<decimal> toConvert)
		{
			return toConvert.HasValue ? toConvert.Value : default(decimal);
		}
		#endregion


		public static BE.AccountViewModel BuildAccountViewModel(
			DA.Client client, DA.CityStateZip cityStateZip, DA.PaymentInfo paymentInfo)
		{
			BE.AccountViewModel account = new BE.AccountViewModel()
			{
				ClientGuid = client.ClientGuid,
				ClientID = client.ClientID,
				ClientName = client.ClientName,
				PhoneNumber = client.PhoneNumber,
				Email = client.Email,
				Address = client.Address,
				FederatedID = client.FederatedID,
				FederatedKey = client.FederatedKey,
				FederatedIDProvider = client.FederatedIDProvider,
				CityStateZipGuid = cityStateZip.CityStateZipGuid,
				City = cityStateZip.City,
				State = cityStateZip.State,
				ZipCode = cityStateZip.ZipCode,
				PaymentInfoGuid = paymentInfo.PaymentInfoGuid,
				PaymentInfoID = paymentInfo.PaymentInfoID,
				AmazonToken = paymentInfo.AmazonToken,
                PauseAccount = client.AccountPaused,
                IsWaiverd=client.IsWaiverd,
                FreeDays=client.FreeDays,
                AccountBalance=client.Credits,
                IsSuspended=client.IsSuspended,
                IsFlagged=client.IsFlagged,
                IsActive=client.IsActive
                
			};
			return account;
		}


		public static BE.ListingViewModel BuildListingViewModel(
			DA.Facility facility, DA.CityStateZip cityStateZip, DA.ListingType listingType)
		{
			BE.ListingViewModel listing = new BE.ListingViewModel()
			{
				FacilityGuid = facility.FacilityGuid,
				FacilityID = facility.FacilityID,
				FacilityName = facility.FacilityName,
				PhoneNumber = facility.PhoneNumber,
				Email = facility.Email,
				Address = facility.Address,
				ClientGuid = facility.ClientGuid,
				Description = facility.Description,
				Exerpt = facility.Exerpt,
				Website = facility.Website,
				CityStateZipGuid = cityStateZip.CityStateZipGuid,
				City = cityStateZip.City.Trim(),
				State = cityStateZip.State.Trim(),
				ZipCode = cityStateZip.ZipCode.Trim(),
				PublicPhotoFileUri = facility.PublicPhotoFileUri,
				ListingTypeGuid = listingType.ListingTypeGuid,
				ListingTypeName = listingType.ListingTypeName,
                Latitude = facility.Latitude,
                Longitude = facility.Longitude,
                Price=facility.Price
                
			};
			return listing;
		}

	}
	
}
	