/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BELogic (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:04 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Collections.Generic;
using System.Linq;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using DA = ConcordMfg.PremierSeniorSolutions.WebService.DataAccess;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic
{
	public class FacilityPhotoLogic
	{
		#region Public CRUD Methods
		public List<BE.FacilityPhoto> GetAllFacilityPhoto()
		{
			DA.FacilityPhotoGateway gateway = new DA.FacilityPhotoGateway();
			List<BE.FacilityPhoto> result = new List<BE.FacilityPhoto>();
			result = gateway.GetAll().ToBusinessEntitiesList();
			return result;
		}

		public List<BE.FacilityPhoto> GetAllFacilityPhotoWithUndefined()
		{
			DA.FacilityPhotoGateway gateway = new DA.FacilityPhotoGateway();
			List<BE.FacilityPhoto> result = new List<BE.FacilityPhoto>();
			result = gateway.GetAllWithUndefined().ToBusinessEntitiesList();
			return result;
		}

		public BE.FacilityPhoto GetFacilityPhotoByFacilityPhotoGuid(Guid facilityPhotoGuid)
		{
			DA.FacilityPhotoGateway gateway = new DA.FacilityPhotoGateway();
			BE.FacilityPhoto result = new BE.FacilityPhoto();
			result = gateway.GetByPK(facilityPhotoGuid).ToBusinessEntity();
			return result;
		}

		public BE.FacilityPhoto InsertFacilityPhoto(BE.FacilityPhoto entity)
		{
			//@@NEW - removed try/catch. insert returns DA entity (with new data). this method now returns an entity.
			DA.FacilityPhotoGateway gateway = new DA.FacilityPhotoGateway();
			DA.FacilityPhoto result = gateway.Insert(entity.ToDataEntity());
			return result.ToBusinessEntity();
		}

		public void UpdateFacilityPhoto(BE.FacilityPhoto entity)
		{
			DA.FacilityPhotoGateway gateway = new DA.FacilityPhotoGateway();
			gateway.Update(entity.ToDataEntity());
		}

		public void DeleteFacilityPhoto(BE.FacilityPhoto entity)
		{
			DA.FacilityPhotoGateway gateway = new DA.FacilityPhotoGateway();
			gateway.Delete(entity.FacilityPhotoGuid);
		}
		#endregion

		#region Public Many-To-One Methods

		public List<BE.FacilityPhoto> GetFacilityPhotosForFacilityByFacilityGuid(Guid facilityGuid)
		{
			DA.FacilityPhotoGateway gateway = new DA.FacilityPhotoGateway();
			List<BE.FacilityPhoto> result = new List<BE.FacilityPhoto>();
			result = gateway.GetForFacilityByFacilityGuid(facilityGuid).ToBusinessEntitiesList();
			return result;
		}

		#endregion
		
		#region Public Many-To-Many Methods

		#endregion
	}
}