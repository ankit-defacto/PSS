/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BELogic (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:04 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Collections.Generic;
using System.Linq;
using BE = ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities;
using DA = ConcordMfg.PremierSeniorSolutions.WebService.DataAccess;
using ConcordMfg.PremierSeniorSolutions.WebService.EntityConversions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessLogic
{
	public class ClientLogic
	{
		#region Public CRUD Methods
		public List<BE.Client> GetAllClient()
		{
			DA.ClientGateway gateway = new DA.ClientGateway();
			List<BE.Client> result = new List<BE.Client>();
			result = gateway.GetAll().ToBusinessEntitiesList();
			return result;
		}

		public List<BE.Client> GetAllClientWithUndefined()
		{
			DA.ClientGateway gateway = new DA.ClientGateway();
			List<BE.Client> result = new List<BE.Client>();
			result = gateway.GetAllWithUndefined().ToBusinessEntitiesList();
			return result;
		}

		public BE.Client GetClientByClientGuid(Guid clientGuid)
		{
            try
            {
                DA.ClientGateway gateway = new DA.ClientGateway();
                BE.Client result = new BE.Client();
                result = gateway.GetByPK(clientGuid).ToBusinessEntity();
                return result;
            }
            catch (DataAccess.DataAccessException)
            {
                return null;
            }
		}

		public BE.Client GetClientByEmail(string email)
		{
			DA.ClientGateway gateway = new DA.ClientGateway();
			//BE.Client result = new BE.Client();
            try
            {
                return gateway.GetByEmail(email).ToBusinessEntity();
            }
            catch (NullReferenceException)
            {
                return null;
            }
            
			//return result;
		}

		public BE.Client InsertClient(BE.Client entity)
		{
			StripPhoneNumber(entity);

			//@@NEW - removed try/catch. insert returns DA entity (with new data). this method now returns an entity.
			DA.ClientGateway gateway = new DA.ClientGateway();
			DA.Client result = gateway.Insert(entity.ToDataEntity());

			//@@NEW
			// Create the audit record.
			ClientAuditLogic auditLogic = new ClientAuditLogic();
			auditLogic.InsertClientAudit(result.ToBusinessEntity());

			return result.ToBusinessEntity();
		}

		public void UpdateClient(BE.Client entity)
		{
			StripPhoneNumber(entity);
			// Update the main record.
			DA.ClientGateway gateway = new DA.ClientGateway();
			gateway.Update(entity.ToDataEntity());

			//@@NEW
			// Create the audit record.
			ClientAuditLogic auditLogic = new ClientAuditLogic();
			auditLogic.InsertClientAudit(entity);
		}

		public void DeleteClient(BE.Client entity)
		{
			// Delete the main record.
			DA.ClientGateway gateway = new DA.ClientGateway();
			gateway.Delete(entity.ClientGuid);

			//@@NEW
			// Create the audit record.
			ClientAuditLogic auditLogic = new ClientAuditLogic();
			auditLogic.InsertClientAudit(entity);
		}
		#endregion

		#region Public Many-To-One Methods

		public List<BE.Client> GetClientsForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			DA.ClientGateway gateway = new DA.ClientGateway();
			List<BE.Client> result = new List<BE.Client>();
			result = gateway.GetForCityStateZipByCityStateZipGuid(cityStateZipGuid).ToBusinessEntitiesList();
			return result;
		}

		public List<BE.Client> GetClientsForPaymentInfoByPaymentInfoGuid(Guid paymentInfoGuid)
		{
			DA.ClientGateway gateway = new DA.ClientGateway();
			List<BE.Client> result = new List<BE.Client>();
			result = gateway.GetForPaymentInfoByPaymentInfoGuid(paymentInfoGuid).ToBusinessEntitiesList();
			return result;
		}

		#endregion
		
		#region Public Many-To-Many Methods

		#endregion

		private void StripPhoneNumber(BE.Client entity)
		{
			if (null == entity)
			{
				entity.PhoneNumber = string.Empty;
				return;
			}

			System.Text.StringBuilder result = new System.Text.StringBuilder();
			foreach (char c in entity.PhoneNumber)
			{
				if (char.IsNumber(c))
					result.Append(c);
			}
			entity.PhoneNumber = result.ToString().Substring(0, 10).PadLeft(10);
		}
	}
}