/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BEGateway (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:00 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.DataAccess
{
	public class FacilityLocationCriteriaGateway : GatewayBase, IFacilityLocationCriteriaGateway
	{
		#region IFacilityLocationCriteriaGateway Members
		public IOrderedQueryable<FacilityLocationCriteria> GetAll()
		{
			try
			{
				using (PSS2012DataContext context = this.DataContext)
				{
					return context.FacilityLocationCriterias.OrderBy(facilityLocationCriteria => facilityLocationCriteria.FacilityGuid);
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		public FacilityLocationCriteria GetByPK(Guid facilityGuid, Guid cityStateZipGuid)
		{
			if (Guid.Empty == facilityGuid || Guid.Empty == cityStateZipGuid)
			{ return new FacilityLocationCriteria(); }

			try
			{
				FacilityLocationCriteria daFacilityLocationCriteria = new FacilityLocationCriteria();
				using (PSS2012DataContext context = this.DataContext)
				{
					daFacilityLocationCriteria = (
						from items in context.FacilityLocationCriterias
						where items.FacilityGuid == facilityGuid && items.CityStateZipGuid == cityStateZipGuid
						select items).SingleOrDefault();
				}

				if (null == daFacilityLocationCriteria)
				{
					throw new DataAccessException("FacilityLocationCriteria no longer exists.");
				}

				return daFacilityLocationCriteria;
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Inserts facilityLocationCriteria business entity into the data store.
		/// </summary>
		/// <param name="entity">The facilityLocationCriteria business entity to insert.</param>
		/// <returns>The facilityLocationCriteria identifier.</returns>
		public FacilityLocationCriteria Insert(FacilityLocationCriteria entity)
		{
			//@@NEW - changed return type to entity type.
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					//@@NEW - removed assignments for entity properties to themselves.
					context.FacilityLocationCriterias.InsertOnSubmit(entity);
					context.SubmitChanges();
				}

				//@@NEW - returning full entity.
				return entity;
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		public void Update(FacilityLocationCriteria entity)
		{
			if (Guid.Empty == entity.FacilityGuid || Guid.Empty == entity.CityStateZipGuid)
				throw new PrimaryKeyMissingException("FacilityLocationCriteria", entity, "update");

			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to update.
					FacilityLocationCriteria facilityLocationCriteriaToUpdate = GetByPK(entity.FacilityGuid, entity.CityStateZipGuid);

					// Set the new values.

					// Perform the update.
					context.SubmitChanges();
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		public void Delete(Guid facilityGuid, Guid cityStateZipGuid)
		{
			if (Guid.Empty == facilityGuid)
				throw new PrimaryKeyMissingException("FacilityLocationCriteria", facilityGuid, "delete");

			if (Guid.Empty == cityStateZipGuid)
				throw new PrimaryKeyMissingException("FacilityLocationCriteria", cityStateZipGuid, "delete");


			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to delete.
					FacilityLocationCriteria facilityLocationCriteriaToDelete = GetByPK(facilityGuid, cityStateZipGuid);

					// Peform the delete.
					context.FacilityLocationCriterias.DeleteOnSubmit(facilityLocationCriteriaToDelete);
					context.SubmitChanges();
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		#endregion


		#region Private Handle Exception Methods
		private Exception HandleSqlException(System.Data.SqlClient.SqlException ex)
		{
			if (ex.Message.Contains("An error has occurred while establishing a connection to the server.  When connecting to SQL Server 2005, this failure may be caused by the fact that under the default settings SQL Server does not allow remote connections."))
			{
				return new Exception("Could not establish a connection to SQL Server. See inner exception for more details. Perhaps Windows Firewall has blocked the connection to SQL Server. Check online resources to find out how to allow port exceptions.", ex);
			}
			else if (ex.Message.Contains("Invalid object name 'dbo.FacilityLocationCriteria'"))
			{
				return new TableDoesNotExistException("PSS2012", "FacilityLocationCriteria", ex);
			}
			else if (ex.Message.Contains("Invalid column name"))
			{
				return new ColumnDoesNotExistException("PSS2012", "FacilityLocationCriteria", ex);
			}
			else if (ex.Message.Contains("String or binary data would be truncated"))
			{
				return new DataAccessException("String or number is too long or too big for the database.", ex);
			}
			else if (ex.Message.Contains("The DELETE statement conflicted with the REFERENCE constraint"))
			{
				Regex errorRx = new Regex("The DELETE statement conflicted with the REFERENCE constraint \"(?<constraint>[\\x20-\\x7E-[\"]]{1,})\". The conflict occurred in database \"(?<db>[\\x20-\\x7E-[\"]]{1,50})\", table \"dbo.(?<jtn>[\\x20-\\x7E-[\"]]{1,50})\"");
				Match errorMatch = errorRx.Match(ex.Message);
				if (errorMatch.Success)
				{
					return new RowReferencedElsewhereException(errorMatch.Groups["db"].Value, "FacilityLocationCriteria", errorMatch.Groups["jtn"].Value, ex);
				}
				else
				{ return ex; }
			}
			else
			{
				return ex;
			}
		}
		#endregion
	}
}