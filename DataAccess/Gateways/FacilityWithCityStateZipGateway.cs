/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: JoinGateway (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:01 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;

namespace ConcordMfg.PremierSeniorSolutions.WebService.DataAccess
{
	public class FacilityWithCityStateZipGateway : GatewayBase, IFacilityWithCityStateZipGateway
	{
		#region IFacilityWithCityStateZipGateway Members

		public IQueryable<FacilityWithCityStateZip> GetAll()
		{
			try
			{
				using (PSS2012DataContext context = this.DataContext)
				{
					return
						from mt in context.Facilities
						join jt in context.FacilityLocationCriterias on mt.FacilityGuid equals jt.CityStateZipGuid
						select new FacilityWithCityStateZip()
						{
							FacilityGuid = mt.FacilityGuid,
							FacilityID = mt.FacilityID,
							FacilityName = mt.FacilityName,
							Exerpt = mt.Exerpt,
							Description = mt.Description,
							Address = mt.Address,
							CityStateZipGuid = mt.CityStateZipGuid,
							PhoneNumber = mt.PhoneNumber,
							Email = mt.Email,
							Website = mt.Website,
							ClientGuid = mt.ClientGuid,
							ListingTypeGuid = mt.ListingTypeGuid,
							PublicPhotoFileUri = mt.PublicPhotoFileUri,
							CityStateZip_CityStateZipGuid = jt.CityStateZipGuid,
						};
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
			catch (Exception ex)
			{
				throw ex;
			}

		}

		public IQueryable<FacilityWithCityStateZip> GetByFacilityGuid(Guid facilityGuid)
		{
			try
			{
				using (PSS2012DataContext context = this.DataContext)
				{
					return
						from mt in context.Facilities
						join jt in context.FacilityLocationCriterias on mt.FacilityGuid equals jt.CityStateZipGuid
						where mt.FacilityGuid == facilityGuid
						select new FacilityWithCityStateZip()
						{
							FacilityGuid = mt.FacilityGuid,
							FacilityID = mt.FacilityID,
							FacilityName = mt.FacilityName,
							Exerpt = mt.Exerpt,
							Description = mt.Description,
							Address = mt.Address,
							CityStateZipGuid = mt.CityStateZipGuid,
							PhoneNumber = mt.PhoneNumber,
							Email = mt.Email,
							Website = mt.Website,
							ClientGuid = mt.ClientGuid,
							ListingTypeGuid = mt.ListingTypeGuid,
							PublicPhotoFileUri = mt.PublicPhotoFileUri,
							CityStateZip_CityStateZipGuid = jt.CityStateZipGuid,
						};
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		public IQueryable<FacilityWithCityStateZip> GetByCityStateZipGuid(Guid cityStateZipGuid)
		{
			try
			{
				using (PSS2012DataContext context = this.DataContext)
				{
					return 
						from mt in context.Facilities
						join jt in context.FacilityLocationCriterias on mt.FacilityGuid equals jt.CityStateZipGuid
						where jt.CityStateZipGuid == cityStateZipGuid
						select new FacilityWithCityStateZip()
						{
							FacilityGuid = mt.FacilityGuid,
							FacilityID = mt.FacilityID,
							FacilityName = mt.FacilityName,
							Exerpt = mt.Exerpt,
							Description = mt.Description,
							Address = mt.Address,
							CityStateZipGuid = mt.CityStateZipGuid,
							PhoneNumber = mt.PhoneNumber,
							Email = mt.Email,
							Website = mt.Website,
							ClientGuid = mt.ClientGuid,
							ListingTypeGuid = mt.ListingTypeGuid,
							PublicPhotoFileUri = mt.PublicPhotoFileUri,
							CityStateZip_CityStateZipGuid = jt.CityStateZipGuid,
						 };
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		public void Update(FacilityWithCityStateZip entity)
		{
			try
			{
				using (PSS2012DataContext context = this.DataContext)
				{
					// Get the Facility to update.
					Facility facilityToUpdate = (
						from mt in context.Facilities
						where mt.FacilityGuid == entity.FacilityGuid
						select mt).Single();

					// Update the facility data that is not auto assigned.
					facilityToUpdate.FacilityName = entity.FacilityName;
					facilityToUpdate.Exerpt = entity.Exerpt;
					facilityToUpdate.Description = entity.Description;
					facilityToUpdate.Address = entity.Address;
					facilityToUpdate.CityStateZipGuid = entity.CityStateZipGuid;
					facilityToUpdate.PhoneNumber = entity.PhoneNumber;
					facilityToUpdate.Email = entity.Email;
					facilityToUpdate.Website = entity.Website;
					facilityToUpdate.ClientGuid = entity.ClientGuid;
					facilityToUpdate.ListingTypeGuid = entity.ListingTypeGuid;
					facilityToUpdate.PublicPhotoFileUri = entity.PublicPhotoFileUri;

					// Get the join table.
					FacilityLocationCriteria facilityLocationCriteriaToUpdate = (
						from jt in context.FacilityLocationCriterias
						where jt.FacilityGuid == entity.FacilityGuid &&
							jt.CityStateZipGuid == entity.CityStateZip_CityStateZipGuid
						select jt).Single();

					// Perform the update.
					context.SubmitChanges();
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		#endregion


		#region Private Handle Exception Methods
		private Exception HandleSqlException(System.Data.SqlClient.SqlException ex)
		{
			if (ex.Message.Contains("An error has occurred while establishing a connection to the server.  When connecting to SQL Server 2005, this failure may be caused by the fact that under the default settings SQL Server does not allow remote connections."))
			{
				return new Exception("Could not establish a connection to SQL Server. See inner exception for more details. Perhaps Windows Firewall has blocked the connection to SQL Server. Check online resources to find out how to allow port exceptions.", ex);
			}
			else if (ex.Message.Contains("Invalid object name 'dbo.Facility'"))
			{
				return new TableDoesNotExistException("PSS2012", "Facility", ex);
			}
			else if (ex.Message.Contains("Invalid object name 'dbo.FacilityLocationCriteria'"))
			{
				return new TableDoesNotExistException("PSS2012", "FacilityLocationCriteria", ex);
			}
			else if (ex.Message.Contains("Invalid column name"))
			{
				return new ColumnDoesNotExistException("PSS2012", "Facility", ex);
			}
			else if (ex.Message.Contains("String or binary data would be truncated"))
			{
				return new DataAccessException("String or number is too long or too big for the database.", ex);
			}
			else
			{
				return ex;
			}
		}
		#endregion
	}
}