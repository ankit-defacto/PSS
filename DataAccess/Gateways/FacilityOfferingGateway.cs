/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BEGateway (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:00 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.DataAccess
{
	public class FacilityOfferingGateway : GatewayBase, IFacilityOfferingGateway
	{
		#region IFacilityOfferingGateway Members
		public IOrderedQueryable<FacilityOffering> GetAll()
		{
			try
			{
				using (PSS2012DataContext context = this.DataContext)
				{
					return context.FacilityOfferings.OrderBy(facilityOffering => facilityOffering.FacilityGuid);
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public FacilityOffering GetByPK(Guid facilityGuid, Guid offeringGuid)
		{
			if (Guid.Empty == facilityGuid || Guid.Empty == offeringGuid)
			{ return new FacilityOffering(); }

			try
			{
				FacilityOffering daFacilityOffering = new FacilityOffering();
				using (PSS2012DataContext context = this.DataContext)
				{
					daFacilityOffering = (
						from items in context.FacilityOfferings
						where items.FacilityGuid == facilityGuid && items.OfferingGuid == offeringGuid
						select items).SingleOrDefault();
				}

				if (null == daFacilityOffering)
				{
					throw new DataAccessException("FacilityOffering no longer exists.");
				}

				return daFacilityOffering;
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		/// <summary>
		/// Inserts facilityOffering business entity into the data store.
		/// </summary>
		/// <param name="entity">The facilityOffering business entity to insert.</param>
		/// <returns>The facilityOffering identifier.</returns>
		public FacilityOffering Insert(FacilityOffering entity)
		{
			//@@NEW - changed return type to entity type.
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					context.FacilityOfferings.InsertOnSubmit(entity);
					context.SubmitChanges();
				}

				//@@NEW - returning full entity.
				return entity;
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public void Update(FacilityOffering entity)
		{
			if (Guid.Empty == entity.FacilityGuid || Guid.Empty == entity.OfferingGuid)
				throw new PrimaryKeyMissingException("FacilityOffering", entity, "update");

			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to update.
					FacilityOffering facilityOfferingToUpdate = GetByPK(entity.FacilityGuid, entity.OfferingGuid);

					// Set the new values.
					facilityOfferingToUpdate.IsChecked = entity.IsChecked;
                    context.FacilityOfferings.Attach(facilityOfferingToUpdate);

					// Perform the update.
					context.SubmitChanges();
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public void Delete(Guid facilityGuid, Guid offeringGuid)
		{
			if (Guid.Empty == facilityGuid)
				throw new PrimaryKeyMissingException("FacilityOffering", facilityGuid, "delete");

			if (Guid.Empty == offeringGuid)
				throw new PrimaryKeyMissingException("FacilityOffering", offeringGuid, "delete");


			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to delete.
					FacilityOffering facilityOfferingToDelete = GetByPK(facilityGuid, offeringGuid);
                    context.FacilityOfferings.Attach(facilityOfferingToDelete);
					// Peform the delete.
					context.FacilityOfferings.DeleteOnSubmit(facilityOfferingToDelete);
					context.SubmitChanges();
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}
		#endregion


		#region Private Handle Exception Methods
		private Exception HandleSqlException(System.Data.SqlClient.SqlException ex)
		{
			if (ex.Message.Contains("An error has occurred while establishing a connection to the server.  When connecting to SQL Server 2005, this failure may be caused by the fact that under the default settings SQL Server does not allow remote connections."))
			{
				return new Exception("Could not establish a connection to SQL Server. See inner exception for more details. Perhaps Windows Firewall has blocked the connection to SQL Server. Check online resources to find out how to allow port exceptions.", ex);
			}
			else if (ex.Message.Contains("Invalid object name 'dbo.FacilityOffering'"))
			{
				return new TableDoesNotExistException("PSS2012", "FacilityOffering", ex);
			}
			else if (ex.Message.Contains("Invalid column name"))
			{
				return new ColumnDoesNotExistException("PSS2012", "FacilityOffering", ex);
			}
			else if (ex.Message.Contains("String or binary data would be truncated"))
			{
				return new DataAccessException("String or number is too long or too big for the database.", ex);
			}
			else if (ex.Message.Contains("The DELETE statement conflicted with the REFERENCE constraint"))
			{
				Regex errorRx = new Regex("The DELETE statement conflicted with the REFERENCE constraint \"(?<constraint>[\\x20-\\x7E-[\"]]{1,})\". The conflict occurred in database \"(?<db>[\\x20-\\x7E-[\"]]{1,50})\", table \"dbo.(?<jtn>[\\x20-\\x7E-[\"]]{1,50})\"");
				Match errorMatch = errorRx.Match(ex.Message);
				if (errorMatch.Success)
				{
					return new RowReferencedElsewhereException(errorMatch.Groups["db"].Value, "FacilityOffering", errorMatch.Groups["jtn"].Value, ex);
				}
				else
				{ return ex; }
			}
			else
			{
				return ex;
			}
		}
		#endregion
	}
}