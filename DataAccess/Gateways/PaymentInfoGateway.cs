/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BEGateway (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:00 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.DataAccess
{
	public class PaymentInfoGateway : GatewayBase, IPaymentInfoGateway
	{
		#region IPaymentInfoGateway Members
		public IOrderedQueryable<PaymentInfo> GetAll()
		{
			try
			{
				using (PSS2012DataContext context = this.DataContext)
				{
					return context.PaymentInfos.OrderBy(paymentInfo => paymentInfo.AmazonToken);
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public List<PaymentInfo> GetAllWithUndefined()
		{
			PaymentInfo undefinedPaymentInfo = new PaymentInfo()
			{
				PaymentInfoGuid = Guid.Empty,
				PaymentInfoID = 0,
				AmazonToken = "Undefined",
			};

			List<PaymentInfo> response = this.GetAll().ToList();
			response.Add(undefinedPaymentInfo);

			return response;
		}

		public PaymentInfo GetByPK(Guid paymentInfoGuid)
		{
			if (Guid.Empty == paymentInfoGuid)
			{ return new PaymentInfo(); }

			try
			{
				PaymentInfo daPaymentInfo = new PaymentInfo();
				using (PSS2012DataContext context = this.DataContext)
				{
					daPaymentInfo = (
						from items in context.PaymentInfos
						where items.PaymentInfoGuid == paymentInfoGuid
						select items).SingleOrDefault();
				}

				if (null == daPaymentInfo)
				{
					throw new DataAccessException("PaymentInfo no longer exists.");
				}

				return daPaymentInfo;
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		/// <summary>
		/// Inserts paymentInfo business entity into the data store.
		/// </summary>
		/// <param name="entity">The paymentInfo business entity to insert.</param>
		/// <returns>The paymentInfo identifier.</returns>
		public PaymentInfo Insert(PaymentInfo entity)
		{
			//@@NEW - changed return type to entity type.
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					entity.PaymentInfoGuid = Guid.NewGuid();

					context.PaymentInfos.InsertOnSubmit(entity);
					context.SubmitChanges();
				}

				//@@NEW - returning full entity.
				return entity;
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public void Update(PaymentInfo entity)
		{
			if (Guid.Empty == entity.PaymentInfoGuid)
				throw new PrimaryKeyMissingException("PaymentInfo", entity, "update");

			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to update.
					PaymentInfo paymentInfoToUpdate = GetByPK(entity.PaymentInfoGuid);
                    context.PaymentInfos.Attach(paymentInfoToUpdate);
					// Set the new values.
					//paymentInfoToUpdate.PaymentInfoID = entity.PaymentInfoID;
					paymentInfoToUpdate.AmazonToken = entity.AmazonToken;

					// Perform the update.
					context.SubmitChanges();
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public void Delete(Guid paymentInfoGuid)
		{
			if (Guid.Empty == paymentInfoGuid)
				throw new PrimaryKeyMissingException("PaymentInfo", paymentInfoGuid, "delete");
            
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to delete.
					PaymentInfo paymentInfoToDelete = GetByPK(paymentInfoGuid);
                    context.PaymentInfos.Attach(paymentInfoToDelete);
					// Peform the delete.
					context.PaymentInfos.DeleteOnSubmit(paymentInfoToDelete);
					context.SubmitChanges();
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}
		#endregion


		#region Private Handle Exception Methods
		private Exception HandleSqlException(System.Data.SqlClient.SqlException ex)
		{
			if (ex.Message.Contains("An error has occurred while establishing a connection to the server.  When connecting to SQL Server 2005, this failure may be caused by the fact that under the default settings SQL Server does not allow remote connections."))
			{
				return new Exception("Could not establish a connection to SQL Server. See inner exception for more details. Perhaps Windows Firewall has blocked the connection to SQL Server. Check online resources to find out how to allow port exceptions.", ex);
			}
			else if (ex.Message.Contains("Invalid object name 'dbo.PaymentInfo'"))
			{
				return new TableDoesNotExistException("PSS2012", "PaymentInfo", ex);
			}
			else if (ex.Message.Contains("Invalid column name"))
			{
				return new ColumnDoesNotExistException("PSS2012", "PaymentInfo", ex);
			}
			else if (ex.Message.Contains("String or binary data would be truncated"))
			{
				return new DataAccessException("String or number is too long or too big for the database.", ex);
			}
			else if (ex.Message.Contains("The DELETE statement conflicted with the REFERENCE constraint"))
			{
				Regex errorRx = new Regex("The DELETE statement conflicted with the REFERENCE constraint \"(?<constraint>[\\x20-\\x7E-[\"]]{1,})\". The conflict occurred in database \"(?<db>[\\x20-\\x7E-[\"]]{1,50})\", table \"dbo.(?<jtn>[\\x20-\\x7E-[\"]]{1,50})\"");
				Match errorMatch = errorRx.Match(ex.Message);
				if (errorMatch.Success)
				{
					return new RowReferencedElsewhereException(errorMatch.Groups["db"].Value, "PaymentInfo", errorMatch.Groups["jtn"].Value, ex);
				}
				else
				{ return ex; }
			}
			else
			{
				return ex;
			}
		}
		#endregion
	}
}