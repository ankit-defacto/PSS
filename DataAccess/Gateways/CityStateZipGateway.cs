/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BEGateway (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:00 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.DataAccess
{
    public class CityStateZipGateway : GatewayBase, ICityStateZipGateway
    {
        #region ICityStateZipGateway Members
        public IList<CityStateZip> GetAll()
        {
            try
            {
                using (PSS2012DataContext context = this.DataContext)
                {
                    return context.CityStateZips.OrderBy(cityStateZip => cityStateZip.City).ToList();
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw this.HandleSqlException(ex);
            }
        }

        public List<CityStateZip> GetAllWithUndefined()
        {
            CityStateZip undefinedCityStateZip = new CityStateZip()
            {
                CityStateZipGuid = Guid.Empty,
                City = "Undefined",
                State = null,
                ZipCode = null,
            };

            List<CityStateZip> response = this.GetAll().ToList();
            response.Add(undefinedCityStateZip);

            return response;
        }

        public CityStateZip GetByPK(Guid cityStateZipGuid)
        {
            if (Guid.Empty == cityStateZipGuid)
            { return new CityStateZip(); }

            try
            {
                CityStateZip daCityStateZip = new CityStateZip();
                using (PSS2012DataContext context = this.DataContext)
                {
                    daCityStateZip = (
                        from items in context.CityStateZips
                        where items.CityStateZipGuid == cityStateZipGuid
                        select items).SingleOrDefault();
                }

                if (null == daCityStateZip)
                {
                    throw new DataAccessException("CityStateZip no longer exists.");
                }

                return daCityStateZip;
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw this.HandleSqlException(ex);
            }
        }

        //@@NEW
        public CityStateZip GetByZipCode(string zipCode)
        {
            if (string.IsNullOrEmpty(zipCode))
            { return null; }

            try
            {
                CityStateZip daCityStateZip = new CityStateZip();
                using (PSS2012DataContext context = this.DataContext)
                {
                    daCityStateZip = (
                        from items in context.CityStateZips
                        where items.ZipCode == zipCode
                        select items).SingleOrDefault();
                }

                return daCityStateZip;
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw this.HandleSqlException(ex);
            }
        }

        /// <summary>
        /// Inserts cityStateZip business entity into the data store.
        /// </summary>
        /// <param name="entity">The cityStateZip business entity to insert.</param>
        /// <returns>The cityStateZip identifier.</returns>
        public CityStateZip Insert(CityStateZip entity)
        {
            try
            {
                using (PSS2012DataContext context = DataContext)
                {
                    entity.CityStateZipGuid = Guid.NewGuid();

                    context.CityStateZips.InsertOnSubmit(entity);
                    context.SubmitChanges();
                }

                return entity;
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw this.HandleSqlException(ex);
            }
        }

        public void Update(CityStateZip entity)
        {
            if (Guid.Empty == entity.CityStateZipGuid)
                throw new PrimaryKeyMissingException("CityStateZip", entity, "update");

            try
            {
                using (PSS2012DataContext context = this.DataContext)
                {
                    // Get the entity to update.
                    CityStateZip cityStateZipToUpdate = GetByPK(entity.CityStateZipGuid);
                    context.CityStateZips.Attach(cityStateZipToUpdate);
                    // Set the new values.
                    cityStateZipToUpdate.City = entity.City;
                    cityStateZipToUpdate.State = entity.State;
                    // plamen: record is located byt zipcode - no need to update
                    //cityStateZipToUpdate.ZipCode = entity.ZipCode;

                    // Perform the update.
                    context.SubmitChanges();
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw this.HandleSqlException(ex);
            }
        }

        public void Delete(Guid cityStateZipGuid)
        {
            if (Guid.Empty == cityStateZipGuid)
                throw new PrimaryKeyMissingException("CityStateZip", cityStateZipGuid, "delete");
            
            try
            {
                using (PSS2012DataContext context = this.DataContext)
                {
                    // Get the entity to delete.
                    CityStateZip cityStateZipToDelete = GetByPK(cityStateZipGuid);
                    context.CityStateZips.Attach(cityStateZipToDelete);
                    // Peform the delete.
                    context.CityStateZips.DeleteOnSubmit(cityStateZipToDelete);
                    context.SubmitChanges();
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw this.HandleSqlException(ex);
            }
        }

        public IOrderedQueryable<CityStateZip> GetAllForFacility(Guid facilityGuid)
        {
            try
            {
                using (PSS2012DataContext context = this.DataContext)
                {
                    var cityStateZipQuery =
                        from items in context.CityStateZips
                        join jt in context.FacilityLocationCriterias on items.CityStateZipGuid equals jt.CityStateZipGuid
                        where jt.CityStateZipGuid == facilityGuid
                        select items;
                    return cityStateZipQuery.OrderBy(cityStateZip => cityStateZip.City);
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw this.HandleSqlException(ex);
            }
        }

        public IOrderedQueryable<CityStateZip> GetAllNotForFacility(Guid facilityGuid)
        {
            try
            {
                using (PSS2012DataContext context = this.DataContext)
                {
                    var query1 =
                        from tIn in context.CityStateZips
                        join jtIn in context.FacilityLocationCriterias on tIn.CityStateZipGuid equals jtIn.CityStateZipGuid into temp
                        from newT in temp.DefaultIfEmpty()
                        where newT.CityStateZipGuid == facilityGuid
                        select newT.CityStateZipGuid;

                    var query2 =
                        from t in context.CityStateZips
                        where !query1.Contains(t.CityStateZipGuid)
                        select t;

                    return query2.OrderBy(cityStateZip => cityStateZip.City);
                }
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw this.HandleSqlException(ex);
            }
        }
        #endregion


        #region Private Handle Exception Methods
        private Exception HandleSqlException(System.Data.SqlClient.SqlException ex)
        {
            if (ex.Message.Contains("An error has occurred while establishing a connection to the server.  When connecting to SQL Server 2005, this failure may be caused by the fact that under the default settings SQL Server does not allow remote connections."))
            {
                return new Exception("Could not establish a connection to SQL Server. See inner exception for more details. Perhaps Windows Firewall has blocked the connection to SQL Server. Check online resources to find out how to allow port exceptions.", ex);
            }
            else if (ex.Message.Contains("Invalid object name 'dbo.CityStateZip'"))
            {
                return new TableDoesNotExistException("PSS2012", "CityStateZip", ex);
            }
            else if (ex.Message.Contains("Invalid column name"))
            {
                return new ColumnDoesNotExistException("PSS2012", "CityStateZip", ex);
            }
            else if (ex.Message.Contains("String or binary data would be truncated"))
            {
                return new DataAccessException("String or number is too long or too big for the database.", ex);
            }
            else if (ex.Message.Contains("The DELETE statement conflicted with the REFERENCE constraint"))
            {
                Regex errorRx = new Regex("The DELETE statement conflicted with the REFERENCE constraint \"(?<constraint>[\\x20-\\x7E-[\"]]{1,})\". The conflict occurred in database \"(?<db>[\\x20-\\x7E-[\"]]{1,50})\", table \"dbo.(?<jtn>[\\x20-\\x7E-[\"]]{1,50})\"");
                Match errorMatch = errorRx.Match(ex.Message);
                if (errorMatch.Success)
                {
                    return new RowReferencedElsewhereException(errorMatch.Groups["db"].Value, "CityStateZip", errorMatch.Groups["jtn"].Value, ex);
                }
                else
                { return ex; }
            }
            else
            {
                return ex;
            }
        }
        #endregion
    }
}