/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BEGateway (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:00 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.DataAccess
{
	public class ClientAuditGateway : GatewayBase, IClientAuditGateway
	{
		#region IClientAuditGateway Members
		public IOrderedQueryable<ClientAudit> GetAll()
		{
			try
			{
				using (PSS2012DataContext context = this.DataContext)
				{
					return context.ClientAudits.OrderBy(clientAudit => clientAudit.ClientName);
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public List<ClientAudit> GetAllWithUndefined()
		{
			ClientAudit undefinedClientAudit = new ClientAudit()
			{
				ClientAuditGuid = Guid.Empty,
				ClientGuid = Guid.Empty,
				ClientID = 0,
				ClientName = "Undefined",
				PhoneNumber = null,
				Email = null,
				Address = null,
				CityStateZipGuid = Guid.Empty,
				PaymentInfoGuid = Guid.Empty,
				FederatedID = null,
				FederatedKey = null,
				FederatedIDProvider = null,
				Username = null,
				HashedPassword = null,
				DateModified = default(DateTime),
                AccountPaused = null
			};

			List<ClientAudit> response = this.GetAll().ToList();
			response.Add(undefinedClientAudit);

			return response;
		}

		public ClientAudit GetByPK(Guid clientAuditGuid)
		{
			if (Guid.Empty == clientAuditGuid)
			{ return new ClientAudit(); }

			try
			{
				ClientAudit daClientAudit = new ClientAudit();
				using (PSS2012DataContext context = this.DataContext)
				{
					daClientAudit = (
						from items in context.ClientAudits
						where items.ClientAuditGuid == clientAuditGuid
						select items).SingleOrDefault();
				}

				if (null == daClientAudit)
				{
					throw new DataAccessException("ClientAudit no longer exists.");
				}

				return daClientAudit;
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		/// <summary>
		/// Inserts clientAudit data entity into the data store.
		/// </summary>
		/// <param name="entity">The clientAudit data entity to insert.</param>
		/// <returns>The clientAudit identifier.</returns>
		public ClientAudit Insert(ClientAudit entity)
		{
			//@@NEW - changed return type to entity type.
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					entity.ClientAuditGuid = Guid.NewGuid();
					//@@NEW
					entity.DateModified = DateTime.Now;

					context.ClientAudits.InsertOnSubmit(entity);
					context.SubmitChanges();
				}

				//@@NEW - returning full entity.
				return entity;
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		//@@NEW - These methods don't belong in an Audit table.
		//public void Update(ClientAudit entity)
		//{
		//    if (Guid.Empty == entity.ClientAuditGuid)
		//        throw new PrimaryKeyMissingException("ClientAudit", entity, "update");

		//    try
		//    {
		//        using (PSS2012DataContext context = DataContext)
		//        {
		//            // Get the entity to update.
		//            ClientAudit clientAuditToUpdate = GetByPK(entity.ClientAuditGuid);

		//            // Set the new values.
		//            clientAuditToUpdate.ClientGuid = entity.ClientGuid;
		//            clientAuditToUpdate.ClientID = entity.ClientID;
		//            clientAuditToUpdate.ClientName = entity.ClientName;
		//            clientAuditToUpdate.PhoneNumber = entity.PhoneNumber;
		//            clientAuditToUpdate.Email = entity.Email;
		//            clientAuditToUpdate.Address = entity.Address;
		//            clientAuditToUpdate.CityStateZipGuid = entity.CityStateZipGuid;
		//            clientAuditToUpdate.PaymentInfoGuid = entity.PaymentInfoGuid;
		//            clientAuditToUpdate.FederatedID = entity.FederatedID;
		//            clientAuditToUpdate.FederatedKey = entity.FederatedKey;
		//            clientAuditToUpdate.FederatedIDProvider = entity.FederatedIDProvider;
		//            clientAuditToUpdate.Username = entity.Username;
		//            clientAuditToUpdate.HashedPassword = entity.HashedPassword;
		//            clientAuditToUpdate.DateModified = entity.DateModified;

		//            // Perform the update.
		//            context.SubmitChanges();
		//        }
		//    }
		//    catch (System.Data.SqlClient.SqlException ex)
		//    {
		//        throw this.HandleSqlException(ex);
		//    }
		//    catch (Exception ex)
		//    {
		//        throw ex;
		//    }
		//}

		//public void Delete(Guid clientAuditGuid)
		//{
		//    if (Guid.Empty == clientAuditGuid)
		//        throw new PrimaryKeyMissingException("ClientAudit", clientAuditGuid, "delete");


		//    try
		//    {
		//        using (PSS2012DataContext context = DataContext)
		//        {
		//            // Get the entity to delete.
		//            ClientAudit clientAuditToDelete = GetByPK(clientAuditGuid);

		//            // Peform the delete.
		//            context.ClientAudits.DeleteOnSubmit(clientAuditToDelete);
		//            context.SubmitChanges();
		//        }
		//    }
		//    catch (System.Data.SqlClient.SqlException ex)
		//    {
		//        throw this.HandleSqlException(ex);
		//    }
		//    catch (Exception ex)
		//    {
		//        throw ex;
		//    }
		//}

		public IOrderedQueryable<ClientAudit> GetForClientByClientGuid(Guid clientGuid)
		{
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to delete.
					return
						(from items in context.ClientAudits
						 where items.ClientGuid == clientGuid
						 select items).OrderBy(clientAudit => clientAudit.ClientName);
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public IOrderedQueryable<ClientAudit> GetForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to delete.
					return
						(from items in context.ClientAudits
						 where items.CityStateZipGuid == cityStateZipGuid
						 select items).OrderBy(clientAudit => clientAudit.ClientName);
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public IOrderedQueryable<ClientAudit> GetForPaymentInfoByPaymentInfoGuid(Guid paymentInfoGuid)
		{
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to delete.
					return
						(from items in context.ClientAudits
						 where items.PaymentInfoGuid == paymentInfoGuid
						 select items).OrderBy(clientAudit => clientAudit.ClientName);
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}
		#endregion


		#region Private Handle Exception Methods
		private Exception HandleSqlException(System.Data.SqlClient.SqlException ex)
		{
			if (ex.Message.Contains("An error has occurred while establishing a connection to the server.  When connecting to SQL Server 2005, this failure may be caused by the fact that under the default settings SQL Server does not allow remote connections."))
			{
				return new Exception("Could not establish a connection to SQL Server. See inner exception for more details. Perhaps Windows Firewall has blocked the connection to SQL Server. Check online resources to find out how to allow port exceptions.", ex);
			}
			else if (ex.Message.Contains("Invalid object name 'dbo.ClientAudit'"))
			{
				return new TableDoesNotExistException("PSS2012", "ClientAudit", ex);
			}
			else if (ex.Message.Contains("Invalid column name"))
			{
				return new ColumnDoesNotExistException("PSS2012", "ClientAudit", ex);
			}
			else if (ex.Message.Contains("String or binary data would be truncated"))
			{
				return new DataAccessException("String or number is too long or too big for the database.", ex);
			}
			else if (ex.Message.Contains("The DELETE statement conflicted with the REFERENCE constraint"))
			{
				Regex errorRx = new Regex("The DELETE statement conflicted with the REFERENCE constraint \"(?<constraint>[\\x20-\\x7E-[\"]]{1,})\". The conflict occurred in database \"(?<db>[\\x20-\\x7E-[\"]]{1,50})\", table \"dbo.(?<jtn>[\\x20-\\x7E-[\"]]{1,50})\"");
				Match errorMatch = errorRx.Match(ex.Message);
				if (errorMatch.Success)
				{
					return new RowReferencedElsewhereException(errorMatch.Groups["db"].Value, "ClientAudit", errorMatch.Groups["jtn"].Value, ex);
				}
				else
				{ return ex; }
			}
			else
			{
				return ex;
			}
		}
		#endregion
	}
}