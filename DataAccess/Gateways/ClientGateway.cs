/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BEGateway (v0.2.0.0).xslt
 * Date generated: 3/28/2012 12:46:00 PM
 * CodeGen version: 0.2.0.0  */

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace ConcordMfg.PremierSeniorSolutions.WebService.DataAccess
{
	public class ClientGateway : GatewayBase, IClientGateway
	{
		#region IClientGateway Members

		public IOrderedQueryable<Client> GetAll()
		{
			try
			{
				using (PSS2012DataContext context = this.DataContext)
				{
					return context.Clients.OrderBy(client => client.ClientName);
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

        public List<Client> GetClientList()
        {
            try
            {
                List<Client> daClient = new List<Client>();
                using (PSS2012DataContext context = this.DataContext)
                {
                    daClient = (
                        from items in context.Clients
                        select items).Where(x=>x.IsActive==true).OrderBy(x => x.ClientName).ToList();
                }
                return daClient;
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw this.HandleSqlException(ex);
            }
        }

		public List<Client> GetAllWithUndefined()
		{
			Client undefinedClient = new Client()
			{
				ClientGuid = Guid.Empty,
				ClientID = 0,
				ClientName = "Undefined",
				PhoneNumber = null,
				Email = null,
				Address = null,
				CityStateZipGuid = Guid.Empty,
				PaymentInfoGuid = Guid.Empty,
				FederatedID = null,
				FederatedKey = null,
				FederatedIDProvider = null,
				Username = null,
				HashedPassword = null,
                AccountPaused = false
			};

			List<Client> response = this.GetAll().ToList();
			response.Add(undefinedClient);

			return response;
		}

		public Client GetByPK(Guid clientGuid)
		{
			if (Guid.Empty == clientGuid)
			{ return new Client(); }

			try
			{
				Client daClient = new Client();
				using (PSS2012DataContext context = this.DataContext)
				{
					daClient = (
						from items in context.Clients
						where items.ClientGuid == clientGuid
						select items).SingleOrDefault();
				}

				if (null == daClient)
				{
					throw new DataAccessException("Client no longer exists.");
				}

				return daClient;
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public Client GetByEmail(string email)
		{
			if (string.IsNullOrEmpty(email))
			{ return new Client(); }

			try
			{
				Client daClient = new Client();
				using (PSS2012DataContext context = this.DataContext)
				{
					daClient = (
						from items in context.Clients
						where items.Email == email
						select items).Where(x=>x.IsActive==true).SingleOrDefault();
				}

				if (null == daClient)
				{
					return null;
				}

				return daClient;
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		/// <summary>
		/// Inserts client business entity into the data store.
		/// </summary>
		/// <param name="entity">The client business entity to insert.</param>
		/// <returns>The client identifier.</returns>
		public Client Insert(Client entity)
		{
			//@@NEW - changed return type to entity type.
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					entity.ClientGuid = Guid.NewGuid();
					entity.ClientID = 1;

					context.Clients.InsertOnSubmit(entity);
					context.SubmitChanges();
				}

				//@@NEW - returning full entity.
				return entity;
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public void Update(Client entity)
		{
			if (Guid.Empty == entity.ClientGuid)
				throw new PrimaryKeyMissingException("Client", entity, "update");

			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to update.
					//Client clientToUpdate = GetByPK(entity.ClientGuid);

                    Client clientToUpdate = context.Clients.Single(c => c.ClientGuid == entity.ClientGuid);

					// Set the new values.
					//clientToUpdate.ClientID = entity.ClientID;
					clientToUpdate.ClientName = entity.ClientName;
					clientToUpdate.PhoneNumber = entity.PhoneNumber;
					clientToUpdate.Email = entity.Email;
					clientToUpdate.Address = entity.Address;
					clientToUpdate.CityStateZipGuid = entity.CityStateZipGuid;
					clientToUpdate.PaymentInfoGuid = entity.PaymentInfoGuid;
					clientToUpdate.FederatedID = entity.FederatedID;
					clientToUpdate.FederatedKey = entity.FederatedKey;
					clientToUpdate.FederatedIDProvider = entity.FederatedIDProvider;
					clientToUpdate.Username = entity.Username;
                    clientToUpdate.HashedPassword = entity.HashedPassword;
                    clientToUpdate.AccountPaused = entity.AccountPaused;
                    clientToUpdate.IsWaiverd = entity.IsWaiverd;
                    clientToUpdate.FreeDays = entity.FreeDays;
                    clientToUpdate.Credits = entity.Credits;
                    clientToUpdate.IsSuspended = entity.IsSuspended;
                    clientToUpdate.IsFlagged = entity.IsFlagged;
                    clientToUpdate.IsActive = entity.IsActive;
                    
					// Perform the update.
					context.SubmitChanges();
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public void Delete(Guid clientGuid)
		{
			if (Guid.Empty == clientGuid)
				throw new PrimaryKeyMissingException("Client", clientGuid, "delete");
            
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to delete.
					Client clientToDelete = GetByPK(clientGuid);

					// Peform the delete.
					context.Clients.DeleteOnSubmit(clientToDelete);
					context.SubmitChanges();
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public IOrderedQueryable<Client> GetForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to delete.
					return
						(from items in context.Clients
						 where items.CityStateZipGuid == cityStateZipGuid
						 select items).OrderBy(client => client.ClientName);
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		public IOrderedQueryable<Client> GetForPaymentInfoByPaymentInfoGuid(Guid paymentInfoGuid)
		{
			try
			{
				using (PSS2012DataContext context = DataContext)
				{
					// Get the entity to delete.
					return
						(from items in context.Clients
						 where items.PaymentInfoGuid == paymentInfoGuid
						 select items).OrderBy(client => client.ClientName);
				}
			}
			catch (System.Data.SqlClient.SqlException ex)
			{
				throw this.HandleSqlException(ex);
			}
		}

		#endregion


		#region Private Handle Exception Methods
		private Exception HandleSqlException(System.Data.SqlClient.SqlException ex)
		{
			if (ex.Message.Contains("An error has occurred while establishing a connection to the server.  When connecting to SQL Server 2005, this failure may be caused by the fact that under the default settings SQL Server does not allow remote connections."))
			{
				return new Exception("Could not establish a connection to SQL Server. See inner exception for more details. Perhaps Windows Firewall has blocked the connection to SQL Server. Check online resources to find out how to allow port exceptions.", ex);
			}
			else if (ex.Message.Contains("Invalid object name 'dbo.Client'"))
			{
				return new TableDoesNotExistException("PSS2012", "Client", ex);
			}
			else if (ex.Message.Contains("Invalid column name"))
			{
				return new ColumnDoesNotExistException("PSS2012", "Client", ex);
			}
			else if (ex.Message.Contains("String or binary data would be truncated"))
			{
				return new DataAccessException("String or number is too long or too big for the database.", ex);
			}
			else if (ex.Message.Contains("The DELETE statement conflicted with the REFERENCE constraint"))
			{
				Regex errorRx = new Regex("The DELETE statement conflicted with the REFERENCE constraint \"(?<constraint>[\\x20-\\x7E-[\"]]{1,})\". The conflict occurred in database \"(?<db>[\\x20-\\x7E-[\"]]{1,50})\", table \"dbo.(?<jtn>[\\x20-\\x7E-[\"]]{1,50})\"");
				Match errorMatch = errorRx.Match(ex.Message);
				if (errorMatch.Success)
				{
					return new RowReferencedElsewhereException(errorMatch.Groups["db"].Value, "Client", errorMatch.Groups["jtn"].Value, ex);
				}
				else
				{ return ex; }
			}
			else
			{
				return ex;
			}
		}
		#endregion
	}
}