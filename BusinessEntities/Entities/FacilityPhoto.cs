/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: NamedBusinessEntity (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:02 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities
{
    /// <summary>
    /// FacilityPhoto Business Entity
    /// </summary>
    public partial class FacilityPhoto : IComparer<FacilityPhoto>
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of FacilityPhoto as a business entity.
        /// </summary>
        public FacilityPhoto()
        {
        }

        /// <summary>
        /// Initializes a new instance of FacilityPhoto as a business entity with its properties that are not auto assigned.
        /// </summary>
		/// <param name="facilityPhotoGuid">Photo Guid</param>
		/// <param name="photoUri">Photo Uri</param>
		/// <param name="facilityGuid">Facility Guid</param>
        public FacilityPhoto(Guid facilityPhotoGuid, string photoUri, Guid facilityGuid)
        {
			_facilityPhotoGuid = facilityPhotoGuid;
			_photoUri = photoUri;
			_facilityGuid = facilityGuid;
        }
        #endregion


        #region Overridden Methods
        public override string ToString()
        {
            System.Text.StringBuilder result = new System.Text.StringBuilder();

            result.AppendFormat("FacilityPhotoGuid: {0}. ", this.FacilityPhotoGuid.ToString());
            result.AppendFormat("PhotoUri: {0}. ", this.PhotoUri);
            result.AppendFormat("FacilityGuid: {0}. ", this.FacilityGuid.ToString());

            return result.ToString();
        }
        #endregion


        #region IComparer<FacilityPhoto> Members

        /// <summary>
        /// Compares two FacilityPhotos. Compares PK and id fields separate from other fields.
        /// </summary>
        /// <param name="a">FacilityPhoto A</param>
        /// <param name="b">FacilityPhoto B</param>
        /// <returns>If the PK or ID are different, returns 1.
        /// If any other fields are different, returns -1.
        /// If all fields are identical, return 0.</returns>
        public int Compare(FacilityPhoto a, FacilityPhoto b)
        {
            if (a._facilityPhotoGuid != b._facilityPhotoGuid)
            { return 1; }

            if (a._photoUri != b._photoUri)
            { return -1; }

            if (a._facilityGuid != b._facilityGuid)
            { return -1; }

            return 0;
        }

        #endregion


        #region Public Properties

        /// <summary>
        /// Gets or sets the Photo Guid.
        /// </summary>
		public Guid FacilityPhotoGuid
		{
			get { return _facilityPhotoGuid; }
			set { _facilityPhotoGuid = value; }
		}
	
        /// <summary>
        /// Gets or sets the Photo Uri.
        /// </summary>
        [DataType(DataType.ImageUrl)]
        [Display(Name = "Photo url", Prompt = "Put photo url here")]
		public string PhotoUri
		{
			get { return _photoUri; }
			set { _photoUri = value; }
		}
	
        /// <summary>
        /// Gets or sets the Facility Guid.
        /// </summary>
		public Guid FacilityGuid
		{
			get { return _facilityGuid; }
			set { _facilityGuid = value; }
		}
	
        #endregion


        #region Private Fields

        /// <summary>
        /// The Photo Guid field.
        /// </summary>
		private Guid _facilityPhotoGuid = Guid.Empty;

        /// <summary>
        /// The Photo Uri field.
        /// </summary>
		private string _photoUri = null;

        /// <summary>
        /// The Facility Guid field.
        /// </summary>
		private Guid _facilityGuid = Guid.Empty;

        #endregion
    }
  
}