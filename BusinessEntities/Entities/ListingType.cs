/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: NamedBusinessEntity (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:02 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities
{
    /// <summary>
    /// ListingType Business Entity
    /// </summary>
    public partial class ListingType : IComparer<ListingType>
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of ListingType as a business entity.
        /// </summary>
        public ListingType()
        {
        }

        /// <summary>
        /// Initializes a new instance of ListingType as a business entity with its properties that are not auto assigned.
        /// </summary>
		/// <param name="listingTypeGuid">Listing Type Guid</param>
		/// <param name="listingTypeName">Listing Type Name</param>
        /// <param name="listingTypePrice">Listing Type Price</param>
        public ListingType(Guid listingTypeGuid, string listingTypeName,decimal listingTypePrice)
        {
			_listingTypeGuid = listingTypeGuid;
			_listingTypeName = listingTypeName;
            _listingTypePrice = listingTypePrice;
        }
        #endregion


        #region Overridden Methods
        public override string ToString()
        {
            System.Text.StringBuilder result = new System.Text.StringBuilder();

            result.AppendFormat("ListingTypeGuid: {0}. ", this.ListingTypeGuid.ToString());
            result.AppendFormat("ListingTypeName: {0}. ", this.ListingTypeName);
            result.AppendFormat("ListingTpePrice: {0}. ", this.ListingTypePrice);
            return result.ToString();
        }
        #endregion


        #region IComparer<ListingType> Members

        /// <summary>
        /// Compares two ListingTypes. Compares PK and id fields separate from other fields.
        /// </summary>
        /// <param name="a">ListingType A</param>
        /// <param name="b">ListingType B</param>
        /// <returns>If the PK or ID are different, returns 1.
        /// If any other fields are different, returns -1.
        /// If all fields are identical, return 0.</returns>
        public int Compare(ListingType a, ListingType b)
        {
            if (a._listingTypeGuid != b._listingTypeGuid)
            { return 1; }

            if (a._listingTypeName != b._listingTypeName)
            { return -1; }

            return 0;
        }

        #endregion


        #region Public Properties

        /// <summary>
        /// Gets or sets the Listing Type Guid.
        /// </summary>
		public Guid ListingTypeGuid
		{
			get { return _listingTypeGuid; }
			set { _listingTypeGuid = value; }
		}
	
        /// <summary>
        /// Gets or sets the Listing Type Name.
        /// </summary>
		public string ListingTypeName
		{
			get { return _listingTypeName; }
			set { _listingTypeName = value; }
		}

        /// <summary>
        /// Gets or sets the Listing Type Name.
        /// </summary>
        public decimal ListingTypePrice
        {
            get { return _listingTypePrice; }
            set { _listingTypePrice = value; }
        }
       

        #endregion


        #region Private Fields

        /// <summary>
        /// The Listing Type Guid field.
        /// </summary>
		private Guid _listingTypeGuid = Guid.Empty;

        /// <summary>
        /// The Listing Type Name field.
        /// </summary>
		private string _listingTypeName = null;
        /// <summary>
        /// The Listing Type Price field.
        /// </summary>
        private decimal _listingTypePrice ;
        #endregion
    }
  
}