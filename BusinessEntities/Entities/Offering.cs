/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: NamedBusinessEntity (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:02 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities
{
    /// <summary>
    /// Offering Business Entity
    /// </summary>
    public partial class Offering : IComparer<Offering>
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of Offering as a business entity.
        /// </summary>
        public Offering()
        {
        }

        /// <summary>
        /// Initializes a new instance of Offering as a business entity with its properties that are not auto assigned.
        /// </summary>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <param name="offeringID">Offering ID</param>
		/// <param name="offeringName">Offering Name</param>
        public Offering(Guid offeringGuid, int offeringID, string offeringName)
        {
			_offeringGuid = offeringGuid;
			_offeringID = offeringID;
			_offeringName = offeringName;
        }
        #endregion


        #region Overridden Methods
        public override string ToString()
        {
            System.Text.StringBuilder result = new System.Text.StringBuilder();

            result.AppendFormat("OfferingGuid: {0}. ", this.OfferingGuid.ToString());
            result.AppendFormat("OfferingID: {0}. ", this.OfferingID.ToString());
            result.AppendFormat("OfferingName: {0}. ", this.OfferingName);

            return result.ToString();
        }
        #endregion


        #region IComparer<Offering> Members

        /// <summary>
        /// Compares two Offerings. Compares PK and id fields separate from other fields.
        /// </summary>
        /// <param name="a">Offering A</param>
        /// <param name="b">Offering B</param>
        /// <returns>If the PK or ID are different, returns 1.
        /// If any other fields are different, returns -1.
        /// If all fields are identical, return 0.</returns>
        public int Compare(Offering a, Offering b)
        {
            if (a._offeringGuid != b._offeringGuid)
            { return 1; }

            if (a._offeringID != b._offeringID)
            { return 1; }

            if (a._offeringName != b._offeringName)
            { return -1; }

            return 0;
        }

        #endregion


        #region Public Properties

        /// <summary>
        /// Gets or sets the Offering Guid.
        /// </summary>
		public Guid OfferingGuid
		{
			get { return _offeringGuid; }
			set { _offeringGuid = value; }
		}
	
        /// <summary>
        /// Gets or sets the Offering ID.
        /// </summary>
		public int OfferingID
		{
			get { return _offeringID; }
			set { _offeringID = value; }
		}
	
        /// <summary>
        /// Gets or sets the Offering Name.
        /// </summary>
		public string OfferingName
		{
			get { return _offeringName; }
			set { _offeringName = value; }
		}
	
        #endregion


        #region Private Fields

        /// <summary>
        /// The Offering Guid field.
        /// </summary>
		private Guid _offeringGuid = Guid.Empty;

        /// <summary>
        /// The Offering ID field.
        /// </summary>
		private int _offeringID = 0;

        /// <summary>
        /// The Offering Name field.
        /// </summary>
		private string _offeringName = null;

        #endregion
    }
  
}