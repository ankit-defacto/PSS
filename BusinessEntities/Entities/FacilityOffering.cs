/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: NamedBusinessEntity (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:02 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;

namespace ConcordMfg.PremierSeniorSolutions.WebService.BusinessEntities
{
    /// <summary>
    /// FacilityOffering Business Entity
    /// </summary>
    public partial class FacilityOffering : IComparer<FacilityOffering>
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of FacilityOffering as a business entity.
        /// </summary>
        public FacilityOffering()
        {
        }

        /// <summary>
        /// Initializes a new instance of FacilityOffering as a business entity with only the required properties.
        /// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="offeringGuid">Offering Guid</param>
        public FacilityOffering(Guid facilityGuid, Guid offeringGuid)
        {
			_facilityGuid = facilityGuid;
			_offeringGuid = offeringGuid;
        }

        /// <summary>
        /// Initializes a new instance of FacilityOffering as a business entity with its properties that are not auto assigned.
        /// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <param name="isChecked">Is Checked</param>
        public FacilityOffering(Guid facilityGuid, Guid offeringGuid, bool isChecked)
        {
			_facilityGuid = facilityGuid;
			_offeringGuid = offeringGuid;
			_isChecked = isChecked;
        }
        #endregion


        #region Overridden Methods
        public override string ToString()
        {
            System.Text.StringBuilder result = new System.Text.StringBuilder();

            result.AppendFormat("FacilityGuid: {0}. ", this.FacilityGuid.ToString());
            result.AppendFormat("OfferingGuid: {0}. ", this.OfferingGuid.ToString());
            result.AppendFormat("IsChecked: {0}. ", this.IsChecked.ToString());

            return result.ToString();
        }
        #endregion


        #region IComparer<FacilityOffering> Members

        /// <summary>
        /// Compares two FacilityOfferings. Compares PK and id fields separate from other fields.
        /// </summary>
        /// <param name="a">FacilityOffering A</param>
        /// <param name="b">FacilityOffering B</param>
        /// <returns>If the PK or ID are different, returns 1.
        /// If any other fields are different, returns -1.
        /// If all fields are identical, return 0.</returns>
        public int Compare(FacilityOffering a, FacilityOffering b)
        {
            if (a._facilityGuid != b._facilityGuid)
            { return 1; }

            if (a._offeringGuid != b._offeringGuid)
            { return 1; }

            if (a._isChecked != b._isChecked)
            { return -1; }

            return 0;
        }

        #endregion


        #region Public Properties

        /// <summary>
        /// Gets or sets the Facility Guid.
        /// </summary>
		public Guid FacilityGuid
		{
			get { return _facilityGuid; }
			set { _facilityGuid = value; }
		}
	
        /// <summary>
        /// Gets or sets the Offering Guid.
        /// </summary>
		public Guid OfferingGuid
		{
			get { return _offeringGuid; }
			set { _offeringGuid = value; }
		}
	
        /// <summary>
        /// Gets or sets the Is Checked.
        /// </summary>
		public bool IsChecked
		{
			get { return _isChecked; }
			set { _isChecked = value; }
		}
	
        #endregion


        #region Private Fields

        /// <summary>
        /// The Facility Guid field.
        /// </summary>
		private Guid _facilityGuid = Guid.Empty;

        /// <summary>
        /// The Offering Guid field.
        /// </summary>
		private Guid _offeringGuid = Guid.Empty;

        /// <summary>
        /// The Is Checked field.
        /// </summary>
		private bool _isChecked = false;

        #endregion
    }
  
}