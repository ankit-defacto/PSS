/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: JoinCollection (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:18 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections;
using System.Collections.Generic;
using ISNet.WebUI.DataSource;

namespace ConcordMfg.PremierSeniorSolutions.Client.Models
{
	/// <summary>
	/// The collection of FacilityWithCityStateZip.
	/// </summary>
	public class FacilityWithCityStateZipCollection : CollectionBase, IHierarchicalList, IObjectRelations
	{
		#region Constructors
		/// <summary>
		/// Initializes a new instance of the FacilityWithCityStateZipCollection class for the UI tier.
		/// </summary>
		public FacilityWithCityStateZipCollection()
		{
		}

		/// <summary>
		/// Initializes a new instance of the FacilityWithCityStateZipCollection class for the UI tier
		/// given a list of facilitiesWithCityStateZip.
		/// </summary>
		/// <param name="facilityWithCityStateZipList">The facilitiesWithCityStateZip.</param>
		public FacilityWithCityStateZipCollection(IEnumerable<FacilityWithCityStateZip> facilityWithCityStateZipList)
		{
			foreach (FacilityWithCityStateZip facilityWithCityStateZip in facilityWithCityStateZipList)
			{
				this.Add(facilityWithCityStateZip);
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Adds a FacilityWithCityStateZip to the collection.
		/// </summary>
		/// <param name="facilityWithCityStateZip">The facilityWithCityStateZip to add.</param>
		public void Add(FacilityWithCityStateZip facilityWithCityStateZip)
		{
			//facilityWithCityStateZip.Owner = this;
			List.Add(facilityWithCityStateZip);
		}

		/// <summary>
		/// Removes FacilityWithCityStateZip at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>true, if the removal was successful; otherwise, false.</returns>
		public bool Remove(int index)
		{
			try
			{
				List.RemoveAt(index);
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes FacilityWithCityStateZip from the collection.
		/// </summary>
		/// <param name="facilityWithCityStateZip">The facilityWithCityStateZip to remove.</param>
		public void Remove(FacilityWithCityStateZip facilityWithCityStateZip)
		{
			List.Remove(facilityWithCityStateZip);
		}

		/// <summary>
		/// Gets FacilityWithCityStateZip at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>The facilityWithCityStateZip.</returns>
		public FacilityWithCityStateZip Item(int index)
		{
			return List[index] as FacilityWithCityStateZip;
		}

		/// <summary>
		/// Retrieves FacilityWithCityStateZip for .
		/// </summary>
		
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
		/// <returns>FacilityWithCityStateZip that contains the identifiers.</returns>
		public FacilityWithCityStateZip FindByID(Guid facilityGuid, Guid cityStateZipGuid)
		{
			foreach (FacilityWithCityStateZip facilityWithCityStateZip in this.InnerList)
			{
				if (facilityWithCityStateZip.FacilityGuid == facilityGuid && facilityWithCityStateZip.CityStateZipGuid == cityStateZipGuid)
					return facilityWithCityStateZip;
			}
			return null;
		}
		#endregion

		#region IHierarchicalList Members

		/// <summary>
		/// Gets the item type.
		/// </summary>
		public Type ItemType
		{
			get { return typeof(FacilityWithCityStateZip); }
		}

		#endregion

		#region IObjectRelations Members

		/// <summary>
		/// Gets the relations array from ObjectRelations.
		/// </summary>
		public ArrayList Relations
		{
			get
			{
				ArrayList relations = new ArrayList();

				relations.Add(new ISDataSourceObjectRelation(
					typeof(FacilityWithCityStateZipCollection), "CityStateZipGuid",
					"Facilities", typeof(FacilityCollection), "CityStateZipGuid"));

				return relations;
			}
		}

		#endregion
	}
}