/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: JoinCollection (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:18 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections;
using System.Collections.Generic;
using ISNet.WebUI.DataSource;

namespace ConcordMfg.PremierSeniorSolutions.Client.Models
{
	/// <summary>
	/// The collection of FacilityWithOffering.
	/// </summary>
	public class FacilityWithOfferingCollection : CollectionBase, IHierarchicalList, IObjectRelations
	{
		#region Constructors
		/// <summary>
		/// Initializes a new instance of the FacilityWithOfferingCollection class for the UI tier.
		/// </summary>
		public FacilityWithOfferingCollection()
		{
		}

		/// <summary>
		/// Initializes a new instance of the FacilityWithOfferingCollection class for the UI tier
		/// given a list of facilitiesWithOffering.
		/// </summary>
		/// <param name="facilityWithOfferingList">The facilitiesWithOffering.</param>
		public FacilityWithOfferingCollection(IEnumerable<FacilityWithOffering> facilityWithOfferingList)
		{
			foreach (FacilityWithOffering facilityWithOffering in facilityWithOfferingList)
			{
				this.Add(facilityWithOffering);
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Adds a FacilityWithOffering to the collection.
		/// </summary>
		/// <param name="facilityWithOffering">The facilityWithOffering to add.</param>
		public void Add(FacilityWithOffering facilityWithOffering)
		{
			//facilityWithOffering.Owner = this;
			List.Add(facilityWithOffering);
		}

		/// <summary>
		/// Removes FacilityWithOffering at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>true, if the removal was successful; otherwise, false.</returns>
		public bool Remove(int index)
		{
			try
			{
				List.RemoveAt(index);
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes FacilityWithOffering from the collection.
		/// </summary>
		/// <param name="facilityWithOffering">The facilityWithOffering to remove.</param>
		public void Remove(FacilityWithOffering facilityWithOffering)
		{
			List.Remove(facilityWithOffering);
		}

		/// <summary>
		/// Gets FacilityWithOffering at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>The facilityWithOffering.</returns>
		public FacilityWithOffering Item(int index)
		{
			return List[index] as FacilityWithOffering;
		}

		/// <summary>
		/// Retrieves FacilityWithOffering for .
		/// </summary>
		
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <returns>FacilityWithOffering that contains the identifiers.</returns>
		public FacilityWithOffering FindByID(Guid facilityGuid, Guid offeringGuid)
		{
			foreach (FacilityWithOffering facilityWithOffering in this.InnerList)
			{
				if (facilityWithOffering.FacilityGuid == facilityGuid && facilityWithOffering.OfferingGuid == offeringGuid)
					return facilityWithOffering;
			}
			return null;
		}
		#endregion

		#region IHierarchicalList Members

		/// <summary>
		/// Gets the item type.
		/// </summary>
		public Type ItemType
		{
			get { return typeof(FacilityWithOffering); }
		}

		#endregion

		#region IObjectRelations Members

		/// <summary>
		/// Gets the relations array from ObjectRelations.
		/// </summary>
		public ArrayList Relations
		{
			get
			{
				ArrayList relations = new ArrayList();

				relations.Add(new ISDataSourceObjectRelation(
					typeof(FacilityWithOfferingCollection), "OfferingGuid",
					"Facilities", typeof(FacilityCollection), "OfferingGuid"));

				return relations;
			}
		}

		#endregion
	}
}