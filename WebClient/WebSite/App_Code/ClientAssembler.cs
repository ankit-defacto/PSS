/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: ClientAssembler (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:14 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections.Generic;
using SP = ConcordMfg.PremierSeniorSolutions.WebService.Client;
using VM = ConcordMfg.PremierSeniorSolutions.Client.ViewModels;

namespace ConcordMfg.PremierSeniorSolutions.Client.Tools
{
	internal static class ClientAssembler
	{
		#region CityStateZip Assembler Methods
		/// <summary>
		/// Converts the CityStateZip ViewModel into a CityStateZip Model to be used with the service.
		/// </summary>
		/// <param name="cityStateZip">ViewModel to convert.</param>
		/// <returns>CityStateZipReturns null if parameter is null. Otherwise, returns Model to be used with the service.</returns>
		public static SP.CityStateZipSvc.CityStateZip ToModel(this VM.CityStateZipViewModel cityStateZip)
		{
			if (null == cityStateZip) { return null; }

			SP.CityStateZipSvc.CityStateZip result = new SP.CityStateZipSvc.CityStateZip()
			{
				CityStateZipGuid = cityStateZip.CityStateZipGuid,
				City = cityStateZip.City,
				State = cityStateZip.State,
				ZipCode = cityStateZip.ZipCode,
			};

			return result;
		}

		/// <summary>
		/// Converts a CityStateZip service proxy object to a WebClient object.
		/// </summary>
		/// <param name="cityStateZip">CityStateZip service proxy</param>
		/// <returns>CityStateZip WebClient object to be used in the UI.</returns>
		public static VM.CityStateZipViewModel ToViewModel(this SP.CityStateZipSvc.CityStateZip cityStateZip)
		{
			VM.CityStateZipViewModel result = new VM.CityStateZipViewModel()
			{
				CityStateZipGuid = cityStateZip.CityStateZipGuid,
				City = cityStateZip.City,
				State = cityStateZip.State,
				ZipCode = cityStateZip.ZipCode,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of CityStateZip service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="cityStateZips">CityStateZip service proxy objects</param>
		/// <returns>List of CityStateZip WebClient objects to be used in the UI.</returns>
		public static List<VM.CityStateZipViewModel> ToViewModels(this IEnumerable<SP.CityStateZipSvc.CityStateZip> cityStateZips)
		{
			List<VM.CityStateZipViewModel> result = new List<VM.CityStateZipViewModel>();

			foreach (SP.CityStateZipSvc.CityStateZip cityStateZip in cityStateZips)
			{
				result.Add(cityStateZip.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of CityStateZip service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="cityStateZips">CityStateZip service proxy objects</param>
		/// <returns>List of CityStateZip WebClient objects to be used in the UI.</returns>
		public static List<VM.CityStateZipViewModel> ToViewModels(this SP.CityStateZipSvc.CityStateZip[] cityStateZips)
		{
			List<VM.CityStateZipViewModel> result = new List<VM.CityStateZipViewModel>();

			foreach (SP.CityStateZipSvc.CityStateZip cityStateZip in cityStateZips)
			{
				result.Add(cityStateZip.ToViewModel());
			}

			return result;
		}
		#endregion


		#region Click Assembler Methods
		/// <summary>
		/// Converts the Click ViewModel into a Click Model to be used with the service.
		/// </summary>
		/// <param name="click">ViewModel to convert.</param>
		/// <returns>ClickReturns null if parameter is null. Otherwise, returns Model to be used with the service.</returns>
		public static SP.ClickSvc.Click ToModel(this VM.ClickViewModel click)
		{
			if (null == click) { return null; }

			SP.ClickSvc.Click result = new SP.ClickSvc.Click()
			{
				ClickGuid = click.ClickGuid,
				FacilityGuid = click.FacilityGuid,
				ListingTypeGuid = click.ListingTypeGuid,
				TimeStamp = click.TimeStamp,
			};

			return result;
		}

		/// <summary>
		/// Converts a Click service proxy object to a WebClient object.
		/// </summary>
		/// <param name="click">Click service proxy</param>
		/// <returns>Click WebClient object to be used in the UI.</returns>
		public static VM.ClickViewModel ToViewModel(this SP.ClickSvc.Click click)
		{
			VM.ClickViewModel result = new VM.ClickViewModel()
			{
				ClickGuid = click.ClickGuid,
				FacilityGuid = click.FacilityGuid,
				ListingTypeGuid = click.ListingTypeGuid,
				TimeStamp = click.TimeStamp,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of Click service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="clicks">Click service proxy objects</param>
		/// <returns>List of Click WebClient objects to be used in the UI.</returns>
		public static List<VM.ClickViewModel> ToViewModels(this IEnumerable<SP.ClickSvc.Click> clicks)
		{
			List<VM.ClickViewModel> result = new List<VM.ClickViewModel>();

			foreach (SP.ClickSvc.Click click in clicks)
			{
				result.Add(click.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of Click service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="clicks">Click service proxy objects</param>
		/// <returns>List of Click WebClient objects to be used in the UI.</returns>
		public static List<VM.ClickViewModel> ToViewModels(this SP.ClickSvc.Click[] clicks)
		{
			List<VM.ClickViewModel> result = new List<VM.ClickViewModel>();

			foreach (SP.ClickSvc.Click click in clicks)
			{
				result.Add(click.ToViewModel());
			}

			return result;
		}
		#endregion


		#region Client Assembler Methods
		/// <summary>
		/// Converts the Client ViewModel into a Client Model to be used with the service.
		/// </summary>
		/// <param name="client">ViewModel to convert.</param>
		/// <returns>ClientReturns null if parameter is null. Otherwise, returns Model to be used with the service.</returns>
		public static SP.ClientSvc.Client ToModel(this VM.ClientViewModel client)
		{
			if (null == client) { return null; }

			SP.ClientSvc.Client result = new SP.ClientSvc.Client()
			{
				ClientGuid = client.ClientGuid,
				ClientID = client.ClientID,
				ClientName = client.ClientName,
				PhoneNumber = client.PhoneNumber,
				Email = client.Email,
				Address = client.Address,
				CityStateZipGuid = client.CityStateZipGuid,
				PaymentInfoGuid = client.PaymentInfoGuid,
				FederatedID = client.FederatedID,
				FederatedKey = client.FederatedKey,
				FederatedIDProvider = client.FederatedIDProvider,
				Username = client.Username,
				HashedPassword = client.HashedPassword,
			};

			return result;
		}

		/// <summary>
		/// Converts a Client service proxy object to a WebClient object.
		/// </summary>
		/// <param name="client">Client service proxy</param>
		/// <returns>Client WebClient object to be used in the UI.</returns>
		public static VM.ClientViewModel ToViewModel(this SP.ClientSvc.Client client)
		{
			VM.ClientViewModel result = new VM.ClientViewModel()
			{
				ClientGuid = client.ClientGuid,
				ClientID = client.ClientID,
				ClientName = client.ClientName,
				PhoneNumber = client.PhoneNumber,
				Email = client.Email,
				Address = client.Address,
				CityStateZipGuid = client.CityStateZipGuid,
				PaymentInfoGuid = client.PaymentInfoGuid,
				FederatedID = client.FederatedID,
				FederatedKey = client.FederatedKey,
				FederatedIDProvider = client.FederatedIDProvider,
				Username = client.Username,
				HashedPassword = client.HashedPassword,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of Client service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="clients">Client service proxy objects</param>
		/// <returns>List of Client WebClient objects to be used in the UI.</returns>
		public static List<VM.ClientViewModel> ToViewModels(this IEnumerable<SP.ClientSvc.Client> clients)
		{
			List<VM.ClientViewModel> result = new List<VM.ClientViewModel>();

			foreach (SP.ClientSvc.Client client in clients)
			{
				result.Add(client.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of Client service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="clients">Client service proxy objects</param>
		/// <returns>List of Client WebClient objects to be used in the UI.</returns>
		public static List<VM.ClientViewModel> ToViewModels(this SP.ClientSvc.Client[] clients)
		{
			List<VM.ClientViewModel> result = new List<VM.ClientViewModel>();

			foreach (SP.ClientSvc.Client client in clients)
			{
				result.Add(client.ToViewModel());
			}

			return result;
		}
		#endregion


		#region ClientAudit Assembler Methods
		/// <summary>
		/// Converts the ClientAudit ViewModel into a ClientAudit Model to be used with the service.
		/// </summary>
		/// <param name="clientAudit">ViewModel to convert.</param>
		/// <returns>ClientAuditReturns null if parameter is null. Otherwise, returns Model to be used with the service.</returns>
		public static SP.ClientAuditSvc.ClientAudit ToModel(this VM.ClientAuditViewModel clientAudit)
		{
			if (null == clientAudit) { return null; }

			SP.ClientAuditSvc.ClientAudit result = new SP.ClientAuditSvc.ClientAudit()
			{
				ClientAuditGuid = clientAudit.ClientAuditGuid,
				ClientGuid = clientAudit.ClientGuid,
				ClientID = clientAudit.ClientID,
				ClientName = clientAudit.ClientName,
				PhoneNumber = clientAudit.PhoneNumber,
				Email = clientAudit.Email,
				Address = clientAudit.Address,
				CityStateZipGuid = clientAudit.CityStateZipGuid,
				PaymentInfoGuid = clientAudit.PaymentInfoGuid,
				FederatedID = clientAudit.FederatedID,
				FederatedKey = clientAudit.FederatedKey,
				FederatedIDProvider = clientAudit.FederatedIDProvider,
				Username = clientAudit.Username,
				HashedPassword = clientAudit.HashedPassword,
				DateModified = clientAudit.DateModified,
			};

			return result;
		}

		/// <summary>
		/// Converts a ClientAudit service proxy object to a WebClient object.
		/// </summary>
		/// <param name="clientAudit">ClientAudit service proxy</param>
		/// <returns>ClientAudit WebClient object to be used in the UI.</returns>
		public static VM.ClientAuditViewModel ToViewModel(this SP.ClientAuditSvc.ClientAudit clientAudit)
		{
			VM.ClientAuditViewModel result = new VM.ClientAuditViewModel()
			{
				ClientAuditGuid = clientAudit.ClientAuditGuid,
				ClientGuid = clientAudit.ClientGuid,
				ClientID = clientAudit.ClientID,
				ClientName = clientAudit.ClientName,
				PhoneNumber = clientAudit.PhoneNumber,
				Email = clientAudit.Email,
				Address = clientAudit.Address,
				CityStateZipGuid = clientAudit.CityStateZipGuid,
				PaymentInfoGuid = clientAudit.PaymentInfoGuid,
				FederatedID = clientAudit.FederatedID,
				FederatedKey = clientAudit.FederatedKey,
				FederatedIDProvider = clientAudit.FederatedIDProvider,
				Username = clientAudit.Username,
				HashedPassword = clientAudit.HashedPassword,
				DateModified = clientAudit.DateModified,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of ClientAudit service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="clientAudits">ClientAudit service proxy objects</param>
		/// <returns>List of ClientAudit WebClient objects to be used in the UI.</returns>
		public static List<VM.ClientAuditViewModel> ToViewModels(this IEnumerable<SP.ClientAuditSvc.ClientAudit> clientAudits)
		{
			List<VM.ClientAuditViewModel> result = new List<VM.ClientAuditViewModel>();

			foreach (SP.ClientAuditSvc.ClientAudit clientAudit in clientAudits)
			{
				result.Add(clientAudit.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of ClientAudit service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="clientAudits">ClientAudit service proxy objects</param>
		/// <returns>List of ClientAudit WebClient objects to be used in the UI.</returns>
		public static List<VM.ClientAuditViewModel> ToViewModels(this SP.ClientAuditSvc.ClientAudit[] clientAudits)
		{
			List<VM.ClientAuditViewModel> result = new List<VM.ClientAuditViewModel>();

			foreach (SP.ClientAuditSvc.ClientAudit clientAudit in clientAudits)
			{
				result.Add(clientAudit.ToViewModel());
			}

			return result;
		}
		#endregion


		#region Facility Assembler Methods
		/// <summary>
		/// Converts the Facility ViewModel into a Facility Model to be used with the service.
		/// </summary>
		/// <param name="facility">ViewModel to convert.</param>
		/// <returns>FacilityReturns null if parameter is null. Otherwise, returns Model to be used with the service.</returns>
		public static SP.FacilitySvc.Facility ToModel(this VM.FacilityViewModel facility)
		{
			if (null == facility) { return null; }

			SP.FacilitySvc.Facility result = new SP.FacilitySvc.Facility()
			{
				FacilityGuid = facility.FacilityGuid,
				FacilityID = facility.FacilityID,
				FacilityName = facility.FacilityName,
				Exerpt = facility.Exerpt,
				Description = facility.Description,
				Address = facility.Address,
				CityStateZipGuid = facility.CityStateZipGuid,
				PhoneNumber = facility.PhoneNumber,
				Email = facility.Email,
				Website = facility.Website,
				ClientGuid = facility.ClientGuid,
				ListingTypeGuid = facility.ListingTypeGuid,
				PublicPhotoFileUri = facility.PublicPhotoFileUri,
			};

			return result;
		}

		/// <summary>
		/// Converts a Facility service proxy object to a WebClient object.
		/// </summary>
		/// <param name="facility">Facility service proxy</param>
		/// <returns>Facility WebClient object to be used in the UI.</returns>
		public static VM.FacilityViewModel ToViewModel(this SP.FacilitySvc.Facility facility)
		{
			VM.FacilityViewModel result = new VM.FacilityViewModel()
			{
				FacilityGuid = facility.FacilityGuid,
				FacilityID = facility.FacilityID,
				FacilityName = facility.FacilityName,
				Exerpt = facility.Exerpt,
				Description = facility.Description,
				Address = facility.Address,
				CityStateZipGuid = facility.CityStateZipGuid,
				PhoneNumber = facility.PhoneNumber,
				Email = facility.Email,
				Website = facility.Website,
				ClientGuid = facility.ClientGuid,
				ListingTypeGuid = facility.ListingTypeGuid,
				PublicPhotoFileUri = facility.PublicPhotoFileUri,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of Facility service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="facilities">Facility service proxy objects</param>
		/// <returns>List of Facility WebClient objects to be used in the UI.</returns>
		public static List<VM.FacilityViewModel> ToViewModels(this IEnumerable<SP.FacilitySvc.Facility> facilities)
		{
			List<VM.FacilityViewModel> result = new List<VM.FacilityViewModel>();

			foreach (SP.FacilitySvc.Facility facility in facilities)
			{
				result.Add(facility.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of Facility service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="facilities">Facility service proxy objects</param>
		/// <returns>List of Facility WebClient objects to be used in the UI.</returns>
		public static List<VM.FacilityViewModel> ToViewModels(this SP.FacilitySvc.Facility[] facilities)
		{
			List<VM.FacilityViewModel> result = new List<VM.FacilityViewModel>();

			foreach (SP.FacilitySvc.Facility facility in facilities)
			{
				result.Add(facility.ToViewModel());
			}

			return result;
		}
		#endregion


		#region FacilityAudit Assembler Methods
		/// <summary>
		/// Converts the FacilityAudit ViewModel into a FacilityAudit Model to be used with the service.
		/// </summary>
		/// <param name="facilityAudit">ViewModel to convert.</param>
		/// <returns>FacilityAuditReturns null if parameter is null. Otherwise, returns Model to be used with the service.</returns>
		public static SP.FacilityAuditSvc.FacilityAudit ToModel(this VM.FacilityAuditViewModel facilityAudit)
		{
			if (null == facilityAudit) { return null; }

			SP.FacilityAuditSvc.FacilityAudit result = new SP.FacilityAuditSvc.FacilityAudit()
			{
				FacilityAuditGuid = facilityAudit.FacilityAuditGuid,
				FacilityGuid = facilityAudit.FacilityGuid,
				FacilityID = facilityAudit.FacilityID,
				FacilityName = facilityAudit.FacilityName,
				Exerpt = facilityAudit.Exerpt,
				Description = facilityAudit.Description,
				Address = facilityAudit.Address,
				CityStateZipGuid = facilityAudit.CityStateZipGuid,
				PhoneNumber = facilityAudit.PhoneNumber,
				Email = facilityAudit.Email,
				Website = facilityAudit.Website,
				ClientGuid = facilityAudit.ClientGuid,
				ListingTypeGuid = facilityAudit.ListingTypeGuid,
				PublicPhotoFileUri = facilityAudit.PublicPhotoFileUri,
				DateModified = facilityAudit.DateModified,
			};

			return result;
		}

		/// <summary>
		/// Converts a FacilityAudit service proxy object to a WebClient object.
		/// </summary>
		/// <param name="facilityAudit">FacilityAudit service proxy</param>
		/// <returns>FacilityAudit WebClient object to be used in the UI.</returns>
		public static VM.FacilityAuditViewModel ToViewModel(this SP.FacilityAuditSvc.FacilityAudit facilityAudit)
		{
			VM.FacilityAuditViewModel result = new VM.FacilityAuditViewModel()
			{
				FacilityAuditGuid = facilityAudit.FacilityAuditGuid,
				FacilityGuid = facilityAudit.FacilityGuid,
				FacilityID = facilityAudit.FacilityID,
				FacilityName = facilityAudit.FacilityName,
				Exerpt = facilityAudit.Exerpt,
				Description = facilityAudit.Description,
				Address = facilityAudit.Address,
				CityStateZipGuid = facilityAudit.CityStateZipGuid,
				PhoneNumber = facilityAudit.PhoneNumber,
				Email = facilityAudit.Email,
				Website = facilityAudit.Website,
				ClientGuid = facilityAudit.ClientGuid,
				ListingTypeGuid = facilityAudit.ListingTypeGuid,
				PublicPhotoFileUri = facilityAudit.PublicPhotoFileUri,
				DateModified = facilityAudit.DateModified,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of FacilityAudit service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="facilityAudits">FacilityAudit service proxy objects</param>
		/// <returns>List of FacilityAudit WebClient objects to be used in the UI.</returns>
		public static List<VM.FacilityAuditViewModel> ToViewModels(this IEnumerable<SP.FacilityAuditSvc.FacilityAudit> facilityAudits)
		{
			List<VM.FacilityAuditViewModel> result = new List<VM.FacilityAuditViewModel>();

			foreach (SP.FacilityAuditSvc.FacilityAudit facilityAudit in facilityAudits)
			{
				result.Add(facilityAudit.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of FacilityAudit service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="facilityAudits">FacilityAudit service proxy objects</param>
		/// <returns>List of FacilityAudit WebClient objects to be used in the UI.</returns>
		public static List<VM.FacilityAuditViewModel> ToViewModels(this SP.FacilityAuditSvc.FacilityAudit[] facilityAudits)
		{
			List<VM.FacilityAuditViewModel> result = new List<VM.FacilityAuditViewModel>();

			foreach (SP.FacilityAuditSvc.FacilityAudit facilityAudit in facilityAudits)
			{
				result.Add(facilityAudit.ToViewModel());
			}

			return result;
		}
		#endregion


		#region ListingType Assembler Methods
		/// <summary>
		/// Converts the ListingType ViewModel into a ListingType Model to be used with the service.
		/// </summary>
		/// <param name="listingType">ViewModel to convert.</param>
		/// <returns>ListingTypeReturns null if parameter is null. Otherwise, returns Model to be used with the service.</returns>
		public static SP.ListingTypeSvc.ListingType ToModel(this VM.ListingTypeViewModel listingType)
		{
			if (null == listingType) { return null; }

			SP.ListingTypeSvc.ListingType result = new SP.ListingTypeSvc.ListingType()
			{
				ListingTypeGuid = listingType.ListingTypeGuid,
				ListingTypeName = listingType.ListingTypeName,
			};

			return result;
		}

		/// <summary>
		/// Converts a ListingType service proxy object to a WebClient object.
		/// </summary>
		/// <param name="listingType">ListingType service proxy</param>
		/// <returns>ListingType WebClient object to be used in the UI.</returns>
		public static VM.ListingTypeViewModel ToViewModel(this SP.ListingTypeSvc.ListingType listingType)
		{
			VM.ListingTypeViewModel result = new VM.ListingTypeViewModel()
			{
				ListingTypeGuid = listingType.ListingTypeGuid,
				ListingTypeName = listingType.ListingTypeName,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of ListingType service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="listingTypes">ListingType service proxy objects</param>
		/// <returns>List of ListingType WebClient objects to be used in the UI.</returns>
		public static List<VM.ListingTypeViewModel> ToViewModels(this IEnumerable<SP.ListingTypeSvc.ListingType> listingTypes)
		{
			List<VM.ListingTypeViewModel> result = new List<VM.ListingTypeViewModel>();

			foreach (SP.ListingTypeSvc.ListingType listingType in listingTypes)
			{
				result.Add(listingType.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of ListingType service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="listingTypes">ListingType service proxy objects</param>
		/// <returns>List of ListingType WebClient objects to be used in the UI.</returns>
		public static List<VM.ListingTypeViewModel> ToViewModels(this SP.ListingTypeSvc.ListingType[] listingTypes)
		{
			List<VM.ListingTypeViewModel> result = new List<VM.ListingTypeViewModel>();

			foreach (SP.ListingTypeSvc.ListingType listingType in listingTypes)
			{
				result.Add(listingType.ToViewModel());
			}

			return result;
		}
		#endregion


		#region Offering Assembler Methods
		/// <summary>
		/// Converts the Offering ViewModel into a Offering Model to be used with the service.
		/// </summary>
		/// <param name="offering">ViewModel to convert.</param>
		/// <returns>OfferingReturns null if parameter is null. Otherwise, returns Model to be used with the service.</returns>
		public static SP.OfferingSvc.Offering ToModel(this VM.OfferingViewModel offering)
		{
			if (null == offering) { return null; }

			SP.OfferingSvc.Offering result = new SP.OfferingSvc.Offering()
			{
				OfferingGuid = offering.OfferingGuid,
				OfferingID = offering.OfferingID,
				OfferingName = offering.OfferingName,
			};

			return result;
		}

		/// <summary>
		/// Converts a Offering service proxy object to a WebClient object.
		/// </summary>
		/// <param name="offering">Offering service proxy</param>
		/// <returns>Offering WebClient object to be used in the UI.</returns>
		public static VM.OfferingViewModel ToViewModel(this SP.OfferingSvc.Offering offering)
		{
			VM.OfferingViewModel result = new VM.OfferingViewModel()
			{
				OfferingGuid = offering.OfferingGuid,
				OfferingID = offering.OfferingID,
				OfferingName = offering.OfferingName,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of Offering service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="offerings">Offering service proxy objects</param>
		/// <returns>List of Offering WebClient objects to be used in the UI.</returns>
		public static List<VM.OfferingViewModel> ToViewModels(this IEnumerable<SP.OfferingSvc.Offering> offerings)
		{
			List<VM.OfferingViewModel> result = new List<VM.OfferingViewModel>();

			foreach (SP.OfferingSvc.Offering offering in offerings)
			{
				result.Add(offering.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of Offering service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="offerings">Offering service proxy objects</param>
		/// <returns>List of Offering WebClient objects to be used in the UI.</returns>
		public static List<VM.OfferingViewModel> ToViewModels(this SP.OfferingSvc.Offering[] offerings)
		{
			List<VM.OfferingViewModel> result = new List<VM.OfferingViewModel>();

			foreach (SP.OfferingSvc.Offering offering in offerings)
			{
				result.Add(offering.ToViewModel());
			}

			return result;
		}
		#endregion


		#region PaymentInfo Assembler Methods
		/// <summary>
		/// Converts the PaymentInfo ViewModel into a PaymentInfo Model to be used with the service.
		/// </summary>
		/// <param name="paymentInfo">ViewModel to convert.</param>
		/// <returns>PaymentInfoReturns null if parameter is null. Otherwise, returns Model to be used with the service.</returns>
		public static SP.PaymentInfoSvc.PaymentInfo ToModel(this VM.PaymentInfoViewModel paymentInfo)
		{
			if (null == paymentInfo) { return null; }

			SP.PaymentInfoSvc.PaymentInfo result = new SP.PaymentInfoSvc.PaymentInfo()
			{
				PaymentInfoGuid = paymentInfo.PaymentInfoGuid,
				PaymentInfoID = paymentInfo.PaymentInfoID,
				AmazonToken = paymentInfo.AmazonToken,
			};

			return result;
		}

		/// <summary>
		/// Converts a PaymentInfo service proxy object to a WebClient object.
		/// </summary>
		/// <param name="paymentInfo">PaymentInfo service proxy</param>
		/// <returns>PaymentInfo WebClient object to be used in the UI.</returns>
		public static VM.PaymentInfoViewModel ToViewModel(this SP.PaymentInfoSvc.PaymentInfo paymentInfo)
		{
			VM.PaymentInfoViewModel result = new VM.PaymentInfoViewModel()
			{
				PaymentInfoGuid = paymentInfo.PaymentInfoGuid,
				PaymentInfoID = paymentInfo.PaymentInfoID,
				AmazonToken = paymentInfo.AmazonToken,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of PaymentInfo service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="paymentInfos">PaymentInfo service proxy objects</param>
		/// <returns>List of PaymentInfo WebClient objects to be used in the UI.</returns>
		public static List<VM.PaymentInfoViewModel> ToViewModels(this IEnumerable<SP.PaymentInfoSvc.PaymentInfo> paymentInfos)
		{
			List<VM.PaymentInfoViewModel> result = new List<VM.PaymentInfoViewModel>();

			foreach (SP.PaymentInfoSvc.PaymentInfo paymentInfo in paymentInfos)
			{
				result.Add(paymentInfo.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of PaymentInfo service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="paymentInfos">PaymentInfo service proxy objects</param>
		/// <returns>List of PaymentInfo WebClient objects to be used in the UI.</returns>
		public static List<VM.PaymentInfoViewModel> ToViewModels(this SP.PaymentInfoSvc.PaymentInfo[] paymentInfos)
		{
			List<VM.PaymentInfoViewModel> result = new List<VM.PaymentInfoViewModel>();

			foreach (SP.PaymentInfoSvc.PaymentInfo paymentInfo in paymentInfos)
			{
				result.Add(paymentInfo.ToViewModel());
			}

			return result;
		}
		#endregion


		#region PaymentInfoAudit Assembler Methods
		/// <summary>
		/// Converts the PaymentInfoAudit ViewModel into a PaymentInfoAudit Model to be used with the service.
		/// </summary>
		/// <param name="paymentInfoAudit">ViewModel to convert.</param>
		/// <returns>PaymentInfoAuditReturns null if parameter is null. Otherwise, returns Model to be used with the service.</returns>
		public static SP.PaymentInfoAuditSvc.PaymentInfoAudit ToModel(this VM.PaymentInfoAuditViewModel paymentInfoAudit)
		{
			if (null == paymentInfoAudit) { return null; }

			SP.PaymentInfoAuditSvc.PaymentInfoAudit result = new SP.PaymentInfoAuditSvc.PaymentInfoAudit()
			{
				PaymentInfoAuditGuid = paymentInfoAudit.PaymentInfoAuditGuid,
				PaymentInfoGuid = paymentInfoAudit.PaymentInfoGuid,
				PaymentInfoID = paymentInfoAudit.PaymentInfoID,
				AmazonToken = paymentInfoAudit.AmazonToken,
				DateModified = paymentInfoAudit.DateModified,
			};

			return result;
		}

		/// <summary>
		/// Converts a PaymentInfoAudit service proxy object to a WebClient object.
		/// </summary>
		/// <param name="paymentInfoAudit">PaymentInfoAudit service proxy</param>
		/// <returns>PaymentInfoAudit WebClient object to be used in the UI.</returns>
		public static VM.PaymentInfoAuditViewModel ToViewModel(this SP.PaymentInfoAuditSvc.PaymentInfoAudit paymentInfoAudit)
		{
			VM.PaymentInfoAuditViewModel result = new VM.PaymentInfoAuditViewModel()
			{
				PaymentInfoAuditGuid = paymentInfoAudit.PaymentInfoAuditGuid,
				PaymentInfoGuid = paymentInfoAudit.PaymentInfoGuid,
				PaymentInfoID = paymentInfoAudit.PaymentInfoID,
				AmazonToken = paymentInfoAudit.AmazonToken,
				DateModified = paymentInfoAudit.DateModified,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of PaymentInfoAudit service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="paymentInfoAudits">PaymentInfoAudit service proxy objects</param>
		/// <returns>List of PaymentInfoAudit WebClient objects to be used in the UI.</returns>
		public static List<VM.PaymentInfoAuditViewModel> ToViewModels(this IEnumerable<SP.PaymentInfoAuditSvc.PaymentInfoAudit> paymentInfoAudits)
		{
			List<VM.PaymentInfoAuditViewModel> result = new List<VM.PaymentInfoAuditViewModel>();

			foreach (SP.PaymentInfoAuditSvc.PaymentInfoAudit paymentInfoAudit in paymentInfoAudits)
			{
				result.Add(paymentInfoAudit.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of PaymentInfoAudit service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="paymentInfoAudits">PaymentInfoAudit service proxy objects</param>
		/// <returns>List of PaymentInfoAudit WebClient objects to be used in the UI.</returns>
		public static List<VM.PaymentInfoAuditViewModel> ToViewModels(this SP.PaymentInfoAuditSvc.PaymentInfoAudit[] paymentInfoAudits)
		{
			List<VM.PaymentInfoAuditViewModel> result = new List<VM.PaymentInfoAuditViewModel>();

			foreach (SP.PaymentInfoAuditSvc.PaymentInfoAudit paymentInfoAudit in paymentInfoAudits)
			{
				result.Add(paymentInfoAudit.ToViewModel());
			}

			return result;
		}
		#endregion


		#region FacilityPhoto Assembler Methods
		/// <summary>
		/// Converts the FacilityPhoto ViewModel into a FacilityPhoto Model to be used with the service.
		/// </summary>
		/// <param name="facilityPhoto">ViewModel to convert.</param>
		/// <returns>FacilityPhotoReturns null if parameter is null. Otherwise, returns Model to be used with the service.</returns>
		public static SP.FacilityPhotoSvc.FacilityPhoto ToModel(this VM.FacilityPhotoViewModel facilityPhoto)
		{
			if (null == facilityPhoto) { return null; }

			SP.FacilityPhotoSvc.FacilityPhoto result = new SP.FacilityPhotoSvc.FacilityPhoto()
			{
				FacilityPhotoGuid = facilityPhoto.FacilityPhotoGuid,
				PhotoUri = facilityPhoto.PhotoUri,
				FacilityGuid = facilityPhoto.FacilityGuid,
			};

			return result;
		}

		/// <summary>
		/// Converts a FacilityPhoto service proxy object to a WebClient object.
		/// </summary>
		/// <param name="facilityPhoto">FacilityPhoto service proxy</param>
		/// <returns>FacilityPhoto WebClient object to be used in the UI.</returns>
		public static VM.FacilityPhotoViewModel ToViewModel(this SP.FacilityPhotoSvc.FacilityPhoto facilityPhoto)
		{
			VM.FacilityPhotoViewModel result = new VM.FacilityPhotoViewModel()
			{
				FacilityPhotoGuid = facilityPhoto.FacilityPhotoGuid,
				PhotoUri = facilityPhoto.PhotoUri,
				FacilityGuid = facilityPhoto.FacilityGuid,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of FacilityPhoto service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="facilityPhotos">FacilityPhoto service proxy objects</param>
		/// <returns>List of FacilityPhoto WebClient objects to be used in the UI.</returns>
		public static List<VM.FacilityPhotoViewModel> ToViewModels(this IEnumerable<SP.FacilityPhotoSvc.FacilityPhoto> facilityPhotos)
		{
			List<VM.FacilityPhotoViewModel> result = new List<VM.FacilityPhotoViewModel>();

			foreach (SP.FacilityPhotoSvc.FacilityPhoto facilityPhoto in facilityPhotos)
			{
				result.Add(facilityPhoto.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of FacilityPhoto service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="facilityPhotos">FacilityPhoto service proxy objects</param>
		/// <returns>List of FacilityPhoto WebClient objects to be used in the UI.</returns>
		public static List<VM.FacilityPhotoViewModel> ToViewModels(this SP.FacilityPhotoSvc.FacilityPhoto[] facilityPhotos)
		{
			List<VM.FacilityPhotoViewModel> result = new List<VM.FacilityPhotoViewModel>();

			foreach (SP.FacilityPhotoSvc.FacilityPhoto facilityPhoto in facilityPhotos)
			{
				result.Add(facilityPhoto.ToViewModel());
			}

			return result;
		}
		#endregion


		#region CityStateZipWithFacility Assembler Methods
		/// <summary>
		/// Converts a CityStateZipWithFacility service proxy object to a WebClient object.
		/// </summary>
		/// <param name=""> service proxy</param>
		/// <returns>CityStateZipWithFacility WebClient object to be used in the UI.</returns>
		public static VM.CityStateZipWithFacility ToViewModel(this SP.CityStateZipWithFacilitySvc.CityStateZipWithFacility cityStateZipWithFacility)
		{
			VM.CityStateZipWithFacility result = new VM.CityStateZipWithFacility()
			{
				CityStateZipGuid = cityStateZipWithFacility.CityStateZipGuid,
				City = cityStateZipWithFacility.City,
				State = cityStateZipWithFacility.State,
				ZipCode = cityStateZipWithFacility.ZipCode,
				FacilityGuid = cityStateZipWithFacility.FacilityGuid,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of CityStateZipWithFacility service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="cityStateZipsWithFacility">CityStateZipWithFacility service proxy objects</param>
		/// <returns>List of CityStateZipWithFacility WebClient objects to be used in the UI.</returns>
		public static List<VM.CityStateZipWithFacility> ToViewModels(this IEnumerable<SP.CityStateZipWithFacilitySvc.CityStateZipWithFacility> cityStateZipsWithFacility)
		{
			List<VM.CityStateZipWithFacility> result = new List<VM.CityStateZipWithFacility>();

			foreach (SP.CityStateZipWithFacilitySvc.CityStateZipWithFacility cityStateZipWithFacility in cityStateZipsWithFacility)
			{
				result.Add(cityStateZipWithFacility.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of CityStateZipWithFacility service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="cityStateZipsWithFacility">CityStateZipWithFacility service proxy objects</param>
		/// <returns>List of CityStateZipWithFacility WebClient objects to be used in the UI.</returns>
		public static List<VM.CityStateZipWithFacility> ToViewModels(this SP.CityStateZipWithFacilitySvc.CityStateZipWithFacility[] cityStateZipsWithFacility)
		{
			List<VM.CityStateZipWithFacility> result = new List<VM.CityStateZipWithFacility>();

			foreach (SP.CityStateZipWithFacilitySvc.CityStateZipWithFacility cityStateZipWithFacility in cityStateZipsWithFacility)
			{
				result.Add(cityStateZipWithFacility.ToViewModel());
			}

			return result;
		}
		#endregion


		#region FacilityWithCityStateZip Assembler Methods
		/// <summary>
		/// Converts a FacilityWithCityStateZip service proxy object to a WebClient object.
		/// </summary>
		/// <param name=""> service proxy</param>
		/// <returns>FacilityWithCityStateZip WebClient object to be used in the UI.</returns>
		public static VM.FacilityWithCityStateZip ToViewModel(this SP.FacilityWithCityStateZipSvc.FacilityWithCityStateZip facilityWithCityStateZip)
		{
			VM.FacilityWithCityStateZip result = new VM.FacilityWithCityStateZip()
			{
				FacilityGuid = facilityWithCityStateZip.FacilityGuid,
				FacilityID = facilityWithCityStateZip.FacilityID,
				FacilityName = facilityWithCityStateZip.FacilityName,
				Exerpt = facilityWithCityStateZip.Exerpt,
				Description = facilityWithCityStateZip.Description,
				Address = facilityWithCityStateZip.Address,
				CityStateZipGuid = facilityWithCityStateZip.CityStateZipGuid,
				PhoneNumber = facilityWithCityStateZip.PhoneNumber,
				Email = facilityWithCityStateZip.Email,
				Website = facilityWithCityStateZip.Website,
				ClientGuid = facilityWithCityStateZip.ClientGuid,
				ListingTypeGuid = facilityWithCityStateZip.ListingTypeGuid,
				PublicPhotoFileUri = facilityWithCityStateZip.PublicPhotoFileUri,
				CityStateZipGuid = facilityWithCityStateZip.CityStateZipGuid,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of FacilityWithCityStateZip service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="facilitiesWithCityStateZip">FacilityWithCityStateZip service proxy objects</param>
		/// <returns>List of FacilityWithCityStateZip WebClient objects to be used in the UI.</returns>
		public static List<VM.FacilityWithCityStateZip> ToViewModels(this IEnumerable<SP.FacilityWithCityStateZipSvc.FacilityWithCityStateZip> facilitiesWithCityStateZip)
		{
			List<VM.FacilityWithCityStateZip> result = new List<VM.FacilityWithCityStateZip>();

			foreach (SP.FacilityWithCityStateZipSvc.FacilityWithCityStateZip facilityWithCityStateZip in facilitiesWithCityStateZip)
			{
				result.Add(facilityWithCityStateZip.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of FacilityWithCityStateZip service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="facilitiesWithCityStateZip">FacilityWithCityStateZip service proxy objects</param>
		/// <returns>List of FacilityWithCityStateZip WebClient objects to be used in the UI.</returns>
		public static List<VM.FacilityWithCityStateZip> ToViewModels(this SP.FacilityWithCityStateZipSvc.FacilityWithCityStateZip[] facilitiesWithCityStateZip)
		{
			List<VM.FacilityWithCityStateZip> result = new List<VM.FacilityWithCityStateZip>();

			foreach (SP.FacilityWithCityStateZipSvc.FacilityWithCityStateZip facilityWithCityStateZip in facilitiesWithCityStateZip)
			{
				result.Add(facilityWithCityStateZip.ToViewModel());
			}

			return result;
		}
		#endregion


		#region FacilityWithOffering Assembler Methods
		/// <summary>
		/// Converts a FacilityWithOffering service proxy object to a WebClient object.
		/// </summary>
		/// <param name=""> service proxy</param>
		/// <returns>FacilityWithOffering WebClient object to be used in the UI.</returns>
		public static VM.FacilityWithOffering ToViewModel(this SP.FacilityWithOfferingSvc.FacilityWithOffering facilityWithOffering)
		{
			VM.FacilityWithOffering result = new VM.FacilityWithOffering()
			{
				FacilityGuid = facilityWithOffering.FacilityGuid,
				FacilityID = facilityWithOffering.FacilityID,
				FacilityName = facilityWithOffering.FacilityName,
				Exerpt = facilityWithOffering.Exerpt,
				Description = facilityWithOffering.Description,
				Address = facilityWithOffering.Address,
				CityStateZipGuid = facilityWithOffering.CityStateZipGuid,
				PhoneNumber = facilityWithOffering.PhoneNumber,
				Email = facilityWithOffering.Email,
				Website = facilityWithOffering.Website,
				ClientGuid = facilityWithOffering.ClientGuid,
				ListingTypeGuid = facilityWithOffering.ListingTypeGuid,
				PublicPhotoFileUri = facilityWithOffering.PublicPhotoFileUri,
				OfferingGuid = facilityWithOffering.OfferingGuid,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of FacilityWithOffering service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="facilitiesWithOffering">FacilityWithOffering service proxy objects</param>
		/// <returns>List of FacilityWithOffering WebClient objects to be used in the UI.</returns>
		public static List<VM.FacilityWithOffering> ToViewModels(this IEnumerable<SP.FacilityWithOfferingSvc.FacilityWithOffering> facilitiesWithOffering)
		{
			List<VM.FacilityWithOffering> result = new List<VM.FacilityWithOffering>();

			foreach (SP.FacilityWithOfferingSvc.FacilityWithOffering facilityWithOffering in facilitiesWithOffering)
			{
				result.Add(facilityWithOffering.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of FacilityWithOffering service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="facilitiesWithOffering">FacilityWithOffering service proxy objects</param>
		/// <returns>List of FacilityWithOffering WebClient objects to be used in the UI.</returns>
		public static List<VM.FacilityWithOffering> ToViewModels(this SP.FacilityWithOfferingSvc.FacilityWithOffering[] facilitiesWithOffering)
		{
			List<VM.FacilityWithOffering> result = new List<VM.FacilityWithOffering>();

			foreach (SP.FacilityWithOfferingSvc.FacilityWithOffering facilityWithOffering in facilitiesWithOffering)
			{
				result.Add(facilityWithOffering.ToViewModel());
			}

			return result;
		}
		#endregion


		#region OfferingWithFacility Assembler Methods
		/// <summary>
		/// Converts a OfferingWithFacility service proxy object to a WebClient object.
		/// </summary>
		/// <param name=""> service proxy</param>
		/// <returns>OfferingWithFacility WebClient object to be used in the UI.</returns>
		public static VM.OfferingWithFacility ToViewModel(this SP.OfferingWithFacilitySvc.OfferingWithFacility offeringWithFacility)
		{
			VM.OfferingWithFacility result = new VM.OfferingWithFacility()
			{
				OfferingGuid = offeringWithFacility.OfferingGuid,
				OfferingID = offeringWithFacility.OfferingID,
				OfferingName = offeringWithFacility.OfferingName,
				FacilityGuid = offeringWithFacility.FacilityGuid,
			};

			return result;
		}

		/// <summary>
		/// Converts an IEnumerable collection of OfferingWithFacility service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="offeringsWithFacility">OfferingWithFacility service proxy objects</param>
		/// <returns>List of OfferingWithFacility WebClient objects to be used in the UI.</returns>
		public static List<VM.OfferingWithFacility> ToViewModels(this IEnumerable<SP.OfferingWithFacilitySvc.OfferingWithFacility> offeringsWithFacility)
		{
			List<VM.OfferingWithFacility> result = new List<VM.OfferingWithFacility>();

			foreach (SP.OfferingWithFacilitySvc.OfferingWithFacility offeringWithFacility in offeringsWithFacility)
			{
				result.Add(offeringWithFacility.ToViewModel());
			}

			return result;
		}

		/// <summary>
		/// Converts an array of OfferingWithFacility service proxy objects to a list of WebClient objects.
		/// </summary>
		/// <param name="offeringsWithFacility">OfferingWithFacility service proxy objects</param>
		/// <returns>List of OfferingWithFacility WebClient objects to be used in the UI.</returns>
		public static List<VM.OfferingWithFacility> ToViewModels(this SP.OfferingWithFacilitySvc.OfferingWithFacility[] offeringsWithFacility)
		{
			List<VM.OfferingWithFacility> result = new List<VM.OfferingWithFacility>();

			foreach (SP.OfferingWithFacilitySvc.OfferingWithFacility offeringWithFacility in offeringsWithFacility)
			{
				result.Add(offeringWithFacility.ToViewModel());
			}

			return result;
		}
		#endregion
	}
}