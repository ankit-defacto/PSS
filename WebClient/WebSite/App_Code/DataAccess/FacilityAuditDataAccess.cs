/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEDataAccess (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:17 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.ComponentModel;
using ConcordMfg.PremierSeniorSolutions.Client.Tools;
using SP = ConcordMfg.PremierSeniorSolutions.WebService.Client;

namespace ConcordMfg.PremierSeniorSolutions.Client.ViewModels
{
	/// <summary>
	/// Access the data for the FacilityAudit class.
	/// </summary>
	// [DataObject]
	public partial class DataAccess
	{
		#region Fields
		private static SP.FacilityAuditSvc.FacilityAuditClient _facilityAuditClient =
			new SP.FacilityAuditSvc.FacilityAuditClient();
		#endregion


		#region Methods
		/// <summary>
		/// Retrieves FacilityAudit from the web service.
		/// </summary>
		/// <returns>A list of all facilityAudit.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static FacilityAuditCollection GetFacilityAudits()
		{
			// Call the service for data.
			SP.FacilityAuditSvc.FacilityAudit[] facilityAudits = _facilityAuditClient.GetAllFacilityAudit();
			// Convert the service proxy object to a View Model object.
			FacilityAuditCollection result = new FacilityAuditCollection(facilityAudits.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves FacilityAudit from the web service.
		/// </summary>
		/// <returns>A list of all facilityAudit.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static FacilityAuditCollection GetFacilityAuditsWithUndefined()
		{
			// Call the service for data.
			SP.FacilityAuditSvc.FacilityAudit[] facilityAudits = _facilityAuditClient.GetAllFacilityAuditWithUndefined();
			// Convert the service proxy object to a View Model object.
			FacilityAuditCollection result = new FacilityAuditCollection(facilityAudits.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves a FacilityAudit from the web service.
		/// </summary>
		/// <param name="facilityAuditGuidStr">The identifier of the FacilityAudit to retrieve.</param>
		/// <returns>A FacilityAudit.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityAudit GetFacilityAudit(string facilityAuditGuidStr)
		{
			// Convert the string into a guid.
			Guid facilityAuditGuid = new Guid(facilityAuditGuidStr);
			// Call the sister method.
			return GetFacilityAudit(facilityAuditGuid);
		}

		/// <summary>
		/// Retrieves a FacilityAudit from the web service.
		/// </summary>
		/// <param name="facilityAuditGuid">The identifier of the FacilityAudit to retrieve.</param>
		/// <returns>A FacilityAudit.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityAudit GetFacilityAudit(Guid facilityAuditGuid)
		{
			// Call the service for data.
			SP.FacilityAuditSvc.FacilityAudit facilityAudit = _facilityAuditClient.GetFacilityAuditByFacilityAuditGuid(facilityAuditGuid);
			// Convert and return the service proxy object to a view model object.
			return facilityAudit.ToViewModel();
		}

		/// <summary>
		/// Inserts FacilityAudit through the web service.
		/// </summary>
		/// <param name="facilityAudit">FacilityAudit to insert.</param>
		/// <returns>1, if the insert was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Insert, true)]
		public static int InsertFacilityAudit(FacilityAuditViewModel facilityAudit)
		{
			if (null == facilityAudit)
			{
				throw new Exception("Cannot insert FacilityAudit. The facilityAudit object was null. Cannot be empty.");
			}

			try
			{
				// Convert the view model object to a service proxy object.
				SP.FacilityAuditSvc.FacilityAudit request = facilityAudit.ToModel();

				// Call the service insert method.
				_facilityAuditClient.InsertFacilityAudit(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		[DataObjectMethod(DataObjectMethodType.Insert)]
		public static int InsertFacilityAudit(Guid facilityGuid, int facilityID, string facilityName, string exerpt, string description, string address, Guid cityStateZipGuid, string phoneNumber, string email, string website, Guid clientGuid, Guid listingTypeGuid, string publicPhotoFileUri, DateTime dateModified)
		{
			try 
			{
				// Create the service proxy object and populate it.
				SP.FacilityAuditSvc.FacilityAudit request = new SP.FacilityAuditSvc.FacilityAudit();

				request.FacilityAuditGuid = Guid.Empty;
				request.FacilityGuid = facilityGuid;
				request.FacilityID = facilityID;
				request.FacilityName = facilityName;
				request.Exerpt = exerpt;
				request.Description = description;
				request.Address = address;
				request.CityStateZipGuid = cityStateZipGuid;
				request.PhoneNumber = phoneNumber;
				request.Email = email;
				request.Website = website;
				request.ClientGuid = clientGuid;
				request.ListingTypeGuid = listingTypeGuid;
				request.PublicPhotoFileUri = publicPhotoFileUri;
				request.DateModified = dateModified;

				// Call the service insert method.
				_facilityAuditClient.InsertFacilityAudit(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Updates FacilityAudit through the web service.
		/// </summary>
		/// <param name="facilityAudit">FacilityAudit to update.</param>
		/// <returns>1, if the update was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Update, true)]
		public static int UpdateFacilityAudit(FacilityAuditViewModel facilityAudit)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.FacilityAuditSvc.FacilityAudit request = facilityAudit.ToModel();

				// Call the service update method.
				_facilityAuditClient.UpdateFacilityAudit(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Deletes FacilityAudit through the web service.
		/// </summary>
		/// <param name="facilityAudit">FacilityAudit to delete.</param>
		/// <returns>1, if the delete was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Delete, true)]
		public static int DeleteFacilityAudit(FacilityAuditViewModel facilityAudit)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.FacilityAuditSvc.FacilityAudit request = facilityAudit.ToModel();

				// Call the service delete method.
				_facilityAuditClient.DeleteFacilityAudit(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		#endregion


		#region FacilityFacilityAudit Methods
		/// <summary>
		/// Retrieves FacilityAudit collection for a Facility from the web service.
		/// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <returns>FacilityAudit collection for a facility.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityAuditCollection GetFacilityAuditsForFacilityByFacilityGuid(Guid facilityGuid)
		{
			SP.FacilityAuditSvc.FacilityAudit[] facilityAudits = _facilityAuditClient.GetFacilityAuditsForFacilityByFacilityGuid(facilityGuid);
			FacilityAuditCollection result = new FacilityAuditCollection();
			foreach (SP.FacilityAuditSvc.FacilityAudit facilityAudit
				in facilityAudits)
			{
				FacilityAuditViewModel viewModel = new FacilityAuditViewModel(facilityAudit.FacilityAuditGuid, facilityAudit.FacilityGuid, facilityAudit.FacilityID, facilityAudit.FacilityName, facilityAudit.Exerpt, facilityAudit.Description, facilityAudit.Address, facilityAudit.CityStateZipGuid, facilityAudit.PhoneNumber, facilityAudit.Email, facilityAudit.Website, facilityAudit.ClientGuid, facilityAudit.ListingTypeGuid, facilityAudit.PublicPhotoFileUri, facilityAudit.DateModified);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion


		#region CityStateZipFacilityAudit Methods
		/// <summary>
		/// Retrieves FacilityAudit collection for a CityStateZip from the web service.
		/// </summary>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
		/// <returns>FacilityAudit collection for a cityStateZip.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityAuditCollection GetFacilityAuditsForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			SP.FacilityAuditSvc.FacilityAudit[] facilityAudits = _facilityAuditClient.GetFacilityAuditsForCityStateZipByCityStateZipGuid(cityStateZipGuid);
			FacilityAuditCollection result = new FacilityAuditCollection();
			foreach (SP.FacilityAuditSvc.FacilityAudit facilityAudit
				in facilityAudits)
			{
				FacilityAuditViewModel viewModel = new FacilityAuditViewModel(facilityAudit.FacilityAuditGuid, facilityAudit.FacilityGuid, facilityAudit.FacilityID, facilityAudit.FacilityName, facilityAudit.Exerpt, facilityAudit.Description, facilityAudit.Address, facilityAudit.CityStateZipGuid, facilityAudit.PhoneNumber, facilityAudit.Email, facilityAudit.Website, facilityAudit.ClientGuid, facilityAudit.ListingTypeGuid, facilityAudit.PublicPhotoFileUri, facilityAudit.DateModified);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion


		#region ClientFacilityAudit Methods
		/// <summary>
		/// Retrieves FacilityAudit collection for a Client from the web service.
		/// </summary>
		/// <param name="clientGuid">Client Guid</param>
		/// <returns>FacilityAudit collection for a client.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityAuditCollection GetFacilityAuditsForClientByClientGuid(Guid clientGuid)
		{
			SP.FacilityAuditSvc.FacilityAudit[] facilityAudits = _facilityAuditClient.GetFacilityAuditsForClientByClientGuid(clientGuid);
			FacilityAuditCollection result = new FacilityAuditCollection();
			foreach (SP.FacilityAuditSvc.FacilityAudit facilityAudit
				in facilityAudits)
			{
				FacilityAuditViewModel viewModel = new FacilityAuditViewModel(facilityAudit.FacilityAuditGuid, facilityAudit.FacilityGuid, facilityAudit.FacilityID, facilityAudit.FacilityName, facilityAudit.Exerpt, facilityAudit.Description, facilityAudit.Address, facilityAudit.CityStateZipGuid, facilityAudit.PhoneNumber, facilityAudit.Email, facilityAudit.Website, facilityAudit.ClientGuid, facilityAudit.ListingTypeGuid, facilityAudit.PublicPhotoFileUri, facilityAudit.DateModified);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion


		#region ListingTypeFacilityAudit Methods
		/// <summary>
		/// Retrieves FacilityAudit collection for a ListingType from the web service.
		/// </summary>
		/// <param name="listingTypeGuid">Listing Type Guid</param>
		/// <returns>FacilityAudit collection for a listingType.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityAuditCollection GetFacilityAuditsForListingTypeByListingTypeGuid(Guid listingTypeGuid)
		{
			SP.FacilityAuditSvc.FacilityAudit[] facilityAudits = _facilityAuditClient.GetFacilityAuditsForListingTypeByListingTypeGuid(listingTypeGuid);
			FacilityAuditCollection result = new FacilityAuditCollection();
			foreach (SP.FacilityAuditSvc.FacilityAudit facilityAudit
				in facilityAudits)
			{
				FacilityAuditViewModel viewModel = new FacilityAuditViewModel(facilityAudit.FacilityAuditGuid, facilityAudit.FacilityGuid, facilityAudit.FacilityID, facilityAudit.FacilityName, facilityAudit.Exerpt, facilityAudit.Description, facilityAudit.Address, facilityAudit.CityStateZipGuid, facilityAudit.PhoneNumber, facilityAudit.Email, facilityAudit.Website, facilityAudit.ClientGuid, facilityAudit.ListingTypeGuid, facilityAudit.PublicPhotoFileUri, facilityAudit.DateModified);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion

	}
}