/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEDataAccess (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:17 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.ComponentModel;
using ConcordMfg.PremierSeniorSolutions.Client.Tools;
using SP = ConcordMfg.PremierSeniorSolutions.WebService.Client;

namespace ConcordMfg.PremierSeniorSolutions.Client.ViewModels
{
	/// <summary>
	/// Access the data for the ListingType class.
	/// </summary>
	// [DataObject]
	public partial class DataAccess
	{
		#region Fields
		private static SP.ListingTypeSvc.ListingTypeClient _listingTypeClient =
			new SP.ListingTypeSvc.ListingTypeClient();
		#endregion


		#region Methods
		/// <summary>
		/// Retrieves ListingType from the web service.
		/// </summary>
		/// <returns>A list of all listingType.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static ListingTypeCollection GetListingTypes()
		{
			// Call the service for data.
			SP.ListingTypeSvc.ListingType[] listingTypes = _listingTypeClient.GetAllListingType();
			// Convert the service proxy object to a View Model object.
			ListingTypeCollection result = new ListingTypeCollection(listingTypes.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves ListingType from the web service.
		/// </summary>
		/// <returns>A list of all listingType.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static ListingTypeCollection GetListingTypesWithUndefined()
		{
			// Call the service for data.
			SP.ListingTypeSvc.ListingType[] listingTypes = _listingTypeClient.GetAllListingTypeWithUndefined();
			// Convert the service proxy object to a View Model object.
			ListingTypeCollection result = new ListingTypeCollection(listingTypes.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves a ListingType from the web service.
		/// </summary>
		/// <param name="listingTypeGuidStr">The identifier of the ListingType to retrieve.</param>
		/// <returns>A ListingType.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static ListingType GetListingType(string listingTypeGuidStr)
		{
			// Convert the string into a guid.
			Guid listingTypeGuid = new Guid(listingTypeGuidStr);
			// Call the sister method.
			return GetListingType(listingTypeGuid);
		}

		/// <summary>
		/// Retrieves a ListingType from the web service.
		/// </summary>
		/// <param name="listingTypeGuid">The identifier of the ListingType to retrieve.</param>
		/// <returns>A ListingType.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static ListingType GetListingType(Guid listingTypeGuid)
		{
			// Call the service for data.
			SP.ListingTypeSvc.ListingType listingType = _listingTypeClient.GetListingTypeByListingTypeGuid(listingTypeGuid);
			// Convert and return the service proxy object to a view model object.
			return listingType.ToViewModel();
		}

		/// <summary>
		/// Inserts ListingType through the web service.
		/// </summary>
		/// <param name="listingType">ListingType to insert.</param>
		/// <returns>1, if the insert was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Insert, true)]
		public static int InsertListingType(ListingTypeViewModel listingType)
		{
			if (null == listingType)
			{
				throw new Exception("Cannot insert ListingType. The listingType object was null. Cannot be empty.");
			}

			try
			{
				// Convert the view model object to a service proxy object.
				SP.ListingTypeSvc.ListingType request = listingType.ToModel();

				// Call the service insert method.
				_listingTypeClient.InsertListingType(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		[DataObjectMethod(DataObjectMethodType.Insert)]
		public static int InsertListingType(string listingTypeName)
		{
			try 
			{
				// Create the service proxy object and populate it.
				SP.ListingTypeSvc.ListingType request = new SP.ListingTypeSvc.ListingType();

				request.ListingTypeGuid = Guid.Empty;
				request.ListingTypeName = listingTypeName;

				// Call the service insert method.
				_listingTypeClient.InsertListingType(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Updates ListingType through the web service.
		/// </summary>
		/// <param name="listingType">ListingType to update.</param>
		/// <returns>1, if the update was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Update, true)]
		public static int UpdateListingType(ListingTypeViewModel listingType)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.ListingTypeSvc.ListingType request = listingType.ToModel();

				// Call the service update method.
				_listingTypeClient.UpdateListingType(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Deletes ListingType through the web service.
		/// </summary>
		/// <param name="listingType">ListingType to delete.</param>
		/// <returns>1, if the delete was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Delete, true)]
		public static int DeleteListingType(ListingTypeViewModel listingType)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.ListingTypeSvc.ListingType request = listingType.ToModel();

				// Call the service delete method.
				_listingTypeClient.DeleteListingType(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		#endregion

	}
}