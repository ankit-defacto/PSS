/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEDataAccess (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:17 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.ComponentModel;
using ConcordMfg.PremierSeniorSolutions.Client.Tools;
using SP = ConcordMfg.PremierSeniorSolutions.WebService.Client;

namespace ConcordMfg.PremierSeniorSolutions.Client.ViewModels
{
	/// <summary>
	/// Access the data for the FacilityPhoto class.
	/// </summary>
	// [DataObject]
	public partial class DataAccess
	{
		#region Fields
		private static SP.FacilityPhotoSvc.FacilityPhotoClient _facilityPhotoClient =
			new SP.FacilityPhotoSvc.FacilityPhotoClient();
		#endregion


		#region Methods
		/// <summary>
		/// Retrieves FacilityPhoto from the web service.
		/// </summary>
		/// <returns>A list of all facilityPhoto.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static FacilityPhotoCollection GetFacilityPhotos()
		{
			// Call the service for data.
			SP.FacilityPhotoSvc.FacilityPhoto[] facilityPhotos = _facilityPhotoClient.GetAllFacilityPhoto();
			// Convert the service proxy object to a View Model object.
			FacilityPhotoCollection result = new FacilityPhotoCollection(facilityPhotos.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves FacilityPhoto from the web service.
		/// </summary>
		/// <returns>A list of all facilityPhoto.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static FacilityPhotoCollection GetFacilityPhotosWithUndefined()
		{
			// Call the service for data.
			SP.FacilityPhotoSvc.FacilityPhoto[] facilityPhotos = _facilityPhotoClient.GetAllFacilityPhotoWithUndefined();
			// Convert the service proxy object to a View Model object.
			FacilityPhotoCollection result = new FacilityPhotoCollection(facilityPhotos.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves a FacilityPhoto from the web service.
		/// </summary>
		/// <param name="facilityPhotoGuidStr">The identifier of the FacilityPhoto to retrieve.</param>
		/// <returns>A FacilityPhoto.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityPhoto GetFacilityPhoto(string facilityPhotoGuidStr)
		{
			// Convert the string into a guid.
			Guid facilityPhotoGuid = new Guid(facilityPhotoGuidStr);
			// Call the sister method.
			return GetFacilityPhoto(facilityPhotoGuid);
		}

		/// <summary>
		/// Retrieves a FacilityPhoto from the web service.
		/// </summary>
		/// <param name="facilityPhotoGuid">The identifier of the FacilityPhoto to retrieve.</param>
		/// <returns>A FacilityPhoto.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityPhoto GetFacilityPhoto(Guid facilityPhotoGuid)
		{
			// Call the service for data.
			SP.FacilityPhotoSvc.FacilityPhoto facilityPhoto = _facilityPhotoClient.GetFacilityPhotoByFacilityPhotoGuid(facilityPhotoGuid);
			// Convert and return the service proxy object to a view model object.
			return facilityPhoto.ToViewModel();
		}

		/// <summary>
		/// Inserts FacilityPhoto through the web service.
		/// </summary>
		/// <param name="facilityPhoto">FacilityPhoto to insert.</param>
		/// <returns>1, if the insert was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Insert, true)]
		public static int InsertFacilityPhoto(FacilityPhotoViewModel facilityPhoto)
		{
			if (null == facilityPhoto)
			{
				throw new Exception("Cannot insert FacilityPhoto. The facilityPhoto object was null. Cannot be empty.");
			}

			try
			{
				// Convert the view model object to a service proxy object.
				SP.FacilityPhotoSvc.FacilityPhoto request = facilityPhoto.ToModel();

				// Call the service insert method.
				_facilityPhotoClient.InsertFacilityPhoto(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		[DataObjectMethod(DataObjectMethodType.Insert)]
		public static int InsertFacilityPhoto(string photoUri, Guid facilityGuid)
		{
			try 
			{
				// Create the service proxy object and populate it.
				SP.FacilityPhotoSvc.FacilityPhoto request = new SP.FacilityPhotoSvc.FacilityPhoto();

				request.FacilityPhotoGuid = Guid.Empty;
				request.PhotoUri = photoUri;
				request.FacilityGuid = facilityGuid;

				// Call the service insert method.
				_facilityPhotoClient.InsertFacilityPhoto(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Updates FacilityPhoto through the web service.
		/// </summary>
		/// <param name="facilityPhoto">FacilityPhoto to update.</param>
		/// <returns>1, if the update was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Update, true)]
		public static int UpdateFacilityPhoto(FacilityPhotoViewModel facilityPhoto)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.FacilityPhotoSvc.FacilityPhoto request = facilityPhoto.ToModel();

				// Call the service update method.
				_facilityPhotoClient.UpdateFacilityPhoto(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Deletes FacilityPhoto through the web service.
		/// </summary>
		/// <param name="facilityPhoto">FacilityPhoto to delete.</param>
		/// <returns>1, if the delete was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Delete, true)]
		public static int DeleteFacilityPhoto(FacilityPhotoViewModel facilityPhoto)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.FacilityPhotoSvc.FacilityPhoto request = facilityPhoto.ToModel();

				// Call the service delete method.
				_facilityPhotoClient.DeleteFacilityPhoto(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		#endregion


		#region FacilityFacilityPhoto Methods
		/// <summary>
		/// Retrieves FacilityPhoto collection for a Facility from the web service.
		/// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <returns>FacilityPhoto collection for a facility.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityPhotoCollection GetFacilityPhotosForFacilityByFacilityGuid(Guid facilityGuid)
		{
			SP.FacilityPhotoSvc.FacilityPhoto[] facilityPhotos = _facilityPhotoClient.GetFacilityPhotosForFacilityByFacilityGuid(facilityGuid);
			FacilityPhotoCollection result = new FacilityPhotoCollection();
			foreach (SP.FacilityPhotoSvc.FacilityPhoto facilityPhoto
				in facilityPhotos)
			{
				FacilityPhotoViewModel viewModel = new FacilityPhotoViewModel(facilityPhoto.FacilityPhotoGuid, facilityPhoto.PhotoUri, facilityPhoto.FacilityGuid);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion

	}
}