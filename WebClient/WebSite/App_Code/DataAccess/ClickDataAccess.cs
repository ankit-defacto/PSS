/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEDataAccess (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:17 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.ComponentModel;
using ConcordMfg.PremierSeniorSolutions.Client.Tools;
using SP = ConcordMfg.PremierSeniorSolutions.WebService.Client;

namespace ConcordMfg.PremierSeniorSolutions.Client.ViewModels
{
	/// <summary>
	/// Access the data for the Click class.
	/// </summary>
	// [DataObject]
	public partial class DataAccess
	{
		#region Fields
		private static SP.ClickSvc.ClickClient _clickClient =
			new SP.ClickSvc.ClickClient();
		#endregion


		#region Methods
		/// <summary>
		/// Retrieves Click from the web service.
		/// </summary>
		/// <returns>A list of all click.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static ClickCollection GetClicks()
		{
			// Call the service for data.
			SP.ClickSvc.Click[] clicks = _clickClient.GetAllClick();
			// Convert the service proxy object to a View Model object.
			ClickCollection result = new ClickCollection(clicks.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves Click from the web service.
		/// </summary>
		/// <returns>A list of all click.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static ClickCollection GetClicksWithUndefined()
		{
			// Call the service for data.
			SP.ClickSvc.Click[] clicks = _clickClient.GetAllClickWithUndefined();
			// Convert the service proxy object to a View Model object.
			ClickCollection result = new ClickCollection(clicks.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves a Click from the web service.
		/// </summary>
		/// <param name="clickGuidStr">The identifier of the Click to retrieve.</param>
		/// <returns>A Click.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static Click GetClick(string clickGuidStr)
		{
			// Convert the string into a guid.
			Guid clickGuid = new Guid(clickGuidStr);
			// Call the sister method.
			return GetClick(clickGuid);
		}

		/// <summary>
		/// Retrieves a Click from the web service.
		/// </summary>
		/// <param name="clickGuid">The identifier of the Click to retrieve.</param>
		/// <returns>A Click.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static Click GetClick(Guid clickGuid)
		{
			// Call the service for data.
			SP.ClickSvc.Click click = _clickClient.GetClickByClickGuid(clickGuid);
			// Convert and return the service proxy object to a view model object.
			return click.ToViewModel();
		}

		/// <summary>
		/// Inserts Click through the web service.
		/// </summary>
		/// <param name="click">Click to insert.</param>
		/// <returns>1, if the insert was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Insert, true)]
		public static int InsertClick(ClickViewModel click)
		{
			if (null == click)
			{
				throw new Exception("Cannot insert Click. The click object was null. Cannot be empty.");
			}

			try
			{
				// Convert the view model object to a service proxy object.
				SP.ClickSvc.Click request = click.ToModel();

				// Call the service insert method.
				_clickClient.InsertClick(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		[DataObjectMethod(DataObjectMethodType.Insert)]
		public static int InsertClick(Guid facilityGuid, Guid listingTypeGuid, DateTime timeStamp)
		{
			try 
			{
				// Create the service proxy object and populate it.
				SP.ClickSvc.Click request = new SP.ClickSvc.Click();

				request.ClickGuid = Guid.Empty;
				request.FacilityGuid = facilityGuid;
				request.ListingTypeGuid = listingTypeGuid;
				request.TimeStamp = timeStamp;

				// Call the service insert method.
				_clickClient.InsertClick(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Updates Click through the web service.
		/// </summary>
		/// <param name="click">Click to update.</param>
		/// <returns>1, if the update was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Update, true)]
		public static int UpdateClick(ClickViewModel click)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.ClickSvc.Click request = click.ToModel();

				// Call the service update method.
				_clickClient.UpdateClick(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Deletes Click through the web service.
		/// </summary>
		/// <param name="click">Click to delete.</param>
		/// <returns>1, if the delete was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Delete, true)]
		public static int DeleteClick(ClickViewModel click)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.ClickSvc.Click request = click.ToModel();

				// Call the service delete method.
				_clickClient.DeleteClick(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		#endregion


		#region FacilityClick Methods
		/// <summary>
		/// Retrieves Click collection for a Facility from the web service.
		/// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <returns>Click collection for a facility.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static ClickCollection GetClicksForFacilityByFacilityGuid(Guid facilityGuid)
		{
			SP.ClickSvc.Click[] clicks = _clickClient.GetClicksForFacilityByFacilityGuid(facilityGuid);
			ClickCollection result = new ClickCollection();
			foreach (SP.ClickSvc.Click click
				in clicks)
			{
				ClickViewModel viewModel = new ClickViewModel(click.ClickGuid, click.FacilityGuid, click.ListingTypeGuid, click.TimeStamp);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion


		#region ListingTypeClick Methods
		/// <summary>
		/// Retrieves Click collection for a ListingType from the web service.
		/// </summary>
		/// <param name="listingTypeGuid">Listing Type Guid</param>
		/// <returns>Click collection for a listingType.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static ClickCollection GetClicksForListingTypeByListingTypeGuid(Guid listingTypeGuid)
		{
			SP.ClickSvc.Click[] clicks = _clickClient.GetClicksForListingTypeByListingTypeGuid(listingTypeGuid);
			ClickCollection result = new ClickCollection();
			foreach (SP.ClickSvc.Click click
				in clicks)
			{
				ClickViewModel viewModel = new ClickViewModel(click.ClickGuid, click.FacilityGuid, click.ListingTypeGuid, click.TimeStamp);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion

	}
}