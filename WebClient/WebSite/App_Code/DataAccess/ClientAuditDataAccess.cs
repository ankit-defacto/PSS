/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEDataAccess (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:17 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.ComponentModel;
using ConcordMfg.PremierSeniorSolutions.Client.Tools;
using SP = ConcordMfg.PremierSeniorSolutions.WebService.Client;

namespace ConcordMfg.PremierSeniorSolutions.Client.ViewModels
{
	/// <summary>
	/// Access the data for the ClientAudit class.
	/// </summary>
	// [DataObject]
	public partial class DataAccess
	{
		#region Fields
		private static SP.ClientAuditSvc.ClientAuditClient _clientAuditClient =
			new SP.ClientAuditSvc.ClientAuditClient();
		#endregion


		#region Methods
		/// <summary>
		/// Retrieves ClientAudit from the web service.
		/// </summary>
		/// <returns>A list of all clientAudit.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static ClientAuditCollection GetClientAudits()
		{
			// Call the service for data.
			SP.ClientAuditSvc.ClientAudit[] clientAudits = _clientAuditClient.GetAllClientAudit();
			// Convert the service proxy object to a View Model object.
			ClientAuditCollection result = new ClientAuditCollection(clientAudits.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves ClientAudit from the web service.
		/// </summary>
		/// <returns>A list of all clientAudit.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static ClientAuditCollection GetClientAuditsWithUndefined()
		{
			// Call the service for data.
			SP.ClientAuditSvc.ClientAudit[] clientAudits = _clientAuditClient.GetAllClientAuditWithUndefined();
			// Convert the service proxy object to a View Model object.
			ClientAuditCollection result = new ClientAuditCollection(clientAudits.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves a ClientAudit from the web service.
		/// </summary>
		/// <param name="clientAuditGuidStr">The identifier of the ClientAudit to retrieve.</param>
		/// <returns>A ClientAudit.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static ClientAudit GetClientAudit(string clientAuditGuidStr)
		{
			// Convert the string into a guid.
			Guid clientAuditGuid = new Guid(clientAuditGuidStr);
			// Call the sister method.
			return GetClientAudit(clientAuditGuid);
		}

		/// <summary>
		/// Retrieves a ClientAudit from the web service.
		/// </summary>
		/// <param name="clientAuditGuid">The identifier of the ClientAudit to retrieve.</param>
		/// <returns>A ClientAudit.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static ClientAudit GetClientAudit(Guid clientAuditGuid)
		{
			// Call the service for data.
			SP.ClientAuditSvc.ClientAudit clientAudit = _clientAuditClient.GetClientAuditByClientAuditGuid(clientAuditGuid);
			// Convert and return the service proxy object to a view model object.
			return clientAudit.ToViewModel();
		}

		/// <summary>
		/// Inserts ClientAudit through the web service.
		/// </summary>
		/// <param name="clientAudit">ClientAudit to insert.</param>
		/// <returns>1, if the insert was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Insert, true)]
		public static int InsertClientAudit(ClientAuditViewModel clientAudit)
		{
			if (null == clientAudit)
			{
				throw new Exception("Cannot insert ClientAudit. The clientAudit object was null. Cannot be empty.");
			}

			try
			{
				// Convert the view model object to a service proxy object.
				SP.ClientAuditSvc.ClientAudit request = clientAudit.ToModel();

				// Call the service insert method.
				_clientAuditClient.InsertClientAudit(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		[DataObjectMethod(DataObjectMethodType.Insert)]
		public static int InsertClientAudit(Guid clientGuid, int clientID, string clientName, string phoneNumber, string email, string address, Guid cityStateZipGuid, Guid paymentInfoGuid, string federatedID, string federatedKey, string federatedIDProvider, string username, string hashedPassword, DateTime dateModified)
		{
			try 
			{
				// Create the service proxy object and populate it.
				SP.ClientAuditSvc.ClientAudit request = new SP.ClientAuditSvc.ClientAudit();

				request.ClientAuditGuid = Guid.Empty;
				request.ClientGuid = clientGuid;
				request.ClientID = clientID;
				request.ClientName = clientName;
				request.PhoneNumber = phoneNumber;
				request.Email = email;
				request.Address = address;
				request.CityStateZipGuid = cityStateZipGuid;
				request.PaymentInfoGuid = paymentInfoGuid;
				request.FederatedID = federatedID;
				request.FederatedKey = federatedKey;
				request.FederatedIDProvider = federatedIDProvider;
				request.Username = username;
				request.HashedPassword = hashedPassword;
				request.DateModified = dateModified;

				// Call the service insert method.
				_clientAuditClient.InsertClientAudit(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Updates ClientAudit through the web service.
		/// </summary>
		/// <param name="clientAudit">ClientAudit to update.</param>
		/// <returns>1, if the update was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Update, true)]
		public static int UpdateClientAudit(ClientAuditViewModel clientAudit)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.ClientAuditSvc.ClientAudit request = clientAudit.ToModel();

				// Call the service update method.
				_clientAuditClient.UpdateClientAudit(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Deletes ClientAudit through the web service.
		/// </summary>
		/// <param name="clientAudit">ClientAudit to delete.</param>
		/// <returns>1, if the delete was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Delete, true)]
		public static int DeleteClientAudit(ClientAuditViewModel clientAudit)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.ClientAuditSvc.ClientAudit request = clientAudit.ToModel();

				// Call the service delete method.
				_clientAuditClient.DeleteClientAudit(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		#endregion


		#region ClientClientAudit Methods
		/// <summary>
		/// Retrieves ClientAudit collection for a Client from the web service.
		/// </summary>
		/// <param name="clientGuid">Client Guid</param>
		/// <returns>ClientAudit collection for a client.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static ClientAuditCollection GetClientAuditsForClientByClientGuid(Guid clientGuid)
		{
			SP.ClientAuditSvc.ClientAudit[] clientAudits = _clientAuditClient.GetClientAuditsForClientByClientGuid(clientGuid);
			ClientAuditCollection result = new ClientAuditCollection();
			foreach (SP.ClientAuditSvc.ClientAudit clientAudit
				in clientAudits)
			{
				ClientAuditViewModel viewModel = new ClientAuditViewModel(clientAudit.ClientAuditGuid, clientAudit.ClientGuid, clientAudit.ClientID, clientAudit.ClientName, clientAudit.PhoneNumber, clientAudit.Email, clientAudit.Address, clientAudit.CityStateZipGuid, clientAudit.PaymentInfoGuid, clientAudit.FederatedID, clientAudit.FederatedKey, clientAudit.FederatedIDProvider, clientAudit.Username, clientAudit.HashedPassword, clientAudit.DateModified);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion


		#region CityStateZipClientAudit Methods
		/// <summary>
		/// Retrieves ClientAudit collection for a CityStateZip from the web service.
		/// </summary>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
		/// <returns>ClientAudit collection for a cityStateZip.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static ClientAuditCollection GetClientAuditsForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			SP.ClientAuditSvc.ClientAudit[] clientAudits = _clientAuditClient.GetClientAuditsForCityStateZipByCityStateZipGuid(cityStateZipGuid);
			ClientAuditCollection result = new ClientAuditCollection();
			foreach (SP.ClientAuditSvc.ClientAudit clientAudit
				in clientAudits)
			{
				ClientAuditViewModel viewModel = new ClientAuditViewModel(clientAudit.ClientAuditGuid, clientAudit.ClientGuid, clientAudit.ClientID, clientAudit.ClientName, clientAudit.PhoneNumber, clientAudit.Email, clientAudit.Address, clientAudit.CityStateZipGuid, clientAudit.PaymentInfoGuid, clientAudit.FederatedID, clientAudit.FederatedKey, clientAudit.FederatedIDProvider, clientAudit.Username, clientAudit.HashedPassword, clientAudit.DateModified);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion


		#region PaymentInfoClientAudit Methods
		/// <summary>
		/// Retrieves ClientAudit collection for a PaymentInfo from the web service.
		/// </summary>
		/// <param name="paymentInfoGuid">Payment Info Guid</param>
		/// <returns>ClientAudit collection for a paymentInfo.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static ClientAuditCollection GetClientAuditsForPaymentInfoByPaymentInfoGuid(Guid paymentInfoGuid)
		{
			SP.ClientAuditSvc.ClientAudit[] clientAudits = _clientAuditClient.GetClientAuditsForPaymentInfoByPaymentInfoGuid(paymentInfoGuid);
			ClientAuditCollection result = new ClientAuditCollection();
			foreach (SP.ClientAuditSvc.ClientAudit clientAudit
				in clientAudits)
			{
				ClientAuditViewModel viewModel = new ClientAuditViewModel(clientAudit.ClientAuditGuid, clientAudit.ClientGuid, clientAudit.ClientID, clientAudit.ClientName, clientAudit.PhoneNumber, clientAudit.Email, clientAudit.Address, clientAudit.CityStateZipGuid, clientAudit.PaymentInfoGuid, clientAudit.FederatedID, clientAudit.FederatedKey, clientAudit.FederatedIDProvider, clientAudit.Username, clientAudit.HashedPassword, clientAudit.DateModified);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion

	}
}