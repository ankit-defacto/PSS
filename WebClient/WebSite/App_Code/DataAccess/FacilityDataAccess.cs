/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEDataAccess (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:17 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.ComponentModel;
using ConcordMfg.PremierSeniorSolutions.Client.Tools;
using SP = ConcordMfg.PremierSeniorSolutions.WebService.Client;

namespace ConcordMfg.PremierSeniorSolutions.Client.ViewModels
{
	/// <summary>
	/// Access the data for the Facility class.
	/// </summary>
	// [DataObject]
	public partial class DataAccess
	{
		#region Fields
		private static SP.FacilitySvc.FacilityClient _facilityClient =
			new SP.FacilitySvc.FacilityClient();
		#endregion


		#region Methods
		/// <summary>
		/// Retrieves Facility from the web service.
		/// </summary>
		/// <returns>A list of all facility.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static FacilityCollection GetFacilities()
		{
			// Call the service for data.
			SP.FacilitySvc.Facility[] facilities = _facilityClient.GetAllFacility();
			// Convert the service proxy object to a View Model object.
			FacilityCollection result = new FacilityCollection(facilities.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves Facility from the web service.
		/// </summary>
		/// <returns>A list of all facility.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static FacilityCollection GetFacilitiesWithUndefined()
		{
			// Call the service for data.
			SP.FacilitySvc.Facility[] facilities = _facilityClient.GetAllFacilityWithUndefined();
			// Convert the service proxy object to a View Model object.
			FacilityCollection result = new FacilityCollection(facilities.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves a Facility from the web service.
		/// </summary>
		/// <param name="facilityGuidStr">The identifier of the Facility to retrieve.</param>
		/// <returns>A Facility.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static Facility GetFacility(string facilityGuidStr)
		{
			// Convert the string into a guid.
			Guid facilityGuid = new Guid(facilityGuidStr);
			// Call the sister method.
			return GetFacility(facilityGuid);
		}

		/// <summary>
		/// Retrieves a Facility from the web service.
		/// </summary>
		/// <param name="facilityGuid">The identifier of the Facility to retrieve.</param>
		/// <returns>A Facility.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static Facility GetFacility(Guid facilityGuid)
		{
			// Call the service for data.
			SP.FacilitySvc.Facility facility = _facilityClient.GetFacilityByFacilityGuid(facilityGuid);
			// Convert and return the service proxy object to a view model object.
			return facility.ToViewModel();
		}

		/// <summary>
		/// Inserts Facility through the web service.
		/// </summary>
		/// <param name="facility">Facility to insert.</param>
		/// <returns>1, if the insert was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Insert, true)]
		public static int InsertFacility(FacilityViewModel facility)
		{
			if (null == facility)
			{
				throw new Exception("Cannot insert Facility. The facility object was null. Cannot be empty.");
			}

			try
			{
				// Convert the view model object to a service proxy object.
				SP.FacilitySvc.Facility request = facility.ToModel();

				// Call the service insert method.
				_facilityClient.InsertFacility(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		[DataObjectMethod(DataObjectMethodType.Insert)]
		public static int InsertFacility(int facilityID, string facilityName, string exerpt, string description, string address, Guid cityStateZipGuid, string phoneNumber, string email, string website, Guid clientGuid, Guid listingTypeGuid, string publicPhotoFileUri)
		{
			try 
			{
				// Create the service proxy object and populate it.
				SP.FacilitySvc.Facility request = new SP.FacilitySvc.Facility();

				request.FacilityGuid = Guid.Empty;
				request.FacilityID = facilityID;
				request.FacilityName = facilityName;
				request.Exerpt = exerpt;
				request.Description = description;
				request.Address = address;
				request.CityStateZipGuid = cityStateZipGuid;
				request.PhoneNumber = phoneNumber;
				request.Email = email;
				request.Website = website;
				request.ClientGuid = clientGuid;
				request.ListingTypeGuid = listingTypeGuid;
				request.PublicPhotoFileUri = publicPhotoFileUri;

				// Call the service insert method.
				_facilityClient.InsertFacility(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Updates Facility through the web service.
		/// </summary>
		/// <param name="facility">Facility to update.</param>
		/// <returns>1, if the update was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Update, true)]
		public static int UpdateFacility(FacilityViewModel facility)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.FacilitySvc.Facility request = facility.ToModel();

				// Call the service update method.
				_facilityClient.UpdateFacility(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Deletes Facility through the web service.
		/// </summary>
		/// <param name="facility">Facility to delete.</param>
		/// <returns>1, if the delete was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Delete, true)]
		public static int DeleteFacility(FacilityViewModel facility)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.FacilitySvc.Facility request = facility.ToModel();

				// Call the service delete method.
				_facilityClient.DeleteFacility(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		#endregion


		#region CityStateZipFacility Methods
		/// <summary>
		/// Retrieves Facility collection for a CityStateZip from the web service.
		/// </summary>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
		/// <returns>Facility collection for a cityStateZip.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityCollection GetFacilitiesForCityStateZipByCityStateZipGuid(Guid cityStateZipGuid)
		{
			SP.FacilitySvc.Facility[] facilities = _facilityClient.GetFacilitiesForCityStateZipByCityStateZipGuid(cityStateZipGuid);
			FacilityCollection result = new FacilityCollection();
			foreach (SP.FacilitySvc.Facility facility
				in facilities)
			{
				FacilityViewModel viewModel = new FacilityViewModel(facility.FacilityGuid, facility.FacilityID, facility.FacilityName, facility.Exerpt, facility.Description, facility.Address, facility.CityStateZipGuid, facility.PhoneNumber, facility.Email, facility.Website, facility.ClientGuid, facility.ListingTypeGuid, facility.PublicPhotoFileUri);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion


		#region ClientFacility Methods
		/// <summary>
		/// Retrieves Facility collection for a Client from the web service.
		/// </summary>
		/// <param name="clientGuid">Client Guid</param>
		/// <returns>Facility collection for a client.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityCollection GetFacilitiesForClientByClientGuid(Guid clientGuid)
		{
			SP.FacilitySvc.Facility[] facilities = _facilityClient.GetFacilitiesForClientByClientGuid(clientGuid);
			FacilityCollection result = new FacilityCollection();
			foreach (SP.FacilitySvc.Facility facility
				in facilities)
			{
				FacilityViewModel viewModel = new FacilityViewModel(facility.FacilityGuid, facility.FacilityID, facility.FacilityName, facility.Exerpt, facility.Description, facility.Address, facility.CityStateZipGuid, facility.PhoneNumber, facility.Email, facility.Website, facility.ClientGuid, facility.ListingTypeGuid, facility.PublicPhotoFileUri);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion


		#region ListingTypeFacility Methods
		/// <summary>
		/// Retrieves Facility collection for a ListingType from the web service.
		/// </summary>
		/// <param name="listingTypeGuid">Listing Type Guid</param>
		/// <returns>Facility collection for a listingType.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityCollection GetFacilitiesForListingTypeByListingTypeGuid(Guid listingTypeGuid)
		{
			SP.FacilitySvc.Facility[] facilities = _facilityClient.GetFacilitiesForListingTypeByListingTypeGuid(listingTypeGuid);
			FacilityCollection result = new FacilityCollection();
			foreach (SP.FacilitySvc.Facility facility
				in facilities)
			{
				FacilityViewModel viewModel = new FacilityViewModel(facility.FacilityGuid, facility.FacilityID, facility.FacilityName, facility.Exerpt, facility.Description, facility.Address, facility.CityStateZipGuid, facility.PhoneNumber, facility.Email, facility.Website, facility.ClientGuid, facility.ListingTypeGuid, facility.PublicPhotoFileUri);
				result.Add(viewModel);
			}
			return result;

		}
		#endregion


		#region CityStateZip Methods
		/// <summary>
		/// Retrieves CityStateZip for a Facility from the web service.
		/// </summary>
		/// <returns>A list of facilities of the cityStateZip.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityCollection GetFacilitiesForCityStateZip(string cityStateZipGuidStr)
		{
			Guid cityStateZipGuid = new Guid(cityStateZipGuidStr);
			try
			{
				FacilityCollection result = DataAccess.GetFacilitiesForCityStateZip(cityStateZipGuid);
				return result;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Retrieves CityStateZip for a Facility from the web service.
		/// </summary>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
		/// <returns>A list of facilities of the cityStateZip.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityCollection GetFacilitiesForCityStateZip(Guid cityStateZipGuid)
		{
			SP.FacilitySvc.Facility[] facilities = _facilityClient.GetFacilitiesForCityStateZip(cityStateZipGuid);
			FacilityCollection result = new FacilityCollection(facilities.ToViewModels());
		return result;
		}

		/// <summary>
		/// Retrieves Facilities for a CityStateZip from the web service.
		/// </summary>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
		/// <returns>A list of facilities not of the cityStateZip.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityCollection GetFacilitiesNotForCityStateZip(Guid cityStateZipGuid)
		{
			SP.FacilitySvc.Facility[] facilities = _facilityClient.GetFacilitiesNotForCityStateZip(cityStateZipGuid);
			FacilityCollection result = new FacilityCollection(facilities.ToViewModels());
			return result;
		}

		
		/// <summary>
		/// Adds a cityStateZip to the facility.
		/// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
		/// <returns>true, if successful; otherwise, false.</returns>
		public static bool AddCityStateZipToFacility(Guid facilityGuid, Guid cityStateZipGuid)
		{
			try
			{
				_facilityClient.AddCityStateZipToFacility(facilityGuid, cityStateZipGuid);
				return true;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Deletes a cityStateZip from a facility.
		/// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
		/// <returns>true, if successful; otherwise, false.</returns>
		public static bool DeleteCityStateZipFromFacility(Guid facilityGuid, Guid cityStateZipGuid)
		{
			try
			{
				_facilityClient.DeleteCityStateZipFromFacility(facilityGuid, cityStateZipGuid);
				return true;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		#endregion


		#region Offering Methods
		/// <summary>
		/// Retrieves Offering for a Facility from the web service.
		/// </summary>
		/// <returns>A list of facilities of the offering.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityCollection GetFacilitiesForOffering(string offeringGuidStr)
		{
			Guid offeringGuid = new Guid(offeringGuidStr);
			try
			{
				FacilityCollection result = DataAccess.GetFacilitiesForOffering(offeringGuid);
				return result;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Retrieves Offering for a Facility from the web service.
		/// </summary>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <returns>A list of facilities of the offering.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityCollection GetFacilitiesForOffering(Guid offeringGuid)
		{
			SP.FacilitySvc.Facility[] facilities = _facilityClient.GetFacilitiesForOffering(offeringGuid);
			FacilityCollection result = new FacilityCollection(facilities.ToViewModels());
		return result;
		}

		/// <summary>
		/// Retrieves Facilities for a Offering from the web service.
		/// </summary>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <returns>A list of facilities not of the offering.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static FacilityCollection GetFacilitiesNotForOffering(Guid offeringGuid)
		{
			SP.FacilitySvc.Facility[] facilities = _facilityClient.GetFacilitiesNotForOffering(offeringGuid);
			FacilityCollection result = new FacilityCollection(facilities.ToViewModels());
			return result;
		}

		
		/// <summary>
		/// Adds a offering to the facility.
		/// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <param name="isChecked">Is Checked</param>
		/// <returns>true, if successful; otherwise, false.</returns>
		public static bool AddOfferingToFacility(Guid facilityGuid, Guid offeringGuid, bool isChecked)
		{
			try
			{
				_facilityClient.AddOfferingToFacility(facilityGuid, offeringGuid, isChecked);
				return true;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Deletes a offering from a facility.
		/// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <returns>true, if successful; otherwise, false.</returns>
		public static bool DeleteOfferingFromFacility(Guid facilityGuid, Guid offeringGuid)
		{
			try
			{
				_facilityClient.DeleteOfferingFromFacility(facilityGuid, offeringGuid);
				return true;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		#endregion

	}
}