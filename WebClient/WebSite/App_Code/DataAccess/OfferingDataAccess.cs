/*  Generated by CodeGen written by Concord Mfg.
 *  Transform file used: BEDataAccess (v0.1.0.0).xslt
 *  Date generated: 3/28/2012 12:46:17 PM
 *  CodeGen version: 0.1.0.0  */

using System;
using System.ComponentModel;
using ConcordMfg.PremierSeniorSolutions.Client.Tools;
using SP = ConcordMfg.PremierSeniorSolutions.WebService.Client;

namespace ConcordMfg.PremierSeniorSolutions.Client.ViewModels
{
	/// <summary>
	/// Access the data for the Offering class.
	/// </summary>
	// [DataObject]
	public partial class DataAccess
	{
		#region Fields
		private static SP.OfferingSvc.OfferingClient _offeringClient =
			new SP.OfferingSvc.OfferingClient();
		#endregion


		#region Methods
		/// <summary>
		/// Retrieves Offering from the web service.
		/// </summary>
		/// <returns>A list of all offering.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static OfferingCollection GetOfferings()
		{
			// Call the service for data.
			SP.OfferingSvc.Offering[] offerings = _offeringClient.GetAllOffering();
			// Convert the service proxy object to a View Model object.
			OfferingCollection result = new OfferingCollection(offerings.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves Offering from the web service.
		/// </summary>
		/// <returns>A list of all offering.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, true)]
		public static OfferingCollection GetOfferingsWithUndefined()
		{
			// Call the service for data.
			SP.OfferingSvc.Offering[] offerings = _offeringClient.GetAllOfferingWithUndefined();
			// Convert the service proxy object to a View Model object.
			OfferingCollection result = new OfferingCollection(offerings.ToViewModels());
			return result;
		}

		/// <summary>
		/// Retrieves a Offering from the web service.
		/// </summary>
		/// <param name="offeringGuidStr">The identifier of the Offering to retrieve.</param>
		/// <returns>A Offering.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static Offering GetOffering(string offeringGuidStr)
		{
			// Convert the string into a guid.
			Guid offeringGuid = new Guid(offeringGuidStr);
			// Call the sister method.
			return GetOffering(offeringGuid);
		}

		/// <summary>
		/// Retrieves a Offering from the web service.
		/// </summary>
		/// <param name="offeringGuid">The identifier of the Offering to retrieve.</param>
		/// <returns>A Offering.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static Offering GetOffering(Guid offeringGuid)
		{
			// Call the service for data.
			SP.OfferingSvc.Offering offering = _offeringClient.GetOfferingByOfferingGuid(offeringGuid);
			// Convert and return the service proxy object to a view model object.
			return offering.ToViewModel();
		}

		/// <summary>
		/// Inserts Offering through the web service.
		/// </summary>
		/// <param name="offering">Offering to insert.</param>
		/// <returns>1, if the insert was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Insert, true)]
		public static int InsertOffering(OfferingViewModel offering)
		{
			if (null == offering)
			{
				throw new Exception("Cannot insert Offering. The offering object was null. Cannot be empty.");
			}

			try
			{
				// Convert the view model object to a service proxy object.
				SP.OfferingSvc.Offering request = offering.ToModel();

				// Call the service insert method.
				_offeringClient.InsertOffering(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		[DataObjectMethod(DataObjectMethodType.Insert)]
		public static int InsertOffering(int offeringID, string offeringName)
		{
			try 
			{
				// Create the service proxy object and populate it.
				SP.OfferingSvc.Offering request = new SP.OfferingSvc.Offering();

				request.OfferingGuid = Guid.Empty;
				request.OfferingID = offeringID;
				request.OfferingName = offeringName;

				// Call the service insert method.
				_offeringClient.InsertOffering(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Updates Offering through the web service.
		/// </summary>
		/// <param name="offering">Offering to update.</param>
		/// <returns>1, if the update was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Update, true)]
		public static int UpdateOffering(OfferingViewModel offering)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.OfferingSvc.Offering request = offering.ToModel();

				// Call the service update method.
				_offeringClient.UpdateOffering(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Deletes Offering through the web service.
		/// </summary>
		/// <param name="offering">Offering to delete.</param>
		/// <returns>1, if the delete was successful; otherwise, 0.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Delete, true)]
		public static int DeleteOffering(OfferingViewModel offering)
		{
			try
			{
				// Convert the view model object to a service proxy object.
				SP.OfferingSvc.Offering request = offering.ToModel();

				// Call the service delete method.
				_offeringClient.DeleteOffering(request);

				return 1;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		#endregion


		#region Facility Methods
		/// <summary>
		/// Retrieves Facility for a Offering from the web service.
		/// </summary>
		/// <returns>A list of offerings of the facility.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static OfferingCollection GetOfferingsForFacility(string facilityGuidStr)
		{
			Guid facilityGuid = new Guid(facilityGuidStr);
			try
			{
				OfferingCollection result = DataAccess.GetOfferingsForFacility(facilityGuid);
				return result;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Retrieves Facility for a Offering from the web service.
		/// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <returns>A list of offerings of the facility.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static OfferingCollection GetOfferingsForFacility(Guid facilityGuid)
		{
			SP.OfferingSvc.Offering[] offerings = _offeringClient.GetOfferingsForFacility(facilityGuid);
			OfferingCollection result = new OfferingCollection(offerings.ToViewModels());
		return result;
		}

		/// <summary>
		/// Retrieves Offerings for a Facility from the web service.
		/// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <returns>A list of offerings not of the facility.</returns>
		[DataObjectMethodAttribute(DataObjectMethodType.Select, false)]
		public static OfferingCollection GetOfferingsNotForFacility(Guid facilityGuid)
		{
			SP.OfferingSvc.Offering[] offerings = _offeringClient.GetOfferingsNotForFacility(facilityGuid);
			OfferingCollection result = new OfferingCollection(offerings.ToViewModels());
			return result;
		}

		
		/// <summary>
		/// Adds a facility to the offering.
		/// </summary>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <param name="isChecked">Is Checked</param>
		/// <returns>true, if successful; otherwise, false.</returns>
		public static bool AddFacilityToOffering(Guid offeringGuid, Guid facilityGuid, bool isChecked)
		{
			try
			{
				_offeringClient.AddFacilityToOffering(offeringGuid, facilityGuid, isChecked);
				return true;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		/// <summary>
		/// Deletes a facility from a offering.
		/// </summary>
		/// <param name="offeringGuid">Offering Guid</param>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <returns>true, if successful; otherwise, false.</returns>
		public static bool DeleteFacilityFromOffering(Guid offeringGuid, Guid facilityGuid)
		{
			try
			{
				_offeringClient.DeleteFacilityFromOffering(offeringGuid, facilityGuid);
				return true;
			}
			catch (System.ServiceModel.FaultException ex)
			{
				throw ex;
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}
		#endregion

	}
}