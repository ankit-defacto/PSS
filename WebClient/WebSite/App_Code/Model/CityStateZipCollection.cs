/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BECollection (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:15 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections;
using System.Collections.Generic;
using ISNet.WebUI.DataSource;
using ConcordMfg.PremierSeniorSolutions.WebService.Client.CityStateZipSvc;

namespace ConcordMfg.PremierSeniorSolutions.Client.Models
{
	/// <summary>
	/// The collection of CityStateZip.
	/// </summary>
	public class CityStateZipCollection : CollectionBase, IHierarchicalList, IObjectRelations
	{
		#region Constructors
		/// <summary>
		/// Initializes a new instance of the CityStateZipCollection class for the UI tier.
		/// </summary>
		public CityStateZipCollection()
		{
		}

		/// <summary>
		/// Initializes a new instance of the CityStateZipCollection class for the UI tier
		/// given a list of cityStateZips.
		/// </summary>
		/// <param name="cityStateZips">List of cityStateZips.</param>
		public CityStateZipCollection(IEnumerable<CityStateZip> cityStateZips)
		{
			foreach (CityStateZip cityStateZip in cityStateZips)
			{
				this.Add(cityStateZip);
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Adds a CityStateZip to the collection.
		/// </summary>
		/// <param name="cityStateZip">The cityStateZip to add.</param>
		public void Add(CityStateZip cityStateZip)
		{
			//cityStateZip.Owner = this;
			List.Add(cityStateZip);
		}

		/// <summary>
		/// Removes CityStateZip at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>true, if the removal was successful; otherwise, false.</returns>
		public bool Remove(int index)
		{
			try
			{
				List.RemoveAt(index);
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes CityStateZip from the collection.
		/// </summary>
		/// <param name="cityStateZip">The cityStateZip to remove.</param>
		public void Remove(CityStateZip cityStateZip)
		{
			List.Remove(cityStateZip);
		}

		/// <summary>
		/// Gets CityStateZip at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>The cityStateZip.</returns>
		public CityStateZip Item(int index)
		{
			return List[index] as CityStateZip;
		}

		/// <summary>
		/// Retrieves CityStateZip for cityStateZipGuid.
		/// </summary>
		/// <param name="cityStateZipGuid">City State Zip Guid</param>
		/// <returns>CityStateZip that contains the identifier.</returns>
		public CityStateZip FindByID(Guid cityStateZipGuid)
		{
			foreach (CityStateZip cityStateZip in this.InnerList)
			{
				if (cityStateZip.CityStateZipGuid == cityStateZipGuid)
					return cityStateZip;
			}
			return null;
		}
		#endregion

		#region IHierarchicalList Members

		/// <summary>
		/// Gets the item type.
		/// </summary>
		public Type ItemType
		{
			get { return typeof(CityStateZip); }
		}

		#endregion

		#region IObjectRelations Members

		/// <summary>
		/// Gets the relations array from ObjectRelations.
		/// </summary>
		public ArrayList Relations
		{
			get
			{
				ArrayList relations = new ArrayList();

				// Joins for Children

				relations.Add(new ISDataSourceObjectRelation(
					typeof(CityStateZipCollection), "CityStateZipGuid",
          "Facilities", typeof(FacilityCollection), "CityStateZipGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(CityStateZipCollection), "CityStateZipGuid",
          "FacilityAudits", typeof(FacilityAuditCollection), "CityStateZipGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(CityStateZipCollection), "CityStateZipGuid",
          "Clients", typeof(ClientCollection), "CityStateZipGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(CityStateZipCollection), "CityStateZipGuid",
          "ClientAudits", typeof(ClientAuditCollection), "CityStateZipGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(CityStateZipCollection), "CityStateZipGuid",
					"FacilitiesWithCityStateZip", typeof(FacilityWithCityStateZipCollection), "CityStateZipGuid"));


				return relations;
			}
		}

		#endregion
	}
}