/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BECollection (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:15 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections;
using System.Collections.Generic;
using ISNet.WebUI.DataSource;
using ConcordMfg.PremierSeniorSolutions.WebService.Client.ListingTypeSvc;

namespace ConcordMfg.PremierSeniorSolutions.Client.Models
{
	/// <summary>
	/// The collection of ListingType.
	/// </summary>
	public class ListingTypeCollection : CollectionBase, IHierarchicalList, IObjectRelations
	{
		#region Constructors
		/// <summary>
		/// Initializes a new instance of the ListingTypeCollection class for the UI tier.
		/// </summary>
		public ListingTypeCollection()
		{
		}

		/// <summary>
		/// Initializes a new instance of the ListingTypeCollection class for the UI tier
		/// given a list of listingTypes.
		/// </summary>
		/// <param name="listingTypes">List of listingTypes.</param>
		public ListingTypeCollection(IEnumerable<ListingType> listingTypes)
		{
			foreach (ListingType listingType in listingTypes)
			{
				this.Add(listingType);
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Adds a ListingType to the collection.
		/// </summary>
		/// <param name="listingType">The listingType to add.</param>
		public void Add(ListingType listingType)
		{
			//listingType.Owner = this;
			List.Add(listingType);
		}

		/// <summary>
		/// Removes ListingType at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>true, if the removal was successful; otherwise, false.</returns>
		public bool Remove(int index)
		{
			try
			{
				List.RemoveAt(index);
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes ListingType from the collection.
		/// </summary>
		/// <param name="listingType">The listingType to remove.</param>
		public void Remove(ListingType listingType)
		{
			List.Remove(listingType);
		}

		/// <summary>
		/// Gets ListingType at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>The listingType.</returns>
		public ListingType Item(int index)
		{
			return List[index] as ListingType;
		}

		/// <summary>
		/// Retrieves ListingType for listingTypeGuid.
		/// </summary>
		/// <param name="listingTypeGuid">Listing Type Guid</param>
		/// <returns>ListingType that contains the identifier.</returns>
		public ListingType FindByID(Guid listingTypeGuid)
		{
			foreach (ListingType listingType in this.InnerList)
			{
				if (listingType.ListingTypeGuid == listingTypeGuid)
					return listingType;
			}
			return null;
		}
		#endregion

		#region IHierarchicalList Members

		/// <summary>
		/// Gets the item type.
		/// </summary>
		public Type ItemType
		{
			get { return typeof(ListingType); }
		}

		#endregion

		#region IObjectRelations Members

		/// <summary>
		/// Gets the relations array from ObjectRelations.
		/// </summary>
		public ArrayList Relations
		{
			get
			{
				ArrayList relations = new ArrayList();

				// Joins for Children

				relations.Add(new ISDataSourceObjectRelation(
					typeof(ListingTypeCollection), "ListingTypeGuid",
          "Clicks", typeof(ClickCollection), "ListingTypeGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(ListingTypeCollection), "ListingTypeGuid",
          "Facilities", typeof(FacilityCollection), "ListingTypeGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(ListingTypeCollection), "ListingTypeGuid",
          "FacilityAudits", typeof(FacilityAuditCollection), "ListingTypeGuid"));

				return relations;
			}
		}

		#endregion
	}
}