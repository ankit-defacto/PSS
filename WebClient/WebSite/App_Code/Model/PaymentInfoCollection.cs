/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BECollection (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:15 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections;
using System.Collections.Generic;
using ISNet.WebUI.DataSource;
using ConcordMfg.PremierSeniorSolutions.WebService.Client.PaymentInfoSvc;

namespace ConcordMfg.PremierSeniorSolutions.Client.Models
{
	/// <summary>
	/// The collection of PaymentInfo.
	/// </summary>
	public class PaymentInfoCollection : CollectionBase, IHierarchicalList, IObjectRelations
	{
		#region Constructors
		/// <summary>
		/// Initializes a new instance of the PaymentInfoCollection class for the UI tier.
		/// </summary>
		public PaymentInfoCollection()
		{
		}

		/// <summary>
		/// Initializes a new instance of the PaymentInfoCollection class for the UI tier
		/// given a list of paymentInfos.
		/// </summary>
		/// <param name="paymentInfos">List of paymentInfos.</param>
		public PaymentInfoCollection(IEnumerable<PaymentInfo> paymentInfos)
		{
			foreach (PaymentInfo paymentInfo in paymentInfos)
			{
				this.Add(paymentInfo);
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Adds a PaymentInfo to the collection.
		/// </summary>
		/// <param name="paymentInfo">The paymentInfo to add.</param>
		public void Add(PaymentInfo paymentInfo)
		{
			//paymentInfo.Owner = this;
			List.Add(paymentInfo);
		}

		/// <summary>
		/// Removes PaymentInfo at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>true, if the removal was successful; otherwise, false.</returns>
		public bool Remove(int index)
		{
			try
			{
				List.RemoveAt(index);
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes PaymentInfo from the collection.
		/// </summary>
		/// <param name="paymentInfo">The paymentInfo to remove.</param>
		public void Remove(PaymentInfo paymentInfo)
		{
			List.Remove(paymentInfo);
		}

		/// <summary>
		/// Gets PaymentInfo at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>The paymentInfo.</returns>
		public PaymentInfo Item(int index)
		{
			return List[index] as PaymentInfo;
		}

		/// <summary>
		/// Retrieves PaymentInfo for paymentInfoGuid.
		/// </summary>
		/// <param name="paymentInfoGuid">Payment Info Guid</param>
		/// <returns>PaymentInfo that contains the identifier.</returns>
		public PaymentInfo FindByID(Guid paymentInfoGuid)
		{
			foreach (PaymentInfo paymentInfo in this.InnerList)
			{
				if (paymentInfo.PaymentInfoGuid == paymentInfoGuid)
					return paymentInfo;
			}
			return null;
		}
		#endregion

		#region IHierarchicalList Members

		/// <summary>
		/// Gets the item type.
		/// </summary>
		public Type ItemType
		{
			get { return typeof(PaymentInfo); }
		}

		#endregion

		#region IObjectRelations Members

		/// <summary>
		/// Gets the relations array from ObjectRelations.
		/// </summary>
		public ArrayList Relations
		{
			get
			{
				ArrayList relations = new ArrayList();

				// Joins for Children

				relations.Add(new ISDataSourceObjectRelation(
					typeof(PaymentInfoCollection), "PaymentInfoGuid",
          "PaymentInfoAudits", typeof(PaymentInfoAuditCollection), "PaymentInfoGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(PaymentInfoCollection), "PaymentInfoGuid",
          "Clients", typeof(ClientCollection), "PaymentInfoGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(PaymentInfoCollection), "PaymentInfoGuid",
          "ClientAudits", typeof(ClientAuditCollection), "PaymentInfoGuid"));

				return relations;
			}
		}

		#endregion
	}
}