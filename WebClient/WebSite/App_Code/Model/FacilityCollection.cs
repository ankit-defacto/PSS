/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BECollection (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:15 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections;
using System.Collections.Generic;
using ISNet.WebUI.DataSource;
using ConcordMfg.PremierSeniorSolutions.WebService.Client.FacilitySvc;

namespace ConcordMfg.PremierSeniorSolutions.Client.Models
{
	/// <summary>
	/// The collection of Facility.
	/// </summary>
	public class FacilityCollection : CollectionBase, IHierarchicalList, IObjectRelations
	{
		#region Constructors
		/// <summary>
		/// Initializes a new instance of the FacilityCollection class for the UI tier.
		/// </summary>
		public FacilityCollection()
		{
		}

		/// <summary>
		/// Initializes a new instance of the FacilityCollection class for the UI tier
		/// given a list of facilities.
		/// </summary>
		/// <param name="facilities">List of facilities.</param>
		public FacilityCollection(IEnumerable<Facility> facilities)
		{
			foreach (Facility facility in facilities)
			{
				this.Add(facility);
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Adds a Facility to the collection.
		/// </summary>
		/// <param name="facility">The facility to add.</param>
		public void Add(Facility facility)
		{
			//facility.Owner = this;
			List.Add(facility);
		}

		/// <summary>
		/// Removes Facility at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>true, if the removal was successful; otherwise, false.</returns>
		public bool Remove(int index)
		{
			try
			{
				List.RemoveAt(index);
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes Facility from the collection.
		/// </summary>
		/// <param name="facility">The facility to remove.</param>
		public void Remove(Facility facility)
		{
			List.Remove(facility);
		}

		/// <summary>
		/// Gets Facility at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>The facility.</returns>
		public Facility Item(int index)
		{
			return List[index] as Facility;
		}

		/// <summary>
		/// Retrieves Facility for facilityGuid.
		/// </summary>
		/// <param name="facilityGuid">Facility Guid</param>
		/// <returns>Facility that contains the identifier.</returns>
		public Facility FindByID(Guid facilityGuid)
		{
			foreach (Facility facility in this.InnerList)
			{
				if (facility.FacilityGuid == facilityGuid)
					return facility;
			}
			return null;
		}
		#endregion

		#region IHierarchicalList Members

		/// <summary>
		/// Gets the item type.
		/// </summary>
		public Type ItemType
		{
			get { return typeof(Facility); }
		}

		#endregion

		#region IObjectRelations Members

		/// <summary>
		/// Gets the relations array from ObjectRelations.
		/// </summary>
		public ArrayList Relations
		{
			get
			{
				ArrayList relations = new ArrayList();

				// Joins for Children

				relations.Add(new ISDataSourceObjectRelation(
					typeof(FacilityCollection), "FacilityGuid",
          "Clicks", typeof(ClickCollection), "FacilityGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(FacilityCollection), "FacilityGuid",
          "FacilityPhotos", typeof(FacilityPhotoCollection), "FacilityGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(FacilityCollection), "FacilityGuid",
          "FacilityAudits", typeof(FacilityAuditCollection), "FacilityGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(FacilityCollection), "FacilityGuid",
					"CityStateZipsWithFacility", typeof(CityStateZipWithFacilityCollection), "FacilityGuid"));

				relations.Add(new ISDataSourceObjectRelation(
					typeof(FacilityCollection), "FacilityGuid",
					"OfferingsWithFacility", typeof(OfferingWithFacilityCollection), "FacilityGuid"));


				return relations;
			}
		}

		#endregion
	}
}