/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BECollection (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:15 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections;
using System.Collections.Generic;
using ISNet.WebUI.DataSource;
using ConcordMfg.PremierSeniorSolutions.WebService.Client.PaymentInfoAuditSvc;

namespace ConcordMfg.PremierSeniorSolutions.Client.Models
{
	/// <summary>
	/// The collection of PaymentInfoAudit.
	/// </summary>
	public class PaymentInfoAuditCollection : CollectionBase, IHierarchicalList, IObjectRelations
	{
		#region Constructors
		/// <summary>
		/// Initializes a new instance of the PaymentInfoAuditCollection class for the UI tier.
		/// </summary>
		public PaymentInfoAuditCollection()
		{
		}

		/// <summary>
		/// Initializes a new instance of the PaymentInfoAuditCollection class for the UI tier
		/// given a list of paymentInfoAudits.
		/// </summary>
		/// <param name="paymentInfoAudits">List of paymentInfoAudits.</param>
		public PaymentInfoAuditCollection(IEnumerable<PaymentInfoAudit> paymentInfoAudits)
		{
			foreach (PaymentInfoAudit paymentInfoAudit in paymentInfoAudits)
			{
				this.Add(paymentInfoAudit);
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Adds a PaymentInfoAudit to the collection.
		/// </summary>
		/// <param name="paymentInfoAudit">The paymentInfoAudit to add.</param>
		public void Add(PaymentInfoAudit paymentInfoAudit)
		{
			//paymentInfoAudit.Owner = this;
			List.Add(paymentInfoAudit);
		}

		/// <summary>
		/// Removes PaymentInfoAudit at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>true, if the removal was successful; otherwise, false.</returns>
		public bool Remove(int index)
		{
			try
			{
				List.RemoveAt(index);
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes PaymentInfoAudit from the collection.
		/// </summary>
		/// <param name="paymentInfoAudit">The paymentInfoAudit to remove.</param>
		public void Remove(PaymentInfoAudit paymentInfoAudit)
		{
			List.Remove(paymentInfoAudit);
		}

		/// <summary>
		/// Gets PaymentInfoAudit at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>The paymentInfoAudit.</returns>
		public PaymentInfoAudit Item(int index)
		{
			return List[index] as PaymentInfoAudit;
		}

		/// <summary>
		/// Retrieves PaymentInfoAudit for paymentInfoAuditGuid.
		/// </summary>
		/// <param name="paymentInfoAuditGuid">Payment Info Audit Guid</param>
		/// <returns>PaymentInfoAudit that contains the identifier.</returns>
		public PaymentInfoAudit FindByID(Guid paymentInfoAuditGuid)
		{
			foreach (PaymentInfoAudit paymentInfoAudit in this.InnerList)
			{
				if (paymentInfoAudit.PaymentInfoAuditGuid == paymentInfoAuditGuid)
					return paymentInfoAudit;
			}
			return null;
		}
		#endregion

		#region IHierarchicalList Members

		/// <summary>
		/// Gets the item type.
		/// </summary>
		public Type ItemType
		{
			get { return typeof(PaymentInfoAudit); }
		}

		#endregion

		#region IObjectRelations Members

		/// <summary>
		/// Gets the relations array from ObjectRelations.
		/// </summary>
		public ArrayList Relations
		{
			get
			{
				ArrayList relations = new ArrayList();

				// Joins for Children


				return relations;
			}
		}

		#endregion
	}
}