/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BECollection (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:15 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections;
using System.Collections.Generic;
using ISNet.WebUI.DataSource;
using ConcordMfg.PremierSeniorSolutions.WebService.Client.FacilityPhotoSvc;

namespace ConcordMfg.PremierSeniorSolutions.Client.Models
{
	/// <summary>
	/// The collection of FacilityPhoto.
	/// </summary>
	public class FacilityPhotoCollection : CollectionBase, IHierarchicalList, IObjectRelations
	{
		#region Constructors
		/// <summary>
		/// Initializes a new instance of the FacilityPhotoCollection class for the UI tier.
		/// </summary>
		public FacilityPhotoCollection()
		{
		}

		/// <summary>
		/// Initializes a new instance of the FacilityPhotoCollection class for the UI tier
		/// given a list of facilityPhotos.
		/// </summary>
		/// <param name="facilityPhotos">List of facilityPhotos.</param>
		public FacilityPhotoCollection(IEnumerable<FacilityPhoto> facilityPhotos)
		{
			foreach (FacilityPhoto facilityPhoto in facilityPhotos)
			{
				this.Add(facilityPhoto);
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Adds a FacilityPhoto to the collection.
		/// </summary>
		/// <param name="facilityPhoto">The facilityPhoto to add.</param>
		public void Add(FacilityPhoto facilityPhoto)
		{
			//facilityPhoto.Owner = this;
			List.Add(facilityPhoto);
		}

		/// <summary>
		/// Removes FacilityPhoto at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>true, if the removal was successful; otherwise, false.</returns>
		public bool Remove(int index)
		{
			try
			{
				List.RemoveAt(index);
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes FacilityPhoto from the collection.
		/// </summary>
		/// <param name="facilityPhoto">The facilityPhoto to remove.</param>
		public void Remove(FacilityPhoto facilityPhoto)
		{
			List.Remove(facilityPhoto);
		}

		/// <summary>
		/// Gets FacilityPhoto at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>The facilityPhoto.</returns>
		public FacilityPhoto Item(int index)
		{
			return List[index] as FacilityPhoto;
		}

		/// <summary>
		/// Retrieves FacilityPhoto for facilityPhotoGuid.
		/// </summary>
		/// <param name="facilityPhotoGuid">Photo Guid</param>
		/// <returns>FacilityPhoto that contains the identifier.</returns>
		public FacilityPhoto FindByID(Guid facilityPhotoGuid)
		{
			foreach (FacilityPhoto facilityPhoto in this.InnerList)
			{
				if (facilityPhoto.FacilityPhotoGuid == facilityPhotoGuid)
					return facilityPhoto;
			}
			return null;
		}
		#endregion

		#region IHierarchicalList Members

		/// <summary>
		/// Gets the item type.
		/// </summary>
		public Type ItemType
		{
			get { return typeof(FacilityPhoto); }
		}

		#endregion

		#region IObjectRelations Members

		/// <summary>
		/// Gets the relations array from ObjectRelations.
		/// </summary>
		public ArrayList Relations
		{
			get
			{
				ArrayList relations = new ArrayList();

				// Joins for Children


				return relations;
			}
		}

		#endregion
	}
}