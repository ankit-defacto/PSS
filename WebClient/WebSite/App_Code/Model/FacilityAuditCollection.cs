/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BECollection (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:15 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections;
using System.Collections.Generic;
using ISNet.WebUI.DataSource;
using ConcordMfg.PremierSeniorSolutions.WebService.Client.FacilityAuditSvc;

namespace ConcordMfg.PremierSeniorSolutions.Client.Models
{
	/// <summary>
	/// The collection of FacilityAudit.
	/// </summary>
	public class FacilityAuditCollection : CollectionBase, IHierarchicalList, IObjectRelations
	{
		#region Constructors
		/// <summary>
		/// Initializes a new instance of the FacilityAuditCollection class for the UI tier.
		/// </summary>
		public FacilityAuditCollection()
		{
		}

		/// <summary>
		/// Initializes a new instance of the FacilityAuditCollection class for the UI tier
		/// given a list of facilityAudits.
		/// </summary>
		/// <param name="facilityAudits">List of facilityAudits.</param>
		public FacilityAuditCollection(IEnumerable<FacilityAudit> facilityAudits)
		{
			foreach (FacilityAudit facilityAudit in facilityAudits)
			{
				this.Add(facilityAudit);
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Adds a FacilityAudit to the collection.
		/// </summary>
		/// <param name="facilityAudit">The facilityAudit to add.</param>
		public void Add(FacilityAudit facilityAudit)
		{
			//facilityAudit.Owner = this;
			List.Add(facilityAudit);
		}

		/// <summary>
		/// Removes FacilityAudit at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>true, if the removal was successful; otherwise, false.</returns>
		public bool Remove(int index)
		{
			try
			{
				List.RemoveAt(index);
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes FacilityAudit from the collection.
		/// </summary>
		/// <param name="facilityAudit">The facilityAudit to remove.</param>
		public void Remove(FacilityAudit facilityAudit)
		{
			List.Remove(facilityAudit);
		}

		/// <summary>
		/// Gets FacilityAudit at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>The facilityAudit.</returns>
		public FacilityAudit Item(int index)
		{
			return List[index] as FacilityAudit;
		}

		/// <summary>
		/// Retrieves FacilityAudit for facilityAuditGuid.
		/// </summary>
		/// <param name="facilityAuditGuid">Facility Audit Guid</param>
		/// <returns>FacilityAudit that contains the identifier.</returns>
		public FacilityAudit FindByID(Guid facilityAuditGuid)
		{
			foreach (FacilityAudit facilityAudit in this.InnerList)
			{
				if (facilityAudit.FacilityAuditGuid == facilityAuditGuid)
					return facilityAudit;
			}
			return null;
		}
		#endregion

		#region IHierarchicalList Members

		/// <summary>
		/// Gets the item type.
		/// </summary>
		public Type ItemType
		{
			get { return typeof(FacilityAudit); }
		}

		#endregion

		#region IObjectRelations Members

		/// <summary>
		/// Gets the relations array from ObjectRelations.
		/// </summary>
		public ArrayList Relations
		{
			get
			{
				ArrayList relations = new ArrayList();

				// Joins for Children


				return relations;
			}
		}

		#endregion
	}
}