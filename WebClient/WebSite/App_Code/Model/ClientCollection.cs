/*  Generated by CodeGen written by Concord Mfg.
 * Transform file used: BECollection (v0.1.0.0).xslt
 * Date generated: 3/28/2012 12:46:15 PM
 * CodeGen version: 0.1.0.0  */

using System;
using System.Collections;
using System.Collections.Generic;
using ISNet.WebUI.DataSource;
using ConcordMfg.PremierSeniorSolutions.WebService.Client.ClientSvc;

namespace ConcordMfg.PremierSeniorSolutions.Client.Models
{
	/// <summary>
	/// The collection of Client.
	/// </summary>
	public class ClientCollection : CollectionBase, IHierarchicalList, IObjectRelations
	{
		#region Constructors
		/// <summary>
		/// Initializes a new instance of the ClientCollection class for the UI tier.
		/// </summary>
		public ClientCollection()
		{
		}

		/// <summary>
		/// Initializes a new instance of the ClientCollection class for the UI tier
		/// given a list of clients.
		/// </summary>
		/// <param name="clients">List of clients.</param>
		public ClientCollection(IEnumerable<Client> clients)
		{
			foreach (Client client in clients)
			{
				this.Add(client);
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Adds a Client to the collection.
		/// </summary>
		/// <param name="client">The client to add.</param>
		public void Add(Client client)
		{
			//client.Owner = this;
			List.Add(client);
		}

		/// <summary>
		/// Removes Client at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>true, if the removal was successful; otherwise, false.</returns>
		public bool Remove(int index)
		{
			try
			{
				List.RemoveAt(index);
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes Client from the collection.
		/// </summary>
		/// <param name="client">The client to remove.</param>
		public void Remove(Client client)
		{
			List.Remove(client);
		}

		/// <summary>
		/// Gets Client at the index offset.
		/// </summary>
		/// <param name="index">The offset into the collection.</param>
		/// <returns>The client.</returns>
		public Client Item(int index)
		{
			return List[index] as Client;
		}

		/// <summary>
		/// Retrieves Client for clientGuid.
		/// </summary>
		/// <param name="clientGuid">Client Guid</param>
		/// <returns>Client that contains the identifier.</returns>
		public Client FindByID(Guid clientGuid)
		{
			foreach (Client client in this.InnerList)
			{
				if (client.ClientGuid == clientGuid)
					return client;
			}
			return null;
		}
		#endregion

		#region IHierarchicalList Members

		/// <summary>
		/// Gets the item type.
		/// </summary>
		public Type ItemType
		{
			get { return typeof(Client); }
		}

		#endregion

		#region IObjectRelations Members

		/// <summary>
		/// Gets the relations array from ObjectRelations.
		/// </summary>
		public ArrayList Relations
		{
			get
			{
				ArrayList relations = new ArrayList();

				// Joins for Children

				relations.Add(new ISDataSourceObjectRelation(
					typeof(ClientCollection), "ClientGuid",
          "Facilities", typeof(FacilityCollection), "ClientGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(ClientCollection), "ClientGuid",
          "FacilityAudits", typeof(FacilityAuditCollection), "ClientGuid"));
				relations.Add(new ISDataSourceObjectRelation(
					typeof(ClientCollection), "ClientGuid",
          "ClientAudits", typeof(ClientAuditCollection), "ClientGuid"));

				return relations;
			}
		}

		#endregion
	}
}